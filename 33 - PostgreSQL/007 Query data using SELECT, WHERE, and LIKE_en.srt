1
00:00:00,290 --> 00:00:01,040
Hey guys.

2
00:00:01,040 --> 00:00:05,480
Welcome to this lesson on querying data using Postgres.

3
00:00:05,510 --> 00:00:13,430
Now in the last lesson we looked at how to read the data from our database, how to view our database.

4
00:00:13,640 --> 00:00:20,570
In this lesson, we want to do a deeper dive into this process and see all of the different ways that

5
00:00:20,570 --> 00:00:28,550
we can use that select keyword in SQL, and how we can query our data and search through our database

6
00:00:28,550 --> 00:00:34,160
to find a specific piece of information that we want to use in our applications.

7
00:00:34,490 --> 00:00:44,390
The data we're going to be using to practice our SQL skills is the total amount of food produced by

8
00:00:44,390 --> 00:00:52,370
various countries in 2021, and the two foods that are focused on are rice and wheat.

9
00:00:52,460 --> 00:00:59,150
And if you take a look in the current lesson, you'll see a file that's downloadable called World Food

10
00:00:59,150 --> 00:00:59,960
Dot CSV.

11
00:01:00,290 --> 00:01:02,600
Go ahead and download that file.

12
00:01:02,600 --> 00:01:07,940
And what we're going to do is we're going to put this data into a Postgres database.

13
00:01:07,940 --> 00:01:13,370
So we're going to create a table for the world food production data.

14
00:01:13,580 --> 00:01:19,580
And if you take a look at this quick graph that I created in Excel, it's basically a bunch of different

15
00:01:19,580 --> 00:01:21,500
countries, nine of them.

16
00:01:21,500 --> 00:01:30,020
And we've got data on the amount of rice and the amount of wheat produced in million metric tons.

17
00:01:31,100 --> 00:01:32,900
So it's a lot of food.

18
00:01:32,900 --> 00:01:38,180
And we can see some of the big players like China, India, US.

19
00:01:38,180 --> 00:01:43,930
And we can see also the breakdown of different types of grain that they produce.

20
00:01:43,940 --> 00:01:50,990
For example, the US produces way more wheat than it does rice and India produces way more rice than

21
00:01:50,990 --> 00:01:52,880
it does wheat and so on.

22
00:01:52,880 --> 00:01:56,150
So this is the raw data that we're going to be working with.

23
00:01:56,150 --> 00:02:03,740
And of course, it's kind of interesting to know which types of foods are produced in different countries.

24
00:02:04,740 --> 00:02:07,200
The first exercise is a bit of revision.

25
00:02:07,200 --> 00:02:14,880
I want you to use pgadmin and the CSV file that you just downloaded to create a new table in the database

26
00:02:14,880 --> 00:02:18,900
that we already created previously, which was called world.

27
00:02:18,900 --> 00:02:26,760
And inside that database you're going to create this new table called world Underscore food.

28
00:02:27,210 --> 00:02:32,940
So you're going to have to write some SQL in order to create this table.

29
00:02:33,720 --> 00:02:41,070
And you can take a look at the different specifications and the different columns that we're going to

30
00:02:41,070 --> 00:02:41,390
need.

31
00:02:41,400 --> 00:02:44,640
So we're going to need an ID that is going to be the primary key.

32
00:02:44,670 --> 00:02:50,610
The country which is going to be character varying 45 in terms of data types.

33
00:02:50,610 --> 00:02:56,820
The only one that we haven't seen so far is this one, which we're going to declare as a float.

34
00:02:56,820 --> 00:03:02,550
And this is going to allow us to store numbers with decimal places after them.

35
00:03:02,700 --> 00:03:07,500
Pause the video and see if you can remember how to do this inside Pgadmin.

36
00:03:12,000 --> 00:03:12,360
All right.

37
00:03:12,360 --> 00:03:19,140
So the first thing we're going to do is we're going to open up our query tool and we're going to write

38
00:03:19,170 --> 00:03:20,160
our SQL.

39
00:03:20,160 --> 00:03:22,680
So we're going to say create table.

40
00:03:22,680 --> 00:03:24,960
And then the name of the table.

41
00:03:24,960 --> 00:03:28,350
So we're going to call it world underscore food.

42
00:03:29,040 --> 00:03:31,770
And then we open up a set of parentheses.

43
00:03:31,770 --> 00:03:36,360
And inside here we can create some columns.

44
00:03:36,360 --> 00:03:44,070
So the first one is going to be the ID which is going to be cereal and primary key.

45
00:03:46,500 --> 00:03:54,690
The next one is going to be our country, and this is going to be a Varchar 45.

46
00:03:54,690 --> 00:04:01,020
And that's just presuming that none of our countries are greater than 45 and character length.

47
00:04:01,170 --> 00:04:09,660
And then we've got our rice production, which is going to be a float floating point number, and we've

48
00:04:09,660 --> 00:04:16,019
got our wheat production, which is also going to be a floating point number.

49
00:04:16,019 --> 00:04:22,500
So remember, no comma after the final column, close off the entire command with a semicolon.

50
00:04:22,500 --> 00:04:24,180
And let's hit run.

51
00:04:24,180 --> 00:04:27,780
And hopefully you'll see that query returns successfully.

52
00:04:28,170 --> 00:04:35,460
So now if we refresh our tables we will see our table that is now called world food.

53
00:04:35,460 --> 00:04:41,250
So if we try to view all the rows then we'll see a whole bunch of empty columns.

54
00:04:41,250 --> 00:04:46,050
So now to import some data in we're going to right click on that table.

55
00:04:46,050 --> 00:04:48,090
Click Import Export Data.

56
00:04:48,120 --> 00:04:54,390
Select the location of the CSV that you downloaded just now.

57
00:04:54,420 --> 00:04:56,820
In my case it's in my downloads folder.

58
00:04:56,820 --> 00:05:03,060
And then making sure that you've got import selected and not export, making sure that in the options

59
00:05:03,060 --> 00:05:04,860
you've got the header selected.

60
00:05:05,250 --> 00:05:12,720
One important thing to notice before we hit import is if you open up the World Food CSV inside VS code,

61
00:05:12,720 --> 00:05:19,680
you'll see that there is no column for the ID of each of these records.

62
00:05:19,680 --> 00:05:25,050
Instead, we want Postgres to autogenerate the ID for our primary key.

63
00:05:25,140 --> 00:05:32,790
When you're importing, make sure that in the columns to import, we cross out the ID because that one

64
00:05:32,790 --> 00:05:34,770
we actually cannot import.

65
00:05:34,800 --> 00:05:36,390
We don't have the data for it.

66
00:05:36,390 --> 00:05:39,990
Instead we're relying on Postgres to autogenerate it.

67
00:05:39,990 --> 00:05:41,730
So now click okay.

68
00:05:41,730 --> 00:05:48,690
And that should all be successful if we go ahead and take a look at our data, you'll see that all of

69
00:05:48,690 --> 00:05:55,050
the IDs were automatically generated from 1 to 9 because we set it to serial.

70
00:05:55,170 --> 00:06:03,300
You can see that we've got nine countries in total, and we've got their rice and wheat production imported

71
00:06:03,300 --> 00:06:04,340
into here.

72
00:06:04,350 --> 00:06:11,250
So if you have a play Catan, the board game, then these are all very important pieces of data.

73
00:06:11,880 --> 00:06:18,930
So now that we've added our data into a database and created that new table, we can take a look at

74
00:06:18,930 --> 00:06:27,540
all the different ways that we can work with select to select or query different values from the table.

75
00:06:27,810 --> 00:06:34,860
The first one you've already seen, which is to select everything from a table, and everything in SQL

76
00:06:34,890 --> 00:06:37,980
is represented by an asterisks.

77
00:06:38,160 --> 00:06:42,060
This means select all from a particular.

78
00:06:42,060 --> 00:06:45,450
And then in this case we insert the name of our table.

79
00:06:45,750 --> 00:06:50,460
The goal is to go ahead and select everything from the table.

80
00:06:50,460 --> 00:06:59,850
And if you want to try this out, then you should click on the query tool and write your query in here.

81
00:07:00,180 --> 00:07:06,390
See if you can get hold of all of the rows and columns from our table called World Food.

82
00:07:10,100 --> 00:07:10,490
All right.

83
00:07:10,490 --> 00:07:12,240
So it's pretty easy.

84
00:07:12,260 --> 00:07:15,140
We use the select keyword the asterisks.

85
00:07:15,140 --> 00:07:19,790
And then we say from and then the name of our table.

86
00:07:19,910 --> 00:07:21,230
Now let's hit run.

87
00:07:21,230 --> 00:07:23,760
And we can see all of the rows and columns.

88
00:07:23,780 --> 00:07:25,070
That's pretty easy.

89
00:07:25,820 --> 00:07:30,500
The next one is what if we wanted to select only one column?

90
00:07:30,500 --> 00:07:33,740
We want to isolate a column from the table.

91
00:07:33,740 --> 00:07:38,240
And the reason why you might want to do this is let's say you had a database where you had a table of

92
00:07:38,240 --> 00:07:39,080
customers.

93
00:07:39,080 --> 00:07:44,150
You want to get hold of every customer's phone number, so you can call each and every one of them up

94
00:07:44,150 --> 00:07:45,890
wishing them Merry Christmas.

95
00:07:46,190 --> 00:07:49,910
So then you might want to select the telephone column.

96
00:07:49,910 --> 00:07:50,270
Right.

97
00:07:50,270 --> 00:07:53,360
And the way you do this is you use the select keyword.

98
00:07:53,360 --> 00:07:58,430
And then you insert the name of the column and then the name of your table.

99
00:07:58,610 --> 00:08:05,690
In this exercise, I want you to select the country column from our World Foods table.

100
00:08:05,720 --> 00:08:09,980
Pause the video and see if you can figure out how to get this to work.

101
00:08:12,060 --> 00:08:12,450
All right.

102
00:08:12,450 --> 00:08:14,630
So the code is pretty simple.

103
00:08:14,640 --> 00:08:18,540
We insert the name of the column here and the name of the table here.

104
00:08:18,540 --> 00:08:23,430
And then we end up with only that particular column being pulled up.

105
00:08:23,820 --> 00:08:30,420
Now what if you want to select multi columns all you have to do is separate each of those columns with

106
00:08:30,420 --> 00:08:32,220
a single comma.

107
00:08:32,460 --> 00:08:40,679
Select as the keyword name of a column, name of another column separated by a comma, and then specifying

108
00:08:40,710 --> 00:08:41,640
the table.

109
00:08:41,700 --> 00:08:42,870
Try this out yourself.

110
00:08:42,870 --> 00:08:48,570
In an exercise, select the country column and the wheat production for that country so we can drill

111
00:08:48,570 --> 00:08:53,700
this down and get the data for how much wheat each of these countries produce.

112
00:08:57,240 --> 00:08:57,660
All right.

113
00:08:57,660 --> 00:08:59,640
So this is again relatively simple.

114
00:08:59,640 --> 00:09:01,020
We use the select keyword.

115
00:09:01,020 --> 00:09:07,980
And then we put in country comma wheat underscore production to match the names of the columns.

116
00:09:07,980 --> 00:09:10,050
And then specify the table.

117
00:09:10,050 --> 00:09:15,030
And we end up with all of the data collated as we wished.

118
00:09:15,630 --> 00:09:19,110
What if you wanted to go a little bit deeper?

119
00:09:19,110 --> 00:09:25,850
What if you wanted to provide some conditions to check against before we pull up our data?

120
00:09:25,860 --> 00:09:32,010
So we don't just want all the columns or all of the rows, we actually want to check for a condition.

121
00:09:32,010 --> 00:09:39,840
Well, in this case you're going to need the where keyword where it comes from SQL, and it's used at

122
00:09:39,840 --> 00:09:40,890
the very end.

123
00:09:40,890 --> 00:09:46,560
Usually we'll select a column from a table up to this part.

124
00:09:46,590 --> 00:09:48,150
You're already pretty familiar.

125
00:09:48,300 --> 00:09:55,590
Now the last part is just to filter or to check against a particular condition.

126
00:09:55,680 --> 00:10:02,520
And the easiest condition to check against is the equals, which is represented by an equal sign.

127
00:10:02,550 --> 00:10:16,230
Go ahead and use this formula to try and check for the rice production of the United States.

128
00:10:16,440 --> 00:10:23,310
And if everything goes well, you should get a table with just one single row and one column that tells

129
00:10:23,310 --> 00:10:28,590
you that the rice production is 8.7 million metric tons.

130
00:10:28,860 --> 00:10:29,880
Pause the video.

131
00:10:29,880 --> 00:10:30,810
Give that a go.

132
00:10:35,560 --> 00:10:36,040
All right.

133
00:10:36,040 --> 00:10:38,380
So a couple things to note here.

134
00:10:38,740 --> 00:10:45,130
We need that equal sign in order to specify what to check against.

135
00:10:45,130 --> 00:10:45,700
What.

136
00:10:45,730 --> 00:10:49,690
In this case we're checking a particular column's values.

137
00:10:49,690 --> 00:10:56,260
In this case the country column for a match that equals United States.

138
00:10:56,260 --> 00:11:04,270
And it is included in these single quotes to represent a string in SQL.

139
00:11:04,630 --> 00:11:11,590
And then we tell our SQL what we actually want from that entire row of data.

140
00:11:11,590 --> 00:11:14,020
We only want its rice production.

141
00:11:14,020 --> 00:11:18,400
So we specify rice production in the select part.

142
00:11:18,520 --> 00:11:24,570
And at the end all going well, you end up with a result that pulls up a single value.

143
00:11:24,580 --> 00:11:33,030
And this is useful when you imagine you're using a database that is backing up your web app.

144
00:11:33,040 --> 00:11:37,720
So you wanted to check a user's balance in your app.

145
00:11:37,720 --> 00:11:43,120
Maybe you have a calling application like Skype and you want to know, well, how much credit have they

146
00:11:43,150 --> 00:11:43,720
got?

147
00:11:43,720 --> 00:11:53,500
So then you would need to select the credit from the user payment table, maybe where a username is

148
00:11:53,500 --> 00:11:55,600
equal to a particular value.

149
00:11:55,690 --> 00:12:04,810
This really drills down deep into getting specific values that match a particular criteria similar to

150
00:12:04,810 --> 00:12:05,410
equals.

151
00:12:05,410 --> 00:12:10,420
You can of course use all of the wide array of comparisons.

152
00:12:10,420 --> 00:12:16,690
So lesser than, greater than, greater than or equal, lesser than or equal, greater than or equal.

153
00:12:16,720 --> 00:12:23,080
All of these conditions that you're already familiar with from basic programming are also valid here

154
00:12:23,080 --> 00:12:24,280
in SQL.

155
00:12:24,670 --> 00:12:29,800
Again, the formula looks exactly the same, but the condition is just a little bit different.

156
00:12:29,950 --> 00:12:39,400
In this exercise, I want you to go into that world food table and find me all of the countries.

157
00:12:39,400 --> 00:12:47,200
So we want to list all the countries where their production of wheat is over 20.

158
00:12:47,230 --> 00:12:53,650
Now I'm saying 20 because that's the scale of the numbers that we've stored in our table.

159
00:12:53,650 --> 00:12:57,250
But actually the units are of course million metric tons.

160
00:12:57,250 --> 00:13:07,900
But all you want to check is what is the wheat production and find the ones where that number is greater

161
00:13:07,900 --> 00:13:08,890
than 20.

162
00:13:08,920 --> 00:13:09,970
Pause the video.

163
00:13:10,000 --> 00:13:10,990
Give this a go.

164
00:13:11,020 --> 00:13:18,040
If everything worked out, this is the table that should come up and we'll go through the solution together.

165
00:13:20,680 --> 00:13:21,130
All right.

166
00:13:21,130 --> 00:13:24,250
So first we selected on country.

167
00:13:24,250 --> 00:13:26,170
That's the column we're interested in.

168
00:13:26,200 --> 00:13:28,060
Then we specify the table.

169
00:13:28,060 --> 00:13:34,090
And then in terms of the condition we're looking at wheat production greater than 20.

170
00:13:34,090 --> 00:13:38,830
And we end up with this shortened and refined table.

171
00:13:39,940 --> 00:13:44,560
You can go one step further for a loose match.

172
00:13:44,560 --> 00:13:50,420
Sometimes you might want to match only a specific part of your data.

173
00:13:50,440 --> 00:14:03,070
For example, if we had a country name United States, then this is a valid name for the US, but it

174
00:14:03,070 --> 00:14:08,860
could also be called the United States of America, right?

175
00:14:09,130 --> 00:14:14,950
These are both ways that this particular country could be stored in our database.

176
00:14:14,980 --> 00:14:18,820
Now let's say that we don't actually remember which one we stored.

177
00:14:18,820 --> 00:14:23,770
And we just want to search for the United States.

178
00:14:23,980 --> 00:14:35,680
If it was this case and we used an equal, so we said something like where country equals United States,

179
00:14:35,680 --> 00:14:37,900
then this is going to be a no match.

180
00:14:38,020 --> 00:14:47,470
But we can use fuzzy logic using the like keyword to check whether if a pattern exists in the data.

181
00:14:47,500 --> 00:14:49,060
What do I mean by this?

182
00:14:49,180 --> 00:14:55,780
In SQL, we can use the percentage sign to represent a wild card.

183
00:14:56,260 --> 00:15:05,560
If we were to check for United and then we use a double pipe.

184
00:15:05,560 --> 00:15:06,790
So two straight lines.

185
00:15:06,790 --> 00:15:12,220
If you can't get hold of these characters on your keyboard or you can't find them, then just Google

186
00:15:12,220 --> 00:15:18,850
for the pipe symbol and you can copy and paste it from Google.

187
00:15:19,330 --> 00:15:28,450
If we have to strings united double pipe and then a string that represents the percentage sign, what

188
00:15:28,450 --> 00:15:32,890
the double pipe is going to do is it's going to merge the two of them when it checks it.

189
00:15:32,890 --> 00:15:36,780
So it'll merge it into united percentage.

190
00:15:36,790 --> 00:15:44,290
And this is telling SQL that we want to look for a pattern where it is united.

191
00:15:44,290 --> 00:15:46,000
And then it could be anything.

192
00:15:46,000 --> 00:15:47,440
It could be United States.

193
00:15:47,440 --> 00:15:49,450
It could be United States of America.

194
00:15:49,450 --> 00:15:52,240
It could be United Kingdom in this case.

195
00:15:52,240 --> 00:15:58,240
So just be careful with using these patterns and you have to understand how it works.

196
00:15:58,630 --> 00:16:02,530
What I want you to check is in our table.

197
00:16:02,530 --> 00:16:10,690
Look inside the countries column and find all the countries that start off with a letter U.

198
00:16:10,690 --> 00:16:14,110
That is Ukraine and that is United States.

199
00:16:14,320 --> 00:16:23,530
Pause the video, see if you can apply this pattern into a where like SQL command.

200
00:16:26,550 --> 00:16:27,000
All right.

201
00:16:27,000 --> 00:16:28,400
This is the first time you've seen this.

202
00:16:28,410 --> 00:16:30,000
Don't beat yourself up too much.

203
00:16:30,000 --> 00:16:35,550
If you didn't manage to get it to work, the answer should look something like this.

204
00:16:35,640 --> 00:16:37,230
First part easy.

205
00:16:37,260 --> 00:16:38,720
Similar to before now.

206
00:16:38,730 --> 00:16:47,700
Next part is our condition where the country column is similar to this particular pattern.

207
00:16:47,700 --> 00:16:57,270
And that pattern is you as a string double pipe, which is a merge or a concatenate.

208
00:16:57,270 --> 00:17:03,000
And what we want to merge is the you with the percentage sign.

209
00:17:03,300 --> 00:17:11,550
So now when it checks in our table, it will check for all the countries that have a string that begins

210
00:17:11,550 --> 00:17:14,730
with a U, and then it doesn't really care what happens afterwards.

211
00:17:14,730 --> 00:17:16,740
Ukraine or United States.

212
00:17:17,010 --> 00:17:22,380
If you didn't manage to do it this time, don't worry, I've got another opportunity for you to try

213
00:17:22,380 --> 00:17:25,470
out where like now that you've seen it in action.

214
00:17:25,470 --> 00:17:30,540
Now, in this case, we want to find all the countries that end in A.

215
00:17:31,140 --> 00:17:38,130
The A is in lowercase, and you're going to apply what you learn about where and like to be able to

216
00:17:38,130 --> 00:17:44,400
pull up all the countries from our table that end in a which should look something like this Australia,

217
00:17:44,400 --> 00:17:46,450
China, Ethiopia and India.

218
00:17:46,470 --> 00:17:47,520
Pause the video.

219
00:17:47,520 --> 00:17:48,540
Give this a go.

220
00:17:51,260 --> 00:17:51,650
All right.

221
00:17:51,650 --> 00:17:53,870
Hopefully the second time it's a little bit easier.

222
00:17:53,900 --> 00:17:56,030
The code looks something like this.

223
00:17:56,150 --> 00:18:03,650
The condition is the country is like this particular pattern.

224
00:18:03,650 --> 00:18:08,540
And this pattern has the percentage sign going at the front.

225
00:18:08,540 --> 00:18:15,050
And then the combine operator or the double pipe and then the letter A.

226
00:18:15,050 --> 00:18:21,080
And if you did this then what we end up with is this limited table.

227
00:18:21,710 --> 00:18:28,970
Don't be confused by the double pipe, because in many modern programming languages it means or in this

228
00:18:28,970 --> 00:18:30,980
case it means concatenate.

229
00:18:31,010 --> 00:18:36,620
It means merge these two things together so that they become like this.

230
00:18:36,620 --> 00:18:44,380
And you can, in fact, in this situation, replace this part with just this.

231
00:18:44,390 --> 00:18:51,140
But as you'll see later on, when we start working with code in our back end, we're going to be using

232
00:18:51,170 --> 00:18:53,480
a expression.

233
00:18:53,480 --> 00:18:59,930
So we're going to be evaluating a particular variable or a particular programming expression.

234
00:18:59,930 --> 00:19:03,590
And we want to insert that into the like structure.

235
00:19:03,590 --> 00:19:06,650
You're going to default back into this situation.

236
00:19:06,650 --> 00:19:13,820
So I just wanted you to be aware of how to use the double pipe in SQL to combine two things, or two

237
00:19:13,820 --> 00:19:15,710
strings to concatenate them.

