1
00:00:00,140 --> 00:00:02,490
Now it's time for an exercise.

2
00:00:02,510 --> 00:00:09,710
And this exercise has a starting file in the current lesson which is called 8.3 Travel Tracker dot zip.

3
00:00:09,740 --> 00:00:19,590
Go ahead and unzip it and then use npm install to install all of the required modules.

4
00:00:19,610 --> 00:00:25,910
And what we're going to be building is essentially a website that allows us to track all the countries

5
00:00:25,910 --> 00:00:27,140
that we've been to.

6
00:00:27,260 --> 00:00:33,950
If you want to know how many countries you've been to and which countries they are, you can get these

7
00:00:33,950 --> 00:00:40,220
scratchable world maps that you can put onto your wall where you scratch off each country as you visit

8
00:00:40,220 --> 00:00:40,670
them.

9
00:00:40,670 --> 00:00:44,670
But in our case, we're going to use technology to build this.

10
00:00:44,750 --> 00:00:48,740
This is an app where we can enter a country that we've been to.

11
00:00:48,740 --> 00:00:54,620
And the great thing about this app is it's backed by our powerful Postgres database.

12
00:00:54,650 --> 00:00:59,870
We can enter some data into our database, namely some countries.

13
00:00:59,870 --> 00:01:08,840
And our front end will know which countries those are and display them in this beautiful way of visualizing

14
00:01:08,840 --> 00:01:10,340
all the countries we've been to.

15
00:01:10,430 --> 00:01:13,020
Once you're ready, let's get started.

16
00:01:13,040 --> 00:01:18,860
I want you to head into VS code and again, making sure you've extracted the files, you've installed

17
00:01:18,860 --> 00:01:24,060
all the node modules, and do all of that prep work that we always have to do every single time.

18
00:01:24,080 --> 00:01:32,240
And now if you take a look inside the index.js, you'll see that I've got a very basic backbone of an

19
00:01:32,240 --> 00:01:33,950
express app for you.

20
00:01:34,490 --> 00:01:39,200
Now I'm going to delete that table I already made, and we're going to do it all together, because

21
00:01:39,200 --> 00:01:41,610
this one is a little bit more interesting.

22
00:01:41,630 --> 00:01:47,240
Let's go into our query tool and do our usual create table.

23
00:01:47,360 --> 00:01:49,310
And I want you to follow along with me.

24
00:01:49,310 --> 00:01:53,180
This table is going to be called Visited Countries.

25
00:01:53,420 --> 00:01:56,960
And it's only going to have two columns.

26
00:01:56,960 --> 00:01:58,370
So the first one is simple.

27
00:01:58,370 --> 00:02:02,540
It's ID, it's serial and it's primary key.

28
00:02:02,570 --> 00:02:06,650
Now the second one we have to think a little bit more deeply about.

29
00:02:06,770 --> 00:02:13,400
We're going to create a column called Country Code to represent the code of the countries that we're

30
00:02:13,400 --> 00:02:18,650
going to store in this table, representing the countries that we've already been to.

31
00:02:19,040 --> 00:02:26,360
Firstly, we are going to store it as a char two because it is going to store the two character ISO

32
00:02:26,360 --> 00:02:27,440
country codes.

33
00:02:27,440 --> 00:02:32,210
But more importantly than that, we need to make sure that this field is never empty.

34
00:02:32,240 --> 00:02:38,750
We don't end up adding data into this table that is empty, where we just end up with a primary key

35
00:02:38,750 --> 00:02:40,550
or something like that.

36
00:02:40,550 --> 00:02:46,790
So we need to make sure that it's not null, so it cannot accept null as a input and it will reject

37
00:02:46,790 --> 00:02:47,120
it.

38
00:02:47,150 --> 00:02:51,500
That's quite an important bit of mitigating errors in the future.

39
00:02:52,010 --> 00:02:58,790
The other thing that we want to make sure is that we're only putting in unique values into this field,

40
00:02:58,790 --> 00:03:02,960
because we don't want to log a country that we've been to twice.

41
00:03:02,990 --> 00:03:09,410
It will just add to the number of countries we've been to erroneously if we start double counting.

42
00:03:09,410 --> 00:03:12,710
So we want to make sure that our data is sanitized.

43
00:03:12,710 --> 00:03:19,430
And these two are some of the most common modifiers to your Postgres database columns that you will

44
00:03:19,430 --> 00:03:19,920
see.

45
00:03:19,940 --> 00:03:22,190
So not null and unique.

46
00:03:22,190 --> 00:03:27,230
And now that we've added that, we can go ahead and hit run to create this table.

47
00:03:27,380 --> 00:03:34,160
Now that we've created the table, we're actually going to manually add some data into this table.

48
00:03:34,190 --> 00:03:40,150
In the next lesson, I'm going to show you how we're going to do this from our Node Express backend.

49
00:03:40,160 --> 00:03:46,400
But for now, because we want to do the first part of the application where we just display the countries

50
00:03:46,400 --> 00:03:51,200
we've been to, we're going to get started by adding some data manually using Pgadmin.

51
00:03:51,230 --> 00:03:56,700
To do that, you click on this button to add a row, and the first field we're going to leave empty.

52
00:03:56,720 --> 00:04:00,290
We're going to let it use the default value.

53
00:04:00,290 --> 00:04:06,680
And the second value is something that we have to add in because we said it should be not null.

54
00:04:06,680 --> 00:04:13,190
And you can see in gray what Pgadmin is trying to show you is what will be added as data.

55
00:04:13,190 --> 00:04:18,500
If you don't do anything, if you don't change any of these fields, and if you try and hit save using

56
00:04:18,500 --> 00:04:21,620
this button, you'll see that it's not going to accept it.

57
00:04:21,620 --> 00:04:26,000
And that's because country code does not accept null as a value.

58
00:04:26,000 --> 00:04:27,830
So we have to put something in here.

59
00:04:27,830 --> 00:04:30,080
So let's put in a country code.

60
00:04:30,110 --> 00:04:32,960
For example let's put in fr.

61
00:04:33,200 --> 00:04:35,660
Double click on that field and put in fr.

62
00:04:35,840 --> 00:04:39,170
Fr is the two country code for France.

63
00:04:39,170 --> 00:04:42,620
And go ahead and hit okay.

64
00:04:42,620 --> 00:04:50,420
If you want to refer to the full table of two letter codes, you can go into your database and view

65
00:04:50,420 --> 00:04:51,440
it right here.

66
00:04:51,620 --> 00:04:55,460
You can scroll through this list of countries.

67
00:04:55,460 --> 00:04:59,690
And you can find one or 2 or 3 countries that you've been to.

68
00:05:00,070 --> 00:05:03,100
And just write down their country codes.

69
00:05:03,820 --> 00:05:13,810
For example, I'm going to add fr for France, which I have been to, and GB for the UK, which is where

70
00:05:13,810 --> 00:05:14,530
I live.

71
00:05:14,770 --> 00:05:20,110
And finally I'm going to put in US for the United States of America.

72
00:05:20,200 --> 00:05:28,160
Those are the three pieces of data I'm going to add to my visited countries database manually.

73
00:05:28,180 --> 00:05:34,060
And you'll notice when I refresh this, the data that I added previously is gone.

74
00:05:34,060 --> 00:05:38,270
Because unless you press the save button, it's not going to be persisted.

75
00:05:38,290 --> 00:05:39,550
So let's do that again.

76
00:05:39,550 --> 00:05:45,250
Let's add fr and let's go ahead and add another one which is GB.

77
00:05:46,210 --> 00:05:49,390
And finally I'm going to add us.

78
00:05:50,140 --> 00:05:50,530
All right.

79
00:05:50,530 --> 00:05:52,060
So I've got my three rows of data.

80
00:05:52,060 --> 00:05:54,630
And I'm going to click on the save data changes.

81
00:05:54,640 --> 00:05:58,060
So now that is added to my database.

82
00:05:58,060 --> 00:06:04,960
And you can see that the IDs get automatically generated because the IDs have to be unique.

83
00:06:04,960 --> 00:06:09,940
So if there was any previous data, for example, when I created my first piece of data that was null,

84
00:06:09,940 --> 00:06:14,950
that got rejected, it already hogged the first ID placeholder.

85
00:06:14,950 --> 00:06:18,220
So it doesn't really matter as long as the ID is unique.

86
00:06:18,220 --> 00:06:25,330
And this is a really important way that the primary key ensures that each record has its own unique

87
00:06:25,360 --> 00:06:25,660
ID.

88
00:06:25,930 --> 00:06:30,190
Now that I've created my table manually and hopefully you have done too.

89
00:06:30,220 --> 00:06:39,040
We've now got some data in this visited countries table and we can now use it inside our application.

90
00:06:39,160 --> 00:06:46,900
Now is kind of the challenging part of this whole exercise taking what's inside index.js.

91
00:06:46,930 --> 00:06:56,260
I want you to be able to make this application display the countries that you just added, and you can

92
00:06:56,260 --> 00:07:02,860
check how this should work by firstly, of course, making sure that you've installed all the node modules,

93
00:07:02,860 --> 00:07:09,460
but then next using Nodemon to run the solution one dot js.

94
00:07:10,330 --> 00:07:16,570
So now if we go over to localhost 3000, you should see the countries that I added just now manually

95
00:07:16,570 --> 00:07:18,190
show up on our map.

96
00:07:18,190 --> 00:07:22,420
This is the US, the UK and France showing up here.

97
00:07:22,750 --> 00:07:25,690
In your case it should do the same.

98
00:07:25,690 --> 00:07:28,420
Now you're going to think through how to do this.

99
00:07:28,450 --> 00:07:37,330
And the first thing to look through is of course the index.js to see how the data in here is structured.

100
00:07:37,330 --> 00:07:43,090
So you can collapse this section that says AG Canvas, because that's our entire world map, and it

101
00:07:43,090 --> 00:07:46,540
is massive, and it's going to make it hard for you to scroll around in the code.

102
00:07:46,660 --> 00:07:52,780
Ignoring that, you can see that I've got some code already written for you inside the script tag.

103
00:07:52,900 --> 00:08:00,610
The first thing we do is we get hold of a value in ejs called countries, which is going to be an array

104
00:08:00,610 --> 00:08:02,560
of country codes.

105
00:08:02,560 --> 00:08:06,550
And then we split each of the country codes by a comma.

106
00:08:06,580 --> 00:08:09,970
This way we can get hold of each of the country codes.

107
00:08:09,970 --> 00:08:17,500
And this line of code basically creates an array inside this script that looks something like this.

108
00:08:17,500 --> 00:08:27,370
So become FR and then GB and then us like so.

109
00:08:27,370 --> 00:08:33,610
And once we've gotten hold of that we can loop through it using the for each.

110
00:08:33,610 --> 00:08:42,640
And then this line of code gets hold of the element by ID with the code for each of the codes in this

111
00:08:42,640 --> 00:08:46,150
array, and gives it a fill of teal color.

112
00:08:46,390 --> 00:08:55,870
If we expand this world map, you can see each of the countries have their own unique ID, and the path

113
00:08:55,870 --> 00:09:04,030
is an SVG, which is just a shape defined in a particular format to represent the shape on the page.

114
00:09:04,060 --> 00:09:11,020
Essentially, this entire world map is made up of every single country drawn on the screen, and we

115
00:09:11,020 --> 00:09:18,040
can identify them by their ISO country codes, and we can change the background color of each of those

116
00:09:18,040 --> 00:09:20,620
pieces by using this line of code.

117
00:09:20,620 --> 00:09:24,580
Now a couple of things to note, which is here.

118
00:09:24,580 --> 00:09:26,730
Why are we doing this?

119
00:09:26,740 --> 00:09:30,850
Why are we splitting the countries that we get hold of.

120
00:09:30,880 --> 00:09:32,880
Because we're already getting hold of an array.

121
00:09:32,890 --> 00:09:34,570
Why do we need to do this?

122
00:09:34,570 --> 00:09:39,190
Well, the key is the console log that I've included in here.

123
00:09:39,190 --> 00:09:44,140
And you can run a type of the country codes that you generate from this.

124
00:09:44,140 --> 00:09:49,480
But you can also do a type of the countries that gets passed in here.

125
00:09:51,210 --> 00:09:52,410
Like this.

126
00:09:52,410 --> 00:10:01,890
And what you'll find is that when Ejs does templating, it's inserting a template string.

127
00:10:01,890 --> 00:10:11,100
So you're getting a string here and not a JavaScript code or JavaScript array as we would expect.

128
00:10:11,100 --> 00:10:13,560
So we're treating it as a string.

129
00:10:13,560 --> 00:10:20,970
And there is a string method called split, which allows us to split each of the items by the comma.

130
00:10:20,970 --> 00:10:26,040
And we know that arrays are formatted using commas.

131
00:10:26,040 --> 00:10:33,150
And then we can end up with our array in JavaScript again so we can recreate it essentially.

132
00:10:33,780 --> 00:10:37,290
Have a think about this part which might trip you up.

133
00:10:37,290 --> 00:10:43,770
And the other thing I want you to think about is think about logging what you're getting back from Postgres.

134
00:10:43,890 --> 00:10:52,590
This challenge is, I have to admit, quite difficult, but we're kind of at the last pages now of the

135
00:10:52,590 --> 00:10:53,010
course.

136
00:10:53,010 --> 00:11:00,150
And hopefully you've realized that a lot of programming is just about persevering through difficulties.

137
00:11:00,150 --> 00:11:06,000
And the harder the challenge, the more reward you'll feel at the end.

138
00:11:06,000 --> 00:11:07,740
I'm just giving you a little bit of heads up.

139
00:11:07,770 --> 00:11:13,920
You might have to spend a little bit of time thinking about this and being stuck, but it is normal.

140
00:11:13,920 --> 00:11:16,350
And ask any programmer.

141
00:11:16,380 --> 00:11:26,010
This is an entirely necessary and if not essential, part of our growth as software developers.

142
00:11:26,190 --> 00:11:27,660
Be patient with yourself.

143
00:11:27,660 --> 00:11:29,520
Don't beat yourself up too hard.

144
00:11:29,520 --> 00:11:38,940
Everyone trips up and see if you can figure out how to write the code in the index.js, so that it's

145
00:11:38,940 --> 00:11:46,290
able to pull up the country codes from your visited countries table, and then pass that data over to

146
00:11:46,290 --> 00:11:56,340
the index.js and render each of the identified country codes to change its fill color.

147
00:11:56,730 --> 00:12:02,460
Now, if you haven't worked with Postgres for a little while or you're just coming back to this lesson,

148
00:12:02,460 --> 00:12:08,610
this is just a quick slide reminding you of how to get set up using Postgres in your node back end,

149
00:12:08,610 --> 00:12:13,530
so you can pause on this video while you work on the exercise, or completely ignore it.

150
00:12:13,530 --> 00:12:18,840
If you want to do everything from scratch yourself, pause the video and give that a go.

151
00:12:21,640 --> 00:12:22,060
All right.

152
00:12:22,060 --> 00:12:26,800
My wish is that you've tried and failed and tried again and failed again.

153
00:12:26,800 --> 00:12:33,550
And at the end you managed to get it to work, or at least get it to partially work through logging

154
00:12:33,550 --> 00:12:37,330
and making sure that you've got some parts of what you're trying to achieve.

155
00:12:37,480 --> 00:12:42,700
So now we're going to walk through the solution together, and we're going to go through it step by

156
00:12:42,700 --> 00:12:43,330
step.

157
00:12:43,570 --> 00:12:51,700
The first part of working with Postgres is importing the Postgres module, which should be already installed

158
00:12:51,700 --> 00:12:56,420
in your node modules, because I had included it in the starting file.

159
00:12:56,440 --> 00:13:05,020
If you are working with a project from scratch, then all you have to do is to run npm I and then the

160
00:13:05,020 --> 00:13:16,300
module is called pg and all you have to do is to write mpm, I pg and you would install that module.

161
00:13:16,750 --> 00:13:22,450
Once we've done that, then we're going to set up the configuration for our database.

162
00:13:22,480 --> 00:13:24,550
This is code that we've used before.

163
00:13:24,580 --> 00:13:31,630
You can either copy it from a previous project that you got, or look up the documentation on npm to

164
00:13:31,630 --> 00:13:33,130
see how this would work.

165
00:13:33,160 --> 00:13:37,390
I recommend just copying your previous code and just doing a sense check.

166
00:13:37,420 --> 00:13:39,190
That's probably the easiest way.

167
00:13:39,220 --> 00:13:44,920
So in my case, the username I use to access that particular database is Postgres.

168
00:13:44,950 --> 00:13:52,210
The host is localhost and it's running on port 5432 which is the standard Postgres port.

169
00:13:52,270 --> 00:13:57,370
The database name that I have is world, and it should be the same for you.

170
00:13:57,370 --> 00:14:02,620
And the password that I've set to access this database is just 123456.

171
00:14:02,650 --> 00:14:04,330
Yours might be different.

172
00:14:04,960 --> 00:14:12,220
Once we've configured our database, then all we have to do is run Dbconnect in order to establish an

173
00:14:12,220 --> 00:14:14,530
active connection with our database.

174
00:14:14,680 --> 00:14:18,220
The next stage is to create an App.get.

175
00:14:18,250 --> 00:14:25,000
And this is going to give us access to the homepage when we go to localhost 3000.

176
00:14:25,210 --> 00:14:29,530
Now here what you have is a query.

177
00:14:29,530 --> 00:14:36,040
And what we need to first establish is to query our database for the countries that we visited.

178
00:14:36,160 --> 00:14:39,400
We're going to run db dot query.

179
00:14:39,400 --> 00:14:47,230
And then we can insert the SQL query that is going to get us that entire column.

180
00:14:47,230 --> 00:14:51,290
So remember how we use the select column from table.

181
00:14:51,310 --> 00:14:54,370
Well this is essentially that it select column.

182
00:14:54,370 --> 00:15:00,490
We insert the name of the column we want and then the name of the table we want just like this.

183
00:15:00,790 --> 00:15:09,760
And then once we get hold of the result it's a good idea to console log result rows just so you can

184
00:15:09,760 --> 00:15:13,270
see what the structure of the data looks like.

185
00:15:13,420 --> 00:15:16,270
And it actually looks like this.

186
00:15:16,300 --> 00:15:26,440
It's an array with lots of different JavaScript objects, each object has a key which is set as the

187
00:15:26,440 --> 00:15:38,170
country code, and then it has a value, which is the code that actually exists in the record, because

188
00:15:38,170 --> 00:15:42,340
we have lots of these values in the array.

189
00:15:42,370 --> 00:15:50,650
Then in order to get hold of each of these values, what we need to do is to run a for each.

190
00:15:50,980 --> 00:15:58,930
I created a empty array called countries, and I loop through each of the rows in our results.

191
00:15:58,930 --> 00:16:07,600
And for each of the countries or each of the records in there, I'm accessing the dot country code.

192
00:16:07,630 --> 00:16:14,500
Remember, if we type in dot and then the key, we get hold of the value which is what we want.

193
00:16:14,500 --> 00:16:19,070
And then we push each of these values into this empty array.

194
00:16:19,090 --> 00:16:27,370
So then at this point if you console log countries should look like this.

195
00:16:27,400 --> 00:16:32,310
It's an array of the various country codes.

196
00:16:32,320 --> 00:16:38,230
In my case it will be GB, fr and then finally us.

197
00:16:39,040 --> 00:16:39,940
Like this.

198
00:16:39,940 --> 00:16:43,750
I'm not sure that's the right order, but this is essentially the structure of our data.

199
00:16:43,750 --> 00:16:48,280
And then we send this over to our index.js.

200
00:16:48,280 --> 00:16:51,520
And we also send over the countries dot length.

201
00:16:51,520 --> 00:16:58,570
So count how many values we have in there so that we can use it in our index.js.

202
00:16:58,600 --> 00:17:01,930
And then finally we close our connection to the database.

203
00:17:02,080 --> 00:17:10,569
Now let's take a look inside the index.js, and you'll see that we take the countries that gets passed

204
00:17:10,569 --> 00:17:18,310
over, and we go ahead and split the string by the comma.

205
00:17:18,310 --> 00:17:20,859
So we had fr com.

206
00:17:21,329 --> 00:17:24,180
A US comma GB.

207
00:17:24,329 --> 00:17:28,890
Again, I've got a different order, but this part doesn't matter for us.

208
00:17:29,280 --> 00:17:38,100
We split the string by the comma, and this method basically creates a new array in JavaScript called

209
00:17:38,100 --> 00:17:39,150
country codes.

210
00:17:39,180 --> 00:17:41,370
Now we can loop through country codes.

211
00:17:41,370 --> 00:17:45,630
And for each of the codes we try to grab hold of the element that has that ID.

212
00:17:45,900 --> 00:17:49,380
And we change its fill to a different color.

213
00:17:49,890 --> 00:17:59,130
And also that other value that we sent over the total gets added into this H2 and displayed on screen.

214
00:17:59,370 --> 00:18:04,860
That is the whole process of how we end up with this website.

215
00:18:05,340 --> 00:18:13,680
Remember, none of these things here work yet because we don't have any ways of catching the post request,

216
00:18:13,680 --> 00:18:21,510
which we're going to do in the next lesson, but have a review of the code inside solution one and check

217
00:18:21,540 --> 00:18:26,220
against your own code to figure out if there's anything you need to figure out, if there's anything

218
00:18:26,220 --> 00:18:32,580
you need to fix, or if you have done it in a completely different way and it still works, then kudos

219
00:18:32,580 --> 00:18:33,050
to you.

220
00:18:33,060 --> 00:18:38,070
It doesn't have to look the same as my code as long as it works.

221
00:18:38,070 --> 00:18:40,800
That's kind of all I care about at this stage.

222
00:18:40,800 --> 00:18:46,740
There's multiple ways of achieving the same thing, but once you're done, head over to the next lesson

223
00:18:46,740 --> 00:18:49,530
and we're going to continue building on this app.

