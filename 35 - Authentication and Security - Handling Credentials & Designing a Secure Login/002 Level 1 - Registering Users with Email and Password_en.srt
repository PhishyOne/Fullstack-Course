1
00:00:00,830 --> 00:00:07,310
Hey guys, in this lesson we're going to be introducing you to Level 1 Authentication.

2
00:00:07,310 --> 00:00:15,740
And we're going to be seeing how we can allow users to register and log in to our website by allowing

3
00:00:15,740 --> 00:00:18,620
them to enter an Email and Password.

4
00:00:18,860 --> 00:00:26,360
This is the most basic way of authenticating a user on our website, and it is also the least secure.

5
00:00:26,360 --> 00:00:29,420
But we've got to start somewhere, so that's what we're doing.

6
00:00:30,020 --> 00:00:36,860
If you take a look inside the course resources for this lesson, you will see a zipped file that you can

7
00:00:36,860 --> 00:00:40,130
download and extract as usual.

8
00:00:40,130 --> 00:00:45,800
And once you've extracted it, you should be able to open it inside VS Code,

9
00:00:45,800 --> 00:00:50,480
and it's called 9.1 Authentication Lv.1.

10
00:00:50,960 --> 00:00:58,340
I want you to take a look inside this folder and see that I've already created a package.json, including

11
00:00:58,340 --> 00:01:02,360
all the pre required node NPM packages.

12
00:01:02,360 --> 00:01:07,370
And inside the index.js is going to be our starting file.

13
00:01:07,880 --> 00:01:14,390
As usual, we're going to start by CD'ing into this particular project folder.

14
00:01:14,390 --> 00:01:21,320
And once we're here we're going to run npm i in order to install all of the required packages,

15
00:01:21,320 --> 00:01:22,730
and there's not that many,

16
00:01:22,730 --> 00:01:28,910
it's just body-parser, EJS, Express and pg for our database.

17
00:01:28,910 --> 00:01:34,490
If any of these are new for you, then it might mean that you have skipped some modules before.

18
00:01:34,490 --> 00:01:42,530
So when we talked about EJS or Node or Database, and it's important to know that I'm going to assume

19
00:01:42,530 --> 00:01:47,120
that you've watched those lessons and you're comfortable with working with Postgres Database,

20
00:01:47,120 --> 00:01:52,790
you're comfortable with working with EJS templating, Node, Express all of that because I want to cover

21
00:01:52,790 --> 00:01:56,510
some new content in these lessons, in this module.

22
00:01:56,510 --> 00:02:02,510
But if you have just skipped straight into this module, just be aware, it's probably not going to

23
00:02:02,510 --> 00:02:03,050
make sense.

24
00:02:03,050 --> 00:02:09,139
And I strongly, strongly advise you to do the entire course from beginning to end, even if you do

25
00:02:09,139 --> 00:02:13,700
it at 2X speed and just complete all of the exercises and projects,

26
00:02:13,700 --> 00:02:19,430
that way, at least you'll know that you're on the same level as everybody else starting this lesson.

27
00:02:20,150 --> 00:02:27,290
So once we've run our npm install, then the next step is to go ahead and start up our server.

28
00:02:27,290 --> 00:02:32,930
So I'm going to use Nodemon and go into our index.js.

29
00:02:32,930 --> 00:02:40,430
And once our server is up and running on port 3000 I'm going to go over to localhost:3000,

30
00:02:40,430 --> 00:02:42,740
and here you will see our website.

31
00:02:43,400 --> 00:02:51,050
The website is a pretty simple bootstrapped website where we have just two buttons on the home page.

32
00:02:51,050 --> 00:02:52,310
So this is the home page.

33
00:02:52,310 --> 00:03:00,410
We have a Login button that takes us to a Login page, and we have a Register button that takes us to

34
00:03:00,410 --> 00:03:02,750
a very similar looking Register page.

35
00:03:02,750 --> 00:03:07,760
So I've tried to keep everything else super simple, just so that we can focus on the most important

36
00:03:07,760 --> 00:03:08,510
things.

37
00:03:08,660 --> 00:03:13,730
Now, if you look inside the views folder, you'll see that we've got our partials, we've got our home

38
00:03:13,730 --> 00:03:15,170
page, login, register,

39
00:03:15,170 --> 00:03:19,490
but there's also another page called secrets.ejs.

40
00:03:19,490 --> 00:03:21,800
And this page is super simple,

41
00:03:21,800 --> 00:03:24,590
it looks pretty much the same as the other pages,

42
00:03:24,590 --> 00:03:33,770
it's just got an h1 and a paragraph element that has some sort of secret that the user can only access

43
00:03:33,770 --> 00:03:37,820
once they have authenticated themselves on our website.

44
00:03:37,820 --> 00:03:45,290
This is the page that we're trying to prevent unauthorized access to, and we're going to render it

45
00:03:45,290 --> 00:03:49,220
only when the user has registered and logged in.

46
00:03:49,490 --> 00:03:54,230
You'll notice in the index.js, I've already included the bare bones of this website.

47
00:03:54,230 --> 00:03:57,560
So you should be able to simply just get it up and running.

48
00:03:57,560 --> 00:04:06,110
But if you take a look at the routes, you'll see that the GET routes don't need any work on our part.

49
00:04:06,110 --> 00:04:07,880
And it's also super simple,

50
00:04:07,880 --> 00:04:11,120
just render home page, render login, render register,

51
00:04:11,120 --> 00:04:17,630
but in the POST routes, these are the two routes that we're going to be working on in this lesson

52
00:04:17,630 --> 00:04:25,340
in order to allow the user to POST a request to our server to register themselves and post to our server

53
00:04:25,340 --> 00:04:26,630
to log in

54
00:04:26,630 --> 00:04:34,310
once they've done that. If you look inside the register or the login page, they're actually exactly

55
00:04:34,310 --> 00:04:35,270
the same

56
00:04:35,270 --> 00:04:40,910
with respect to this, you'll see that this is the section that makes the POST request.

57
00:04:40,910 --> 00:04:42,080
This is our form.

58
00:04:42,140 --> 00:04:44,540
Notice the action of the form.

59
00:04:44,540 --> 00:04:47,330
So this is the route that it's going to hit up in our server.

60
00:04:47,330 --> 00:04:49,700
Notice that it's got a method of POST,

61
00:04:49,700 --> 00:04:52,370
so it's going to be submitting the data from the form.

62
00:04:52,370 --> 00:04:54,290
And that there are two inputs.

63
00:04:54,290 --> 00:04:59,330
One has a name of username and the other one has a name of password.

64
00:04:59,330 --> 00:05:05,210
So those are the things that we're going to have to target when we use our body-parser to grab hold

65
00:05:05,210 --> 00:05:07,790
of the text that the user enters.

66
00:05:07,790 --> 00:05:11,960
Now if you scroll down, you'll see some commented out code in here,

67
00:05:11,960 --> 00:05:12,950
don't worry about that,

68
00:05:12,950 --> 00:05:18,770
we're going to deal with this in another lesson, and we're going to try and keep this simple for now.

69
00:05:18,770 --> 00:05:26,810
So leave all the code inside the views folder as it is, but just be aware of what the name is for each

70
00:05:26,810 --> 00:05:31,640
of these fields so that you know how to get hold of it in the app.post().

71
00:05:32,870 --> 00:05:40,280
Okay, so first challenge is to go into the app.post() under the register, and the login routes,

72
00:05:40,280 --> 00:05:49,100
and I want you to be able to console.log() whatever the user enters into the username field and the

73
00:05:49,100 --> 00:05:50,750
password field.

74
00:05:51,440 --> 00:05:57,170
Make sure that these lines of code work both in the register and the login routes.

75
00:05:57,170 --> 00:06:02,600
So to do this, you're going to have to review what you learned previously regarding body-parser.

76
00:06:02,600 --> 00:06:07,730
Now notice I've already included the app.use() for our body-parser middleware

77
00:06:07,730 --> 00:06:11,270
and of course, as you might remember, Express already includes that,

78
00:06:11,270 --> 00:06:16,670
so if you wanted to use the Express version of urlencoded, feel free to change this code,

79
00:06:16,670 --> 00:06:22,520
but I recommend just to keep everything as it is and look inside the register.ejs

80
00:06:22,820 --> 00:06:27,140
and secrets.ejs to figure out how you can console.log()

81
00:06:27,140 --> 00:06:32,330
the username and password both on the login screen.

82
00:06:32,330 --> 00:06:41,930
So if I was to click login, I should be able to see that console.log() down here instead of an error.

83
00:06:41,930 --> 00:06:44,060
So at the moment it's obviously undefined.

84
00:06:44,060 --> 00:06:46,250
But you're going to fix that very shortly.

85
00:06:46,250 --> 00:06:48,560
So pause the video and give that a go.

86
00:06:52,060 --> 00:06:54,910
All right, so this shouldn't be too hard.

87
00:06:54,940 --> 00:07:00,220
All we need to do is to create a const, which in this case I've decided to call username,

88
00:07:00,220 --> 00:07:03,880
and we're going to tap into it from req.body,

89
00:07:03,880 --> 00:07:08,620
and then the final variable name depends on how it is

90
00:07:08,620 --> 00:07:10,000
we named it here,

91
00:07:10,000 --> 00:07:15,910
and notice both in register.ejs as well as login.ejs,

92
00:07:15,940 --> 00:07:19,240
they're called username and password.

93
00:07:19,240 --> 00:07:23,080
So that means we can say req.body.username.

94
00:07:27,740 --> 00:07:32,270
And do the same for request.body.password.

95
00:07:32,870 --> 00:07:39,410
And I can simply copy and paste these two lines into our login.

96
00:07:39,410 --> 00:07:46,430
And now if we go ahead and open up the terminal down here, you should be able to see if I go back to

97
00:07:46,430 --> 00:07:47,690
this website.

98
00:07:47,690 --> 00:07:50,930
Go back to the login page, click the login.

99
00:07:50,930 --> 00:07:54,860
I've already got my values prefilled, but feel free to type yours in.

100
00:07:54,860 --> 00:08:03,500
If we go down here, you can see we've got the username and password printed out and it should work

101
00:08:03,500 --> 00:08:08,990
exactly the same way for Register and you'll see that printed out as well.

102
00:08:08,990 --> 00:08:12,290
You'll see that my password is pretty simple 123456,

103
00:08:12,290 --> 00:08:15,350
and I've got the email here as well.

104
00:08:15,350 --> 00:08:19,670
So if you managed to complete that, go ahead and delete all the console.logs,

105
00:08:19,670 --> 00:08:23,720
and we're going to rename this from username to email.

106
00:08:23,720 --> 00:08:28,250
Now notice not this part because this comes from the form just this part.

107
00:08:28,250 --> 00:08:34,909
And this is helpful so that we actually can mentally differentiate which part is from the EJS form

108
00:08:34,909 --> 00:08:39,860
and which part is going to be used in our POST request.

109
00:08:39,860 --> 00:08:42,080
So we've got the user's email and password.

110
00:08:42,080 --> 00:08:46,670
The next step is simply adding that into our database when they register.

111
00:08:46,670 --> 00:08:51,620
So we're going to add the user into a new Database called users.

112
00:08:51,620 --> 00:08:56,630
I'm going to save their email and password so that when they come back and try to log in, we're going

113
00:08:56,630 --> 00:09:00,770
to check the password against the user with a particular email,

114
00:09:00,770 --> 00:09:08,570
and that's basically the logic of how we can verify a user in the most simple way using our Postgres

115
00:09:08,570 --> 00:09:11,450
database and our Node backend.

116
00:09:12,110 --> 00:09:18,080
If at this point you feel like giving yourself a challenge because you do in fact have all the skills

117
00:09:18,080 --> 00:09:24,290
already from our Database Section to be able to implement this, then go ahead, pause the video and

118
00:09:24,290 --> 00:09:25,580
try and do it yourself.

119
00:09:25,580 --> 00:09:26,840
Don't worry if it doesn't work.

120
00:09:26,840 --> 00:09:27,860
Don't worry if you get stuck.

121
00:09:27,860 --> 00:09:29,240
You can always come back.

122
00:09:29,240 --> 00:09:32,690
I'm always going to be here to run through the code with you,

123
00:09:32,690 --> 00:09:37,460
but just as an added challenge, it might be good to try it as a starting point.

124
00:09:38,330 --> 00:09:43,700
The rest of you who are following along with me the first thing, as you can imagine that we need to

125
00:09:43,700 --> 00:09:45,890
do is to set up our database.

126
00:09:45,950 --> 00:09:53,570
If you look inside the file called queries.sql, in this folder, you'll see that I've already added

127
00:09:53,570 --> 00:09:58,010
a query in here that allows us to create the table that we need.

128
00:09:58,100 --> 00:10:01,880
It's got a ID as the primary key as usual.

129
00:10:01,880 --> 00:10:07,190
And then we've got our email and password and I've set them as VARCHAR.

130
00:10:07,730 --> 00:10:10,670
Email has some additional modifiers,

131
00:10:10,670 --> 00:10:12,440
it can not be null,

132
00:10:12,440 --> 00:10:17,180
and it has to be unique so that each user has a unique entry.

133
00:10:17,180 --> 00:10:19,730
And I've left the password relatively easy.

134
00:10:19,730 --> 00:10:24,590
Feel free to add any other modifiers you want based on what you've learned in the Database Section,

135
00:10:24,590 --> 00:10:30,290
but otherwise, we're going to copy this query and go into our pgAdmin.

136
00:10:30,290 --> 00:10:33,050
And firstly we're going to create our Database.

137
00:10:33,050 --> 00:10:36,290
So right-click on Databases, create our database,

138
00:10:36,290 --> 00:10:38,300
and I'm going to call it secrets.

139
00:10:38,390 --> 00:10:41,420
And I'm going to go ahead and hit Save.

140
00:10:41,570 --> 00:10:44,570
Now I have my database called secrets.

141
00:10:44,570 --> 00:10:50,990
I'm going to click on the Query Tool to be able to paste in the query that I want to run, which creates

142
00:10:51,020 --> 00:10:57,410
a table called users inside that database with these three simple fields.

143
00:10:57,530 --> 00:11:03,620
Now, let's hit Run and hopefully, you'll have query returned successfully.

144
00:11:03,620 --> 00:11:12,470
So now if we take a look inside that database, inside Schemas, inside Tables, and you go ahead and click

145
00:11:12,470 --> 00:11:16,340
Refresh, you should see that we now have a users table,

146
00:11:16,340 --> 00:11:18,530
and we're going to view all rows

147
00:11:18,530 --> 00:11:22,040
and you'll see that right now we just have an empty header.

148
00:11:22,100 --> 00:11:25,940
This is where we're going to be entering our users details

149
00:11:25,940 --> 00:11:29,780
when they register. We're going to save their email, save their password,

150
00:11:29,780 --> 00:11:32,060
the ID is auto generated,

151
00:11:32,060 --> 00:11:35,990
and we'll be able to use it later on when we need to check them when they log in.

152
00:11:36,650 --> 00:11:42,170
Coming back to our index.js, the first thing we need to do in order to connect to that database that

153
00:11:42,170 --> 00:11:47,060
we just created is to, import pg from "pg".

154
00:11:47,270 --> 00:11:54,290
So that was the module that has already been installed from our package.json.

155
00:11:55,040 --> 00:12:00,110
And this allows us to work with our Postgres database from Node.

156
00:12:00,200 --> 00:12:04,070
And then the next thing we're going to do is we're going to connect to that database.

157
00:12:04,070 --> 00:12:06,830
This is the code that we usually use,

158
00:12:06,830 --> 00:12:10,250
and remember I named my database "secrets"

159
00:12:10,610 --> 00:12:21,050
as you can see right here. I gave my database a starting password of "123456" which was created long ago

160
00:12:21,050 --> 00:12:22,520
when we set up Postgres.

161
00:12:22,640 --> 00:12:24,890
My username is "postgres" and the

162
00:12:25,030 --> 00:12:26,740
host is "localhost".

163
00:12:27,310 --> 00:12:33,250
And again, we've explained all of this to great lengths and in great detail in the Database Section.

164
00:12:33,250 --> 00:12:39,400
So I'm not going to talk about this anymore other than the fact that we are now creating a new database

165
00:12:39,400 --> 00:12:46,870
connection and then we connect to it, and once we have done that, then we are ready to start registering

166
00:12:46,870 --> 00:12:48,160
some users.

167
00:12:48,160 --> 00:12:52,960
We know that we can get hold of their email and their password through these two constants,

168
00:12:52,960 --> 00:13:01,990
can you figure out how to insert the email and password into our users' table using a PostgreSQL query?

169
00:13:01,990 --> 00:13:08,170
And once that's done, then go ahead and res.render the secrets.ejs.

170
00:13:08,200 --> 00:13:10,180
Pause the video and give that a go.

171
00:13:11,990 --> 00:13:12,440
All right.

172
00:13:12,440 --> 00:13:15,380
So this is what the code should look like.

173
00:13:15,380 --> 00:13:23,450
We are making a database query which has this particular SQL code, we're inserting into our table called

174
00:13:23,450 --> 00:13:24,230
users,

175
00:13:24,230 --> 00:13:30,140
and the values that we're inserting is email and password which corresponds to the values, $1, $2

176
00:13:30,140 --> 00:13:33,800
which is inserted here as an array.

177
00:13:33,950 --> 00:13:40,460
You can go ahead and console.log() the result to see if it was successful or what happens,

178
00:13:40,460 --> 00:13:47,660
but in most cases, it should work and we should be able to simply go ahead and res.render our secrets.ejs

179
00:13:47,660 --> 00:13:48,770
.

180
00:13:48,830 --> 00:13:52,040
Let's go ahead and try that out for real.

181
00:13:52,040 --> 00:13:57,290
Let's try and register this user, angela@gmail.com with my password,

182
00:13:57,290 --> 00:14:05,360
and you can see that, firstly I get taken to the secret.ejs file showing the secret page,

183
00:14:05,360 --> 00:14:13,520
but also if I go into my pgAdmin and I right-click and View my users, you'll see that I have a new

184
00:14:13,520 --> 00:14:17,900
row of data corresponding to what it is I just inserted.

185
00:14:18,500 --> 00:14:19,010
Now,

186
00:14:19,010 --> 00:14:28,670
there's a bit of a problem here though, because what if we tried to register a user that already exists?

187
00:14:28,670 --> 00:14:34,070
Because right now if I click register, I'm going to get an error

188
00:14:34,070 --> 00:14:44,900
and if I go back to my file, you'll see that the error is because I'm trying to insert a row that has

189
00:14:44,900 --> 00:14:52,430
a duplicate key value, because we have a unique constraint on the email field, which you might remember

190
00:14:52,430 --> 00:14:56,480
from this line here has to be not null and it has to be unique.

191
00:14:56,480 --> 00:15:05,390
So by trying to insert the same email in a different record in that table, I end up tripping this.

192
00:15:05,390 --> 00:15:08,150
And this is quite an important one for us to trip.

193
00:15:08,150 --> 00:15:10,490
It's not wrong that that happens.

194
00:15:10,490 --> 00:15:13,010
It just means that we need to handle it.

195
00:15:13,370 --> 00:15:15,410
So how do we handle it?

196
00:15:15,410 --> 00:15:20,390
Well, I'm going to wrap this inside an if statement.

197
00:15:20,390 --> 00:15:28,490
So instead of simply just straight up inserting, I'm going to first check to see if I already have

198
00:15:28,490 --> 00:15:31,850
that user in my users table.

199
00:15:31,850 --> 00:15:36,200
So, "SELECT * FROM users WHERE email = $1",

200
00:15:36,200 --> 00:15:40,190
email is of course the one that they entered in the field.

201
00:15:40,190 --> 00:15:47,600
And then if the checkResult.rows .length, if that result comes back with a value, then that means

202
00:15:47,600 --> 00:15:50,060
I already have a user with that email.

203
00:15:50,060 --> 00:15:56,690
So I can simply do something like res.send or render a different page, or create a little pop-up or

204
00:15:56,690 --> 00:16:01,970
a little message, something that I can handle on the front end to tell the user, "Hey, you're already

205
00:16:01,970 --> 00:16:02,660
registered.

206
00:16:02,660 --> 00:16:04,490
Maybe you can try logging in."

207
00:16:04,490 --> 00:16:09,920
An alternative flow that you can consider when you're making a more complex website is you can simply

208
00:16:09,920 --> 00:16:14,930
just log them in yourself using a code by taking their email and password.

209
00:16:14,930 --> 00:16:17,960
But the important thing here is we first check,

210
00:16:17,960 --> 00:16:22,040
and if they already exist, we perform some sort of action.

211
00:16:22,040 --> 00:16:26,000
If they don't exist, then we insert them into our database.

212
00:16:26,000 --> 00:16:33,140
And that unique constraint is quite important so that we don't end up doubling up on users with the

213
00:16:33,140 --> 00:16:37,880
same email, but different passwords because they try to register multiple times.

214
00:16:37,880 --> 00:16:42,140
That is something to be aware of and this code will catch that out.

215
00:16:42,170 --> 00:16:50,090
One final thing I recommend doing is actually wrapping all of the queries inside a try and catch block.

216
00:16:50,090 --> 00:16:56,630
And the reason for this is because whenever we're working with pg, things might not work, we might

217
00:16:56,630 --> 00:17:01,610
not be connected to the database, or we might have lost connection, or the database might be gone,

218
00:17:01,610 --> 00:17:05,300
or it might not be at the right address, or it might not have the right password,

219
00:17:05,300 --> 00:17:08,750
but it's a good idea to try and catch these.

220
00:17:08,750 --> 00:17:14,599
And if there are any errors to either console.log() them or to handle them appropriately.

221
00:17:14,599 --> 00:17:20,270
That concludes the entire section we need to do to register a user.

222
00:17:20,270 --> 00:17:26,450
The next part is figuring out how we can check when a user enters their email and password,

223
00:17:26,450 --> 00:17:28,760
check them against our database.

224
00:17:28,760 --> 00:17:35,570
So find the user with this email, see if they exist, and if they don't exist, then we tell them, "You

225
00:17:35,570 --> 00:17:36,620
haven't registered,"

226
00:17:36,620 --> 00:17:43,250
but if they do exist, then we check their password that they entered here in the form against the one

227
00:17:43,250 --> 00:17:45,530
that we had saved in our database.

228
00:17:45,530 --> 00:17:46,370
They match,

229
00:17:46,370 --> 00:17:51,380
we let them go through to see the secrets page, and if it doesn't match, then we tell them it doesn't

230
00:17:51,380 --> 00:17:51,950
match.

231
00:17:51,950 --> 00:17:58,580
So see if you can use what you've learned about Postgres Databases in previous modules to complete this

232
00:17:58,580 --> 00:17:59,690
functionality.

233
00:17:59,720 --> 00:18:05,540
Thinking about what we talked about in the register route, such as the try catch, such as checking

234
00:18:05,540 --> 00:18:08,960
the result, whether if it exists, etc. So pause the video.

235
00:18:08,960 --> 00:18:09,920
Give this a go.

236
00:18:12,690 --> 00:18:13,170
All right.

237
00:18:13,170 --> 00:18:15,570
So let's run through the solution code.

238
00:18:15,600 --> 00:18:19,230
First thing we do is we wrap everything inside a try catch block,

239
00:18:19,230 --> 00:18:21,960
then we make our database query.

240
00:18:21,960 --> 00:18:27,960
The first query is we're going to select everything from the users table where the email is a match

241
00:18:27,960 --> 00:18:30,570
for the one that was entered in the form.

242
00:18:30,600 --> 00:18:38,310
Now once we get the result back, if there is a result, if the user does in fact exist in our database,

243
00:18:38,310 --> 00:18:43,230
then that means they have previously registered in our database.

244
00:18:43,290 --> 00:18:52,110
So that means that the result.rows[0] should contain all of the data of that user.

245
00:18:52,230 --> 00:18:56,970
And in fact you can actually simply verify this by console logging that.

246
00:18:56,970 --> 00:19:06,870
So if I console.log(result.rows) and hit Save, go to the login route which is where we've got our

247
00:19:06,870 --> 00:19:08,010
console.log(),

248
00:19:08,010 --> 00:19:11,250
try to enter that email and password,

249
00:19:11,250 --> 00:19:15,120
go back over here and check what gets printed out.

250
00:19:15,120 --> 00:19:21,120
You can see that it's an array and there's only one row that matches that criteria,

251
00:19:21,120 --> 00:19:23,460
because of course the emails are unique,

252
00:19:23,460 --> 00:19:31,080
and the first element in that array is the object that contains the ID, the email, and the password

253
00:19:31,080 --> 00:19:32,430
of that user.

254
00:19:32,430 --> 00:19:38,520
So what that means is we can then set the user to result.rows[0]

255
00:19:38,520 --> 00:19:43,350
and that is going to be equivalent to this object right here.

256
00:19:43,350 --> 00:19:50,400
And then we can set the stored password, so the password on our database to user.password.

257
00:19:50,400 --> 00:19:57,720
Finally, all we need to do is check if the password which is the entered password matches the stored

258
00:19:57,720 --> 00:19:58,590
password

259
00:19:58,590 --> 00:20:02,700
and if it does, we're going to res.render(secrets ejs),

260
00:20:02,700 --> 00:20:06,060
otherwise we're going to tell them, "Incorrect password",

261
00:20:06,060 --> 00:20:09,300
or we're going to redirect them back to login

262
00:20:09,300 --> 00:20:13,560
or we're going to give them a flash message, whatever it is you want to do.

263
00:20:13,560 --> 00:20:16,410
But this should be handled separately.

264
00:20:16,410 --> 00:20:23,460
And also this other else statement is here because it catches the cases where result.rows.length

265
00:20:23,460 --> 00:20:29,670
is 0, which means that no user was actually found in our database using this email.

266
00:20:29,670 --> 00:20:35,850
That means that the user is not found, which could mean they're not registered or they registered with

267
00:20:35,850 --> 00:20:36,840
a different email,

268
00:20:36,840 --> 00:20:41,670
but either way, you want to handle that by telling the user what is going on.

269
00:20:42,960 --> 00:20:43,890
There you have it.

270
00:20:43,890 --> 00:20:47,040
We now have a login route and a register route.

271
00:20:47,040 --> 00:20:51,240
We save our user's email and password into our database.

272
00:20:51,240 --> 00:21:00,210
We check their saved password against the password they enter when they try to log in, and if the passwords

273
00:21:00,210 --> 00:21:02,940
match, then we show them the secret page.

274
00:21:03,330 --> 00:21:11,460
This is not bad because it works, but it's also not great because you can see the user's password right

275
00:21:11,460 --> 00:21:14,250
there in plain text in our database.

276
00:21:14,250 --> 00:21:20,010
So that means that if somebody hacks into the database, if somebody manages to get this data, then

277
00:21:20,010 --> 00:21:28,440
every user's password is matched against their email, and this bad person will be able to know that

278
00:21:28,440 --> 00:21:29,310
user's email,

279
00:21:29,310 --> 00:21:33,090
and they might use that email across multiple websites on the internet,

280
00:21:33,090 --> 00:21:35,760
and it could be a really bad thing for them.

281
00:21:35,760 --> 00:21:42,780
So this, while it works and it is the most basic level of authentication, is not enough.

282
00:21:42,780 --> 00:21:49,680
So in the next lesson, we're going to cover the next Level of authentication where we talk about encryption,

283
00:21:49,680 --> 00:21:55,740
salting, hashing, passwords, all of the important things that makes this more secure for our users.

284
00:21:56,400 --> 00:22:00,060
So for all of that and more, I'll see you on the next lesson.

