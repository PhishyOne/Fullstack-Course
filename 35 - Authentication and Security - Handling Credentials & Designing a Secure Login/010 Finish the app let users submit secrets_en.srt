1
00:00:00,230 --> 00:00:05,870
Hey guys, we finally got into the point where we can actually finish off all of the features for our

2
00:00:05,870 --> 00:00:07,700
secrets application.

3
00:00:07,700 --> 00:00:13,370
We've done a lot in terms of building up the authentication levels, making sure that it's secure,

4
00:00:13,400 --> 00:00:19,400
giving users lots of different ways of signing in, and discovering a secret.

5
00:00:19,400 --> 00:00:27,620
Now, this secret at the moment lives in the secrets dot js file, which is just a piece of text at

6
00:00:27,620 --> 00:00:33,740
the moment, and you can see it if you go into the views secrets dot JS.

7
00:00:33,740 --> 00:00:35,990
It's just a paragraph element.

8
00:00:35,990 --> 00:00:37,790
Now we're going to change all of that.

9
00:00:37,790 --> 00:00:46,970
We're going to use JS to insert a users secret, and the user should be able to submit their own secrets.

10
00:00:47,120 --> 00:00:56,660
There is a page called submitting JS, where we can allow users to make a Post request to a route in

11
00:00:56,660 --> 00:01:04,280
our server which is at forward slash submit in order to submit some text that corresponds to their secret.

12
00:01:04,280 --> 00:01:11,780
And that secret then will get displayed here, and we'll keep it in our database in the same user's

13
00:01:11,780 --> 00:01:12,230
table.

14
00:01:12,230 --> 00:01:14,120
Just to keep things simple.

15
00:01:14,120 --> 00:01:20,060
So your job is to complete this as a challenge by yourself.

16
00:01:20,360 --> 00:01:27,830
The first thing that you're going to need to do is to add a new column to the users table, which has

17
00:01:27,830 --> 00:01:33,830
a name of secret, and it's going to hold data of type text.

18
00:01:33,830 --> 00:01:42,920
And once you're done, the user should be able to log in to the website and click to submit a secret.

19
00:01:42,920 --> 00:01:48,890
This brings up the submit dot ejs page and the user can type a secret.

20
00:01:48,890 --> 00:01:49,790
For example.

21
00:01:49,790 --> 00:01:51,260
What are some of my secrets?

22
00:01:51,260 --> 00:01:54,500
Um, I'm scared of clowns, which is a weird one.

23
00:01:54,500 --> 00:01:59,540
But also, despite learning surfing for so many years, I'm still kind of bad at it.

24
00:01:59,540 --> 00:02:00,890
Which is a secret.

25
00:02:00,890 --> 00:02:02,210
Please don't tell anyone.

26
00:02:02,210 --> 00:02:10,340
And once I hit submit, I'm going to save that secret into the database under that user in the same

27
00:02:10,340 --> 00:02:11,930
row as that user.

28
00:02:11,930 --> 00:02:20,030
And then when secrets gets rerendered, that secret gets displayed here instead of the default message.

29
00:02:20,180 --> 00:02:23,360
So that is essentially the functionality that we want.

30
00:02:23,360 --> 00:02:30,410
So you could keep something secret from other people, and you would be able to authenticate yourself

31
00:02:30,410 --> 00:02:32,750
as a user to be able to add it.

32
00:02:32,750 --> 00:02:36,920
And then you need to be authenticated in order to view that secret.

33
00:02:37,820 --> 00:02:41,870
There are a number of things that you need to do to achieve this.

34
00:02:41,870 --> 00:02:45,170
The first to do is of course adding in that column.

35
00:02:45,320 --> 00:02:50,540
And if I update this user's table, refresh it.

36
00:02:50,540 --> 00:02:55,730
You'll see that brand new secret that I added just now going in right there.

37
00:02:56,120 --> 00:03:04,250
And if you go ahead and open up the extracted 9.6 secrets project, and you take a look through the

38
00:03:04,250 --> 00:03:08,540
index.js, you'll see that I've put in some to do's for you.

39
00:03:08,540 --> 00:03:10,490
There's three to do's here.

40
00:03:10,490 --> 00:03:18,470
You need to update the get route for secrets in order to pull in the secret that belongs to the user

41
00:03:18,470 --> 00:03:20,120
if they have one.

42
00:03:20,120 --> 00:03:28,130
And then you need to think about how to create a get route so that we can show people the submit Ejs

43
00:03:28,130 --> 00:03:36,890
page and think about how we should only allow authenticated users to view that, submit a secret page,

44
00:03:36,890 --> 00:03:40,640
and if they're not authenticated, they should be asked to log in.

45
00:03:41,090 --> 00:03:47,870
And then finally, we need to create the post route for submit so that when a user does submit their

46
00:03:47,870 --> 00:03:54,950
secret from here, that secret gets saved in the database and replaces anything that exists there before,

47
00:03:54,950 --> 00:03:59,870
and finally makes sure that all of that process went through smoothly.

48
00:04:00,350 --> 00:04:02,240
Now, a couple of things to note.

49
00:04:02,240 --> 00:04:08,510
If you get confused, the SQL command that's required to update the column is in here.

50
00:04:08,510 --> 00:04:13,100
But of course, given that you've already done the database module, you should already know how to

51
00:04:13,100 --> 00:04:13,460
do that.

52
00:04:13,460 --> 00:04:15,920
And this is a good point to test your knowledge.

53
00:04:15,920 --> 00:04:20,269
And even if you don't remember, I recommend googling before looking at the solution.

54
00:04:20,269 --> 00:04:22,130
See if you can figure it out first.

55
00:04:22,250 --> 00:04:28,790
And the solution code, which we'll run through together, includes all of the to do's that needs to

56
00:04:28,790 --> 00:04:31,370
happen before this code is going to work.

57
00:04:31,370 --> 00:04:38,570
Final reminder in the dot env file, you need to replace your client secret and your client ID with

58
00:04:38,570 --> 00:04:41,360
your own Google client ID and secret.

59
00:04:41,360 --> 00:04:45,410
That way the Google login part will actually work.

60
00:04:45,410 --> 00:04:50,420
So you should have this from the previous lesson and you can simply go and paste it in.

61
00:04:51,400 --> 00:04:58,390
So now I'm going to leave you to it in your own capable hands, to struggle and to figure things out

62
00:04:58,390 --> 00:05:01,150
and see if you can get this to work.

63
00:05:01,150 --> 00:05:04,330
And finally, complete the Secrets Project.

64
00:05:04,690 --> 00:05:09,430
I'll wait here, and once you come back, we'll talk through the solution together.

65
00:05:15,190 --> 00:05:15,580
All right.

66
00:05:15,580 --> 00:05:20,980
So the first thing I'm going to do is to put in my own values for the Google client ID and Google client

67
00:05:20,980 --> 00:05:21,760
secret.

68
00:05:21,910 --> 00:05:26,080
Next I'm going to go into the secrets dot js page.

69
00:05:26,080 --> 00:05:35,170
And I'm going to update it so that instead of having that plain text, I'm replacing it with a JS tag.

70
00:05:35,170 --> 00:05:38,230
So this is the angle bracket percentage equal.

71
00:05:38,230 --> 00:05:42,010
And this is going to be sent in here programmatically.

72
00:05:42,010 --> 00:05:47,740
If you don't know what I'm talking about in terms of JS in terms of partials, then be sure that you

73
00:05:47,740 --> 00:05:50,530
haven't skipped a module on that in the course.

74
00:05:50,530 --> 00:05:56,260
So now that I've done that, I can close that file down and I can focus on the to do's here.

75
00:05:56,260 --> 00:06:03,430
The first thing I'm going to work on is creating a get route so that we can actually display the submit

76
00:06:03,430 --> 00:06:04,150
page.

77
00:06:04,150 --> 00:06:11,170
And this is going to be triggered when the user is on the secrets page and they click on this button,

78
00:06:11,170 --> 00:06:14,380
submit a secret that's going to hit up the submit route.

79
00:06:14,380 --> 00:06:19,090
And this is what it looks like in the browser.

80
00:06:19,090 --> 00:06:22,480
So this is the button we're going to hook up to our server.

81
00:06:22,690 --> 00:06:25,450
So we've got our App.get submit.

82
00:06:25,450 --> 00:06:28,330
And then we're going to add our callback req res.

83
00:06:28,420 --> 00:06:36,520
And then inside here we're going to think about how we're going to prevent an unauthorized user from

84
00:06:36,520 --> 00:06:38,470
seeing the submit page.

85
00:06:38,470 --> 00:06:42,430
So we know that the submit page is under submit JS.

86
00:06:42,430 --> 00:06:46,690
But we should only render this if they are already logged in.

87
00:06:46,690 --> 00:06:56,050
But thankfully, we know from our secrets route that we can simply use the request object to check to

88
00:06:56,050 --> 00:06:57,880
see if the user is authenticated.

89
00:06:57,880 --> 00:07:04,060
Because we're using passport and because we're using sessions and the user detail is saved in those

90
00:07:04,060 --> 00:07:05,770
requests, that gets passed around.

91
00:07:05,770 --> 00:07:11,140
So we can do the same thing and say if request dot is authenticated.

92
00:07:11,140 --> 00:07:16,390
Well, in that case we're going to raise dot render submit dot js.

93
00:07:16,390 --> 00:07:31,420
But otherwise we're going to raise dot redirect and take them back over to the login page like so that

94
00:07:31,420 --> 00:07:33,100
is that to do done.

95
00:07:33,100 --> 00:07:36,100
So I'm going to check that off.

96
00:07:37,060 --> 00:07:42,850
Next I'm going to set up the post route for submit.

97
00:07:42,850 --> 00:07:50,680
Once the user is on this submit page and they type a secret when they hit that submit button, it's

98
00:07:50,680 --> 00:07:59,020
going to hit up our post route in our server because the form action goes to forward slash submit making

99
00:07:59,020 --> 00:08:00,460
the request post.

100
00:08:00,460 --> 00:08:03,220
So we have to write this right here.

101
00:08:03,220 --> 00:08:05,620
And I'm going to write a App.post.

102
00:08:05,620 --> 00:08:08,680
And the route is forward slash submit.

103
00:08:08,680 --> 00:08:13,330
And then we add our request response etc..

104
00:08:13,330 --> 00:08:19,570
And now inside this route we need to handle the submitted data and add it to the database.

105
00:08:19,570 --> 00:08:29,830
We've already got body parser enabled in this, so we can simply set the secret to a const as the request

106
00:08:29,830 --> 00:08:31,210
dot body.

107
00:08:31,210 --> 00:08:36,130
And if we check here for that input, what is the name of that input.

108
00:08:36,130 --> 00:08:37,360
Well it's just called secret.

109
00:08:37,360 --> 00:08:42,940
So request dot body dot secret is going to equal whatever the user types in here.

110
00:08:43,600 --> 00:08:49,090
And then we're going to submit that into our database.

111
00:08:49,750 --> 00:08:55,960
Now how do we know under which user to submit this secret to in the database.

112
00:08:55,960 --> 00:08:58,960
How do we know that it's this user that's logged in.

113
00:08:58,960 --> 00:09:02,260
And we need to put the secret under their record?

114
00:09:02,260 --> 00:09:06,130
Well, remember what I said previously about using passport?

115
00:09:06,130 --> 00:09:13,000
One of the great benefits is we can get access to the user through request dot user.

116
00:09:13,000 --> 00:09:21,580
And this is because when we do our login local strategy or when we do our Google login strategy, in

117
00:09:21,580 --> 00:09:28,870
both cases, we return the user and all of their data in the callback, which gets serialized, and

118
00:09:28,870 --> 00:09:34,120
then deserialized so that we can access them right here under Request.user.

119
00:09:34,120 --> 00:09:38,350
So if you want, you can console, log and see the result of that.

120
00:09:38,710 --> 00:09:45,670
Now I know that I can simply access the Request.user dot email and query it in my database.

121
00:09:45,670 --> 00:09:48,280
So I'm going to do a try catch.

122
00:09:50,870 --> 00:09:55,970
And I'm going to use my await and then db dot query.

123
00:09:56,120 --> 00:10:01,100
And the query that I'm going to use is update users.

124
00:10:01,100 --> 00:10:05,960
So update the table called users and set the field.

125
00:10:05,960 --> 00:10:10,070
That's called secret to equal dollar one.

126
00:10:10,070 --> 00:10:14,780
And I need to make sure that I'm only setting this for one user.

127
00:10:14,780 --> 00:10:20,060
And that's where their email is equal to the second input dollar two.

128
00:10:20,060 --> 00:10:25,370
So now let's put in dollar $1 $2 one is going to be equal to the secret.

129
00:10:25,370 --> 00:10:30,710
And dollar two is going to be the request dot user dot email.

130
00:10:30,710 --> 00:10:32,780
Now because this is asynchronous.

131
00:10:32,780 --> 00:10:35,150
Let's go ahead and change this to async.

132
00:10:35,150 --> 00:10:36,560
So that that works.

133
00:10:37,340 --> 00:10:40,460
After all of that's done we're waiting for this to finish.

134
00:10:40,460 --> 00:10:41,480
Hence the await.

135
00:10:41,480 --> 00:10:50,300
And after that then we go ahead and do raise dot redirect and take the user to see their secret.

136
00:10:50,300 --> 00:10:57,500
So we're going to redirect them to the secret route which is of course the get route, which means they

137
00:10:57,500 --> 00:11:03,710
get to view the secrets dot JS, which we have one more to do to pull up their secret from the database.

138
00:11:04,520 --> 00:11:08,930
So we've saved all of this and we have caught our error.

139
00:11:08,930 --> 00:11:15,200
And I'm just going to, for simplicity sake, console log that error as my error handling for now.

140
00:11:15,200 --> 00:11:18,380
So I'm done with the second to do.

141
00:11:18,380 --> 00:11:25,400
And I'm going to replace my to do with a comment for you so you know how to find it.

142
00:11:26,240 --> 00:11:34,130
And the last to do here is to change the app.get route for secrets, so that we actually pull in the

143
00:11:34,130 --> 00:11:37,640
user's secret so that we can render it in the secret.

144
00:11:37,640 --> 00:11:47,300
So JS remember, we already changed our secrets dot JS so that it now uses a Ejs tag to receive under

145
00:11:47,300 --> 00:11:48,080
secret.

146
00:11:48,080 --> 00:11:58,220
We have to get hold of that by passing it in in the same sentence as we do our rest render, our res

147
00:11:58,220 --> 00:12:03,680
dot render happens and then we get to add some things to pass over.

148
00:12:03,680 --> 00:12:06,080
In our case it's called secret.

149
00:12:06,080 --> 00:12:08,960
And what is the secret that we're going to pass?

150
00:12:08,960 --> 00:12:12,440
Well, we're going to have to get hold of that from our database.

151
00:12:12,830 --> 00:12:13,310
Again.

152
00:12:13,310 --> 00:12:15,560
We're going to do a try catch.

153
00:12:15,560 --> 00:12:20,570
And what we're going to try to do is to create a const called result.

154
00:12:20,570 --> 00:12:22,160
We're going to do await.

155
00:12:22,160 --> 00:12:24,650
And then we do db dot query.

156
00:12:24,650 --> 00:12:33,980
And the query that we're going to make is select the column called secret from the table called users.

157
00:12:33,980 --> 00:12:38,060
And then the condition is where email equals dollar one.

158
00:12:38,240 --> 00:12:44,420
And the email is again going to come from our passport authentication Request.user dot email.

159
00:12:44,420 --> 00:12:50,930
And it's really neat being able to access the user's details at any point because of this whole passport

160
00:12:50,930 --> 00:12:52,910
session thing that we've already set up.

161
00:12:52,910 --> 00:12:54,830
So that's pretty neat.

162
00:12:55,220 --> 00:13:00,230
And because we're using await, let's go ahead and change this to async as well.

163
00:13:00,230 --> 00:13:05,330
And make sure that Request.user email is in a array.

164
00:13:05,630 --> 00:13:10,220
I think I missed that out just now, so make sure you check yours.

165
00:13:10,220 --> 00:13:17,300
So once we get the result, we're going to console log the result just so that you can see it.

166
00:13:17,300 --> 00:13:22,790
But I know that it should contain a secret for the user that I just logged in.

167
00:13:22,790 --> 00:13:28,520
I'm going to go ahead and continue to fetch that secret out of the result.

168
00:13:28,520 --> 00:13:33,380
So it's going to be result dot rows at the row zero.

169
00:13:33,380 --> 00:13:37,070
And then it's under the column called secret.

170
00:13:37,070 --> 00:13:40,100
So this should allow me to access the secret.

171
00:13:40,340 --> 00:13:49,700
If the secret exists we're going to go ahead and do what we plan to do, which is to render that secret

172
00:13:49,700 --> 00:13:52,610
and pass it over like so.

173
00:13:52,610 --> 00:13:56,000
But what if it's a user who doesn't have a secret yet?

174
00:13:56,000 --> 00:13:57,230
They just join the website.

175
00:13:57,230 --> 00:13:58,310
They don't have one.

176
00:13:58,310 --> 00:14:02,720
Well, in this case we're going to raise dot render secrets dot js.

177
00:14:02,720 --> 00:14:07,040
And we can put in the default which is Jack Bauer is my hero.

178
00:14:07,550 --> 00:14:10,520
Alternatively you can just have a placeholder.

179
00:14:12,350 --> 00:14:14,030
You should submit a secret.

180
00:14:14,030 --> 00:14:16,520
It can be anything that you want.

181
00:14:16,520 --> 00:14:22,160
And finally I'm going to catch the error here with just a console log.

182
00:14:24,830 --> 00:14:28,520
And that should complete this to do.

183
00:14:29,060 --> 00:14:31,310
Let me put a marker here.

184
00:14:31,310 --> 00:14:34,940
And now let's go ahead and try it out.

185
00:14:40,180 --> 00:14:43,570
So I'm going to log in as my user.

186
00:14:43,570 --> 00:14:48,520
And you can see that the secret that I submitted previously still shows right here.

187
00:14:48,520 --> 00:14:52,990
I'm going to click on Submit a Secret and let's try a new one.

188
00:14:52,990 --> 00:14:56,350
Click submit and goes to test.

189
00:14:56,350 --> 00:14:58,960
Let's try logging out and logging in again.

190
00:14:58,960 --> 00:15:03,550
And you can see it's still persisted because it's pulling it in from our database.

191
00:15:03,790 --> 00:15:11,080
So I hope you had fun building this application and in the process, learning all about authentication.

192
00:15:11,200 --> 00:15:16,840
I've kept this project as simple as possible so that we can focus on the important things, which is

193
00:15:16,840 --> 00:15:18,520
already complicated enough.

194
00:15:18,520 --> 00:15:25,240
But this is a good time to try practicing what you've learned by applying these authentication steps

195
00:15:25,240 --> 00:15:30,250
and knowledge to a previous project of your own.

196
00:15:30,250 --> 00:15:32,710
So have a think about what you might want to do.

197
00:15:32,710 --> 00:15:36,490
Brainstorm some projects and if you build anything cool.

198
00:15:36,490 --> 00:15:38,140
As always, post in the Q&A.

199
00:15:38,140 --> 00:15:39,730
I would love to hear about it.

