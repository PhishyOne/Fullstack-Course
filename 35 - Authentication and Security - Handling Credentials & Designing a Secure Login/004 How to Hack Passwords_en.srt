1
00:00:00,140 --> 00:00:00,770
All right guys.

2
00:00:00,770 --> 00:00:08,420
So now that we've covered creating user passwords, encrypting our database as well as hashing passwords,

3
00:00:08,420 --> 00:00:14,540
we've kind of reached a level of security that most websites are at.

4
00:00:14,570 --> 00:00:20,570
Now there's a lot more security that we're going to learn about a little bit later on, but you're actually

5
00:00:20,570 --> 00:00:27,230
at a point where you already know quite a lot about authentication and keeping user passwords secure,

6
00:00:27,230 --> 00:00:32,030
and definitely a lot more than a lot of people who actually run websites.

7
00:00:32,030 --> 00:00:38,060
And I know that some of you guys are keen to get a job, and if that is you, then I want you to go

8
00:00:38,060 --> 00:00:41,180
on to a website called plaintextoffenders.com.

9
00:00:41,180 --> 00:00:43,280
I'll link to it in the course resources.

10
00:00:43,280 --> 00:00:50,360
But here, what you'll find is emails that come from various companies where the user has requested to

11
00:00:50,360 --> 00:00:57,410
reset their password, and they're sending the user a plain text version of their password.

12
00:00:57,410 --> 00:01:03,200
Now, at this point, we know to be able to even get the user's password in plain text,

13
00:01:03,200 --> 00:01:07,910
it means that they're doing some horrible things with securing the passwords.

14
00:01:07,910 --> 00:01:13,670
Either it's encrypted and there's an encryption key somewhere that they're storing, or it's simply

15
00:01:13,670 --> 00:01:19,400
just stored on their database as plain text, which is the worst possible type of security. Given that

16
00:01:19,400 --> 00:01:29,540
you already know a lot better than the people who run get getlinuxjobs.com or worldsim.com or Telecomegypt,

17
00:01:29,540 --> 00:01:35,660
then you could actually just email these people and tell them that, "I'm a web developer, and I

18
00:01:35,660 --> 00:01:39,290
know about authentication and securing user's passwords.

19
00:01:39,290 --> 00:01:41,690
You obviously seem like you might need some help,

20
00:01:41,690 --> 00:01:43,550
would you like me to work for you?"

21
00:01:43,550 --> 00:01:47,150
I recommend giving that a go if you're keen on getting a job.

22
00:01:47,150 --> 00:01:52,250
If you're not looking for a job, then have a look at these websites and if you're signed up to any

23
00:01:52,250 --> 00:01:55,670
of them, be sure to delete your account because it's definitely not secure.

24
00:01:55,670 --> 00:02:00,290
And this is why a lot of companies and a lot of websites get hacked,

25
00:02:00,290 --> 00:02:03,500
because they don't continue beyond this point.

26
00:02:03,500 --> 00:02:09,169
So that means it's a really good time to talk to you about how passwords are hacked.

27
00:02:09,169 --> 00:02:13,340
So a sort of, "Hacking Passwords 101 Class," if you will.

28
00:02:13,340 --> 00:02:16,490
Now, most of the time I use my programming powers for good,

29
00:02:16,490 --> 00:02:22,760
but in this case, I want to talk to you about how passwords might be hacked so that once we understand

30
00:02:22,760 --> 00:02:29,360
how the other side approaches this problem, then we can learn more about security and make our website

31
00:02:29,360 --> 00:02:30,620
safer for users.

32
00:02:30,620 --> 00:02:35,900
And by the way, I have no idea why hackers are always portrayed in a balaclava,

33
00:02:35,900 --> 00:02:38,600
it's not like they're going to burgle anybody.

34
00:02:38,600 --> 00:02:40,070
I mean, especially this guy,

35
00:02:40,070 --> 00:02:46,430
he must be incredibly warm sitting next to all these computers wearing so much clothing on his face,

36
00:02:46,520 --> 00:02:48,080
but I digress.

37
00:02:48,410 --> 00:02:54,890
As a company, this is probably one of the things that you least look forward to, the day when you wake

38
00:02:54,890 --> 00:02:58,490
up and you get a call and you've been hacked.

39
00:02:58,490 --> 00:03:05,210
And this has happened really recently to a lot of big companies like Adobe Creative Cloud got hacked

40
00:03:05,210 --> 00:03:13,160
in 2013, LinkedIn got hacked in 2012, and there's loads of accounts where their passwords get leaked,

41
00:03:13,160 --> 00:03:20,420
lots of unhappy users who reuse their passwords and are feeling extremely vulnerable.

42
00:03:20,420 --> 00:03:26,270
And you can see that even to this day, people can purchase these hacked accounts where people might

43
00:03:26,270 --> 00:03:33,140
not have realized that their LinkedIn email and their passwords are linked, and people are potentially

44
00:03:33,140 --> 00:03:39,590
buying that data up and using it to hack into their PayPal accounts or other similar payment portals.

45
00:03:39,590 --> 00:03:46,730
So even if you don't learn anything from this lesson, I recommend just going to this website.

46
00:03:46,730 --> 00:03:52,370
I'll link to it in the course resources just for educational purposes, but put in your email address

47
00:03:52,370 --> 00:03:57,410
and make sure that if you do have any passwords that show up, change all the places where you use that

48
00:03:57,410 --> 00:03:58,040
password.

49
00:03:58,040 --> 00:04:04,400
But why is it that all of these big companies are getting hacked and leaking their users passwords?

50
00:04:04,400 --> 00:04:08,030
Are they not at least encrypting or hashing their passwords?

51
00:04:08,030 --> 00:04:10,730
Well, they are, but consider this.

52
00:04:10,730 --> 00:04:16,700
So you're a hacker and you've managed to get into the LinkedIn user database.

53
00:04:16,700 --> 00:04:19,970
And just for simplicity's sake, let's say it looks like this.

54
00:04:19,970 --> 00:04:22,190
You've got a username and you've got a hash.

55
00:04:22,190 --> 00:04:28,340
And thankfully they didn't store their users passwords in plain text, so you can't access their passwords

56
00:04:28,340 --> 00:04:29,240
straight away.

57
00:04:29,270 --> 00:04:38,180
However, if you look at this table a little bit more closely, you will realize that three of the hashes

58
00:04:38,180 --> 00:04:40,760
are completely identical.

59
00:04:40,760 --> 00:04:43,220
Now, why might that be?

60
00:04:43,220 --> 00:04:51,140
Well, remember that the same password always turns into the same hash, no matter how often you try

61
00:04:51,140 --> 00:04:51,320
it,

62
00:04:51,320 --> 00:04:58,070
and that's a core part of the hash function that we rely on in order to validate our users as well.

63
00:04:58,070 --> 00:04:59,750
So that means a hacker

64
00:04:59,890 --> 00:05:06,880
would look at this table and realize that Angela, Tony, and Emily all have the same password, and

65
00:05:06,880 --> 00:05:11,950
what they can do is they can start to construct what we call a hash table.

66
00:05:11,950 --> 00:05:18,820
So you would take some of the most commonly used passwords, and you would use the same hash function

67
00:05:18,820 --> 00:05:22,120
to create the hash value for each of those.

68
00:05:22,120 --> 00:05:26,410
And these are some of the most common passwords that people love to use:

69
00:05:26,410 --> 00:05:30,880
123456, querty, password, 111111.

70
00:05:30,880 --> 00:05:33,580
And so you generate this hash table,

71
00:05:33,580 --> 00:05:42,220
and then all you have to do is just look up the hash of the user and compare it against the hash you

72
00:05:42,220 --> 00:05:43,870
have in your table.

73
00:05:43,870 --> 00:05:50,410
So you search by the hash value and you land upon the password, which is qwerty.

74
00:05:50,410 --> 00:05:57,880
So now you figured out that three out of four users in this table all have the same password, and it's

75
00:05:57,880 --> 00:05:58,630
qwerty.

76
00:05:58,630 --> 00:06:05,380
So what if they didn't use one of the most common passwords and instead they used something else, say,

77
00:06:05,380 --> 00:06:08,260
their date of birth or their pet's name?

78
00:06:08,260 --> 00:06:10,900
Well, let's see how we would make a hash table

79
00:06:10,900 --> 00:06:12,790
if we were a hacker.

80
00:06:12,790 --> 00:06:17,050
You would probably start with all the words from a dictionary.

81
00:06:17,050 --> 00:06:20,380
And this is where the terms dictionary attack comes from.

82
00:06:20,380 --> 00:06:27,190
You create hashes from all the possible words in a dictionary, and that will only be about 150,000

83
00:06:27,190 --> 00:06:28,990
hashes that you would need to create.

84
00:06:28,990 --> 00:06:34,660
And then you add to that hash table, or the numbers from a telephone book and all the combinations

85
00:06:34,660 --> 00:06:36,700
of characters up to six places.

86
00:06:36,700 --> 00:06:45,550
And then you add all of these together and you end up with something close to 19.8 billion combinations,

87
00:06:45,550 --> 00:06:48,670
which admittedly sounds like a large number.

88
00:06:48,670 --> 00:06:48,940
Right?

89
00:06:48,940 --> 00:06:53,860
How long would it take your computer to calculate that many hashes?

90
00:06:53,860 --> 00:06:55,180
So what do we do?

91
00:06:55,180 --> 00:06:56,860
Well, let's go shopping.

92
00:06:56,860 --> 00:07:05,080
Let's go and buy some of the latest GPUs or graphics cards, which are capable of parallel processing

93
00:07:05,080 --> 00:07:12,760
and therefore are particularly suited to not only Bitcoin mining, but also generating hashes.

94
00:07:12,760 --> 00:07:21,850
With one of the latest GPUs you can calculate about 20 billion MD5 hashes per second.

95
00:07:21,850 --> 00:07:31,990
So that means with our hash table of 19.8 billion combinations, it'll only take one of these GPUs 0.9

96
00:07:31,990 --> 00:07:35,080
seconds, which is nothing.

97
00:07:35,080 --> 00:07:40,300
It's not a lot of time to invest in order to hash so many people's passwords.

98
00:07:40,300 --> 00:07:47,440
And to make it even worse, large hash tables have been built for the most common passwords.

99
00:07:47,440 --> 00:07:54,490
So because we've had so much data from previous hacks such as the Adobe one or the LinkedIn one or TalkTalk

100
00:07:54,490 --> 00:08:01,990
or Equifax, we know what the most common passwords are that people use, and every year company like

101
00:08:01,990 --> 00:08:04,120
SplashData will compile

102
00:08:04,120 --> 00:08:07,690
what are the most common passwords, say, the top 25.

103
00:08:07,690 --> 00:08:11,680
And this is where all of those values that went into our table came from.

104
00:08:11,680 --> 00:08:14,560
But you can actually go one step further,

105
00:08:14,680 --> 00:08:22,630
there are pre-built hash tables that people have created for the top 10,000 most common passwords,

106
00:08:22,630 --> 00:08:27,340
and you can see that MD5 is one of the quickest hashes to calculate. 

107
00:08:27,340 --> 00:08:33,159
And this is why it's very, very common to find MD5 hash tables.

108
00:08:33,159 --> 00:08:36,850
And you can even use Google as a basic hash table.

109
00:08:36,850 --> 00:08:40,720
You can paste in the hash that you found from the hacked database,

110
00:08:40,720 --> 00:08:46,390
you perform a simple Google search and you come up with the original password.

111
00:08:46,570 --> 00:08:52,300
If at this point you're extremely scared and you're wondering, well, what exactly can you do about

112
00:08:52,300 --> 00:08:52,720
this?

113
00:08:52,720 --> 00:09:00,100
Well, consider that in our user table, there was one hash that was extremely difficult to find, and

114
00:09:00,100 --> 00:09:05,380
it didn't match up with any of the hashes in this little simple hash table we built.

115
00:09:05,380 --> 00:09:13,000
So what if we put that into Google to search on a larger scale and see if it matches any of the hashes

116
00:09:13,000 --> 00:09:16,030
in the hash tables that people have generated?

117
00:09:16,030 --> 00:09:18,820
And it doesn't, it doesn't match anything.

118
00:09:18,820 --> 00:09:26,140
And the reason is because when John created his password, he had a very, very strong password with

119
00:09:26,140 --> 00:09:33,490
uppercase letters, lowercase letters, numbers, symbols, but most importantly, a long password.

120
00:09:33,490 --> 00:09:40,900
When you think about hashing as a mathematical formula, you'll realize that as the number of characters

121
00:09:40,900 --> 00:09:48,640
of your password increases the computation time that it takes to crack it increases exponentially.

122
00:09:48,640 --> 00:09:55,870
So it doesn't matter if your account on LinkedIn or Adobe Creative Cloud or Ashley Madison was cracked,

123
00:09:55,870 --> 00:09:59,470
as long as you had a strong password,

124
00:09:59,470 --> 00:09:59,650
they

125
00:09:59,790 --> 00:10:02,760
wouldn't be able to work it out from a hash table.

126
00:10:02,790 --> 00:10:08,940
As an example, there's a website called Password Checker and you can put in your password and it'll

127
00:10:08,940 --> 00:10:15,450
tell you not only the strength, but also how long it will take various types of machines to be able

128
00:10:15,450 --> 00:10:17,220
to crack that password.

129
00:10:17,220 --> 00:10:23,070
So let's say that I create a six character password composed of a random set of characters, right?

130
00:10:23,070 --> 00:10:26,250
One two, three, four, five, six.

131
00:10:26,250 --> 00:10:33,720
And you can see that even for a standard desktop PC, it only takes about three seconds to perform a

132
00:10:33,720 --> 00:10:36,960
brute force attack to crack that password.

133
00:10:36,960 --> 00:10:41,850
But let's see what happens if I add another six more characters.

134
00:10:41,850 --> 00:10:45,510
One, two, three, four, five, six.

135
00:10:46,350 --> 00:10:55,680
Now it takes 31 years for a standard desktop PC to be able to crack it, and even a fast GPU takes two

136
00:10:55,680 --> 00:10:57,570
years to crack my password.

137
00:10:57,570 --> 00:11:04,650
So even though all of the websites encourage you to add a capital letter, a lowercase letter, some

138
00:11:04,650 --> 00:11:13,020
numbers, and some random characters if you only have six characters in your password, so a short password,

139
00:11:13,020 --> 00:11:16,020
it still doesn't take very long to crack.

140
00:11:16,020 --> 00:11:24,090
So the most important thing of creating a strong password that is almost uncrackable is just to increase

141
00:11:24,090 --> 00:11:30,810
the number of characters. And also to prevent yourself from being a victim of a dictionary attack,

142
00:11:30,810 --> 00:11:37,920
just make sure that you don't use a dictionary word or a place name or something that is in a directory

143
00:11:37,920 --> 00:11:39,900
somewhere, like a telephone number.

144
00:11:39,900 --> 00:11:44,550
All right, so at least after this lesson, you'll know how to keep yourself more secure.

145
00:11:44,550 --> 00:11:50,010
But in the next lesson we're going to address these vulnerabilities that occur because of weak hashing

146
00:11:50,010 --> 00:11:50,760
algorithms

147
00:11:50,760 --> 00:11:56,670
and we're going to learn how we can combat hackers who try to attack our database using a dictionary

148
00:11:56,670 --> 00:11:58,950
attack or by creating a hash table.

149
00:11:58,950 --> 00:12:02,250
So for all of that and more, I'll see you on the next lesson.

150
00:12:02,250 --> 00:12:06,930
But as a quick bonus, if you ever want to trick your friends into thinking that you're some sort of

151
00:12:06,930 --> 00:12:12,390
a hacker, at least according to Hollywood, I recommend checking out a website called, hackertyper.net,

152
00:12:12,540 --> 00:12:19,200
where you can just mash the keyboard and you end up with something that looks extremely realistic.

153
00:12:19,200 --> 00:12:24,570
But word of warning, try not to do this on an airplane or in a government building unless you want

154
00:12:24,570 --> 00:12:26,220
to actually get investigated.

