1
00:00:00,200 --> 00:00:00,770
Hey, guys.

2
00:00:00,770 --> 00:00:06,950
So in the last lesson, we looked at the various Flexbox properties that determine the layout of our

3
00:00:06,950 --> 00:00:09,980
items in a Flexbox container.

4
00:00:10,010 --> 00:00:15,290
We looked at the things that we can change about the flex items and the things that we can change about

5
00:00:15,290 --> 00:00:16,880
the flex container.

6
00:00:17,030 --> 00:00:23,510
In this lesson, we're going to talk about how to size the items in a Flexbox container shrinking and

7
00:00:23,510 --> 00:00:28,580
growing and how it should behave when it's in a responsive situation.

8
00:00:29,510 --> 00:00:36,080
Let's say we had a Web page with four paragraph elements, so we know that paragraph elements are going

9
00:00:36,080 --> 00:00:43,340
to be full width because they are all block elements and they have a default amount of sort of margin

10
00:00:43,340 --> 00:00:45,200
and also padding.

11
00:00:45,440 --> 00:00:53,570
If we go ahead and put all of those paragraph elements into a Flexbox container, even if that container

12
00:00:53,570 --> 00:01:01,670
is invisible, it's going to turn each of these paragraph elements into flex items.

13
00:01:01,670 --> 00:01:07,160
And by default, as you might remember, the main axis is along a row,

14
00:01:07,160 --> 00:01:09,500
and we can of course change that,

15
00:01:09,500 --> 00:01:14,540
but it stacks each of these items based on the size of their content.

16
00:01:14,570 --> 00:01:18,320
One next to each other without any gaps between.

17
00:01:19,070 --> 00:01:26,870
At this stage, even without writing any sizing properties, this has a default behavior where if we

18
00:01:26,870 --> 00:01:36,380
go ahead and change the width of our window or our viewport, if this is shrunken, then you'll see

19
00:01:36,380 --> 00:01:40,220
these blocks shrink in response.

20
00:01:40,760 --> 00:01:48,860
And Flexbox does most of this automatically having a behavior that in most cases is what we would want,

21
00:01:48,860 --> 00:01:56,030
but sometimes you're going to need to customize this and to be able to customize how each of the items

22
00:01:56,030 --> 00:01:59,080
inside a Flexbox is sized,

23
00:01:59,090 --> 00:02:03,150
we're going to need to learn a little bit about how it actually gets worked out,

24
00:02:03,150 --> 00:02:10,710
and what is the algorithm essentially, that Flexbox uses to determine each of the flex item's size.

25
00:02:10,979 --> 00:02:16,800
And the way that it works it out is basically a priority list.

26
00:02:16,920 --> 00:02:22,740
The first thing it looks at is whether if there is a minimum width and a maximum width that's set on

27
00:02:22,740 --> 00:02:29,280
the item. If this is not set, then it's going to look at the next thing, which is is there a

28
00:02:29,280 --> 00:02:30,180
flex-basis set?

29
00:02:30,180 --> 00:02:39,450
And previously we looked at this property flex-basis as a way to set the width on a row-based Flexbox

30
00:02:39,450 --> 00:02:44,280
or the height on a column-based Flexbox.

31
00:02:44,580 --> 00:02:50,880
Essentially whichever direction is the main axis, the size is going to follow that axis.

32
00:02:51,030 --> 00:02:58,080
If there's no flex-basis set either, it's going to look at the width or in the case of a column-based

33
00:02:58,080 --> 00:03:02,310
Flexbox, it's going to look at the height property.

34
00:03:02,820 --> 00:03:08,130
And we've already previously set the height property and the width property, and you can set that on

35
00:03:08,130 --> 00:03:09,870
any HTML element

36
00:03:09,870 --> 00:03:11,400
so there's nothing new there.

37
00:03:11,430 --> 00:03:16,740
Now, the final one that looks at if none of those are set is the actual content width.

38
00:03:16,770 --> 00:03:24,090
Let's say you had an item that contained a paragraph with the word App Brewery.

39
00:03:24,180 --> 00:03:25,470
The content width,

40
00:03:25,470 --> 00:03:33,090
the ideal width is basically the width that allows that text to be lined up next to each other.

41
00:03:33,270 --> 00:03:42,840
If the flexible box had to shrink, then it will go down to the minimum size, which is where the text

42
00:03:42,840 --> 00:03:47,070
wraps and they are stacked one on top of each other.

43
00:03:47,100 --> 00:03:50,970
This is now pretty much the minimum content width.

44
00:03:51,150 --> 00:03:57,900
So I'm going to show you example of all four ways of setting the sizing and we'll see with real examples

45
00:03:57,900 --> 00:04:00,690
of how this actually works in code format.

46
00:04:01,620 --> 00:04:05,760
Let's first create a flex container that is just set to display: flex.

47
00:04:05,760 --> 00:04:08,850
Has a gap of 10px.

48
00:04:08,940 --> 00:04:17,040
Inside this flex container, I've got four items and each of those are paragraph items similar to what

49
00:04:17,040 --> 00:04:18,360
we saw before.

50
00:04:18,930 --> 00:04:24,090
Each of these paragraph items obviously contain texts that have different lengths.

51
00:04:24,270 --> 00:04:33,270
If we go ahead and just by default, put these items inside a flex container such as here, then when

52
00:04:33,270 --> 00:04:41,310
we go ahead and shrink the size of this window, then what's going to happen is each of these items

53
00:04:41,340 --> 00:04:49,410
are going to automatically shrink until they reach the minimum content size.

54
00:04:49,440 --> 00:04:56,670
Notice that this box is the largest, and that's because the longest word in that entire line of text

55
00:04:56,670 --> 00:04:58,620
is this word programming.

56
00:04:58,620 --> 00:04:59,910
So that determines

57
00:05:00,150 --> 00:05:06,030
the minimum width of this box because it doesn't want to put words onto different lines.

58
00:05:06,030 --> 00:05:14,670
So it's going to set this as the minimum width that it will shrink down to. When this is sort of in

59
00:05:14,670 --> 00:05:15,030
real life,

60
00:05:15,030 --> 00:05:16,710
let's go ahead and animate it,

61
00:05:16,710 --> 00:05:18,270
this is what you'll actually see.

62
00:05:18,300 --> 00:05:24,630
It's going to shrink and shrink and shrink until it's reached that minimum width for the content.

63
00:05:24,630 --> 00:05:30,840
And then you'll see afterwards all of that content gets pushed off the page and it will not be visible

64
00:05:30,870 --> 00:05:32,520
on screen anymore.

65
00:05:32,700 --> 00:05:38,130
This is the default behavior of Flexbox without us setting any of the sizing properties.

66
00:05:38,220 --> 00:05:48,120
And as I mentioned, by default, the max-width looks at the longest possible line of the text, and

67
00:05:48,120 --> 00:05:54,210
the minimum width looks at the longest word to determine the minimum width.

68
00:05:54,870 --> 00:06:03,420
Now, let's take a look at what happens if we decide to set manually the width of each of the items.

69
00:06:03,510 --> 00:06:07,350
Notice here that the flex container still has the same code as before.

70
00:06:07,350 --> 00:06:08,880
It has a gap of 10px,

71
00:06:08,910 --> 00:06:10,710
it's set to display: flex,

72
00:06:10,710 --> 00:06:19,620
but now for each of these green items, we've now targeted them inside our CSS and we've decided that

73
00:06:19,620 --> 00:06:23,760
we want each of them to have a width of 100px.

74
00:06:23,760 --> 00:06:25,680
And that's exactly what you see here.

75
00:06:25,680 --> 00:06:30,990
Each of these have the same size and they are all 100px wide.

76
00:06:31,440 --> 00:06:40,230
So now when the container gets shrunk, what happens is it's going to try and respect that width until

77
00:06:40,230 --> 00:06:44,550
there is not enough overall width of the container.

78
00:06:44,550 --> 00:06:52,200
So if we had four items which are 100px each, then this container has to be 400px, right?

79
00:06:52,410 --> 00:07:00,120
If this width becomes less than 400px, then it's going to continue using the same algorithm to

80
00:07:00,120 --> 00:07:02,590
shrink each of the items.

81
00:07:02,680 --> 00:07:06,040
Now again, notice that the shrinking is not uniform.

82
00:07:06,040 --> 00:07:12,610
It's still trying to conform to that minimum size of the content so that even though the text goes on

83
00:07:12,610 --> 00:07:16,870
two different lines, the longest word is still kept intact.

84
00:07:17,650 --> 00:07:21,940
When there is enough space, it's going to respect this width,

85
00:07:21,940 --> 00:07:28,360
but as soon as there's not enough space in the container to accommodate all of the items that have the

86
00:07:28,360 --> 00:07:36,250
set width, it's going to ignore this and dynamically shrink each of the items until it reaches that

87
00:07:36,250 --> 00:07:38,410
minimum width for each item.

88
00:07:38,770 --> 00:07:46,150
Whereas initially, if we had nothing set on the items, it's going to look at the length of the entire

89
00:07:46,150 --> 00:07:49,390
line when it's all on one line,

90
00:07:49,540 --> 00:07:53,650
so that is going to be the content width.

91
00:07:53,860 --> 00:08:01,720
If, however, you have a width property set, then it's going to look at that instead instead of the

92
00:08:01,720 --> 00:08:02,550
content width.

93
00:08:02,560 --> 00:08:09,730
So instead of everything being all on one line, it's going to look at, well, what is the width that

94
00:08:09,730 --> 00:08:10,720
you've set?

95
00:08:10,720 --> 00:08:18,580
So if we set, it's going to be 100px, then it's going to try and make it 100px wide until

96
00:08:18,580 --> 00:08:24,420
you have shrunken the container where it can no longer fit everything as 100px

97
00:08:24,430 --> 00:08:27,340
then it starts shrinking the box.

98
00:08:27,610 --> 00:08:31,780
Now the next thing that we can try adding is the flex-basis.

99
00:08:31,900 --> 00:08:38,710
Notice how I've got a width set, but I've also got a flex-basis set and because I've got a row-based

100
00:08:38,710 --> 00:08:45,280
flex container, because I haven't changed it to column, remember we said the flex-basis is effectively

101
00:08:45,280 --> 00:08:48,310
determining the width of each of the items.

102
00:08:48,550 --> 00:08:50,890
What does this look like then?

103
00:08:50,920 --> 00:08:56,860
Well, when you actually run this code, you're going to see that it's going to completely ignore this

104
00:08:56,890 --> 00:09:05,830
width because you have a flex-basis set and it's going to set each of the items to that flex-basis,

105
00:09:05,830 --> 00:09:08,440
which in this case is 200px.

106
00:09:08,440 --> 00:09:11,920
And you can see it's a little bit wider than the previous example.

107
00:09:12,070 --> 00:09:19,190
However, this again is in the situation where the container has plenty of space to fill, even though

108
00:09:19,190 --> 00:09:22,910
you've got 200px for each item, there's still space left,

109
00:09:22,910 --> 00:09:28,940
but if you shrink everything down where there's no more space and there's not enough space to give each

110
00:09:28,940 --> 00:09:32,630
item 200px, then exactly the same thing happens.

111
00:09:32,630 --> 00:09:39,080
It's going to look at that minimum width again, and it works pretty much the same as it did with width.

112
00:09:39,380 --> 00:09:44,930
When we animate this, you'll see that it will give it 200px if it can,

113
00:09:44,930 --> 00:09:48,380
and if it can't, then it's going to shrink it to the minimum width.

114
00:09:48,530 --> 00:09:53,900
So remember that when we have a flex-basis, it will completely ignore the width.

115
00:09:53,900 --> 00:09:59,390
So there's actually not even any point in setting it because it's going to be looking at the more important

116
00:09:59,390 --> 00:10:02,180
property, which is the flex-basis in this case.

117
00:10:03,410 --> 00:10:09,980
We've seen how we've gone from the content width, which is the default to a set width, to a flex-basis,

118
00:10:09,980 --> 00:10:14,630
and now we're going to see what happens with the minimum width and the maximum width.

119
00:10:15,260 --> 00:10:21,650
As I mentioned, there is a default max-width and min width that's set based on the content.

120
00:10:21,650 --> 00:10:30,170
So the maximum width is all of the content lined up, occupying the ideal estate, which in the form

121
00:10:30,170 --> 00:10:37,700
of text is to have everything on one line and the minimum width is determined by the longest word and

122
00:10:37,700 --> 00:10:41,960
it's going to be the width of that word at the font size that's set.

123
00:10:42,380 --> 00:10:50,210
You can also manually set each of these properties and completely ignore the content, and in some cases

124
00:10:50,210 --> 00:10:51,560
that might be useful.

125
00:10:51,590 --> 00:11:00,620
Let's say that we had a flex-basis of 200px set on each of these items, but we go ahead and also

126
00:11:00,620 --> 00:11:04,310
set a maximum width of 100px.

127
00:11:04,400 --> 00:11:09,680
Notice that in this case, 100px is less than 200px,

128
00:11:09,680 --> 00:11:13,450
so the flex-basis is actually larger than the maximum width.

129
00:11:13,460 --> 00:11:15,110
So what happens?

130
00:11:15,110 --> 00:11:22,970
Well, instead of respecting the flex-basis, which is 200px, even when there's plenty of space,

131
00:11:23,000 --> 00:11:30,710
it's going to look at that max-width and it's only going to give each item 100px.

132
00:11:30,710 --> 00:11:40,400
So this max-width determines how much the maximum width that the item is allowed to grow to.

133
00:11:40,670 --> 00:11:46,110
Even if you give it all the space in the world, how wide can it possibly be?

134
00:11:46,130 --> 00:11:48,230
Well, it's going to look at the max-width.

135
00:11:48,230 --> 00:11:55,580
And if that max-width is smaller than the flex-basis, then it's going to take this value.

136
00:11:55,580 --> 00:12:02,390
But if the flex-basis was smaller than the max-width, for example, if we had a flex-basis instead

137
00:12:02,390 --> 00:12:05,630
of 200, it was, I don't know, 50px,

138
00:12:05,630 --> 00:12:11,030
well then in that case each of these items will actually be 50px

139
00:12:11,030 --> 00:12:15,560
instead. The maximum width is the maximum possible.

140
00:12:15,560 --> 00:12:17,000
It's going to try and respect

141
00:12:17,030 --> 00:12:22,040
the flex-basis unless the max-width happens to be smaller.

142
00:12:22,610 --> 00:12:30,200
And if we take a look at this in animation, you'll see that as I shrink this container, each of the

143
00:12:30,200 --> 00:12:31,310
items shrink.

144
00:12:31,310 --> 00:12:41,150
And as I grow the container, each of the items grow in size, but only up until that maximum width.

145
00:12:41,600 --> 00:12:46,370
The max-width determines the growth potential of each of the items.

146
00:12:46,640 --> 00:12:49,600
On the other hand, there is the minimum width.

147
00:12:49,610 --> 00:12:56,360
As I said, the maximum width determines how big each of the items can grow to, and the minimum width

148
00:12:56,360 --> 00:13:01,070
determines how small each of the items can shrink to.

149
00:13:01,580 --> 00:13:08,840
Now, let's go back to that situation where we have a flex-basis of 200px, but in addition, we

150
00:13:08,870 --> 00:13:12,260
set the minimum width to 300px.

151
00:13:12,260 --> 00:13:19,830
So notice in this case, 300px is bigger than 200px, what's going to happen when our website

152
00:13:19,830 --> 00:13:20,920
gets rendered?

153
00:13:20,940 --> 00:13:23,670
Well, it's going to look like this.

154
00:13:23,700 --> 00:13:31,330
This is 200px and this is 300px.

155
00:13:31,350 --> 00:13:38,760
As you'll notice, it's actually respecting the minimum width, even though we have a flex-basis that's

156
00:13:38,760 --> 00:13:47,730
set when the minimum width is larger than the flex-basis, it's going to respect that minimum width,

157
00:13:47,760 --> 00:13:56,820
but in addition, when we try to shrink our container down, it's only going to shrink until the minimum

158
00:13:56,820 --> 00:13:58,320
width is reached.

159
00:13:58,410 --> 00:14:05,670
So if your minimum width is very large, then it's not going to shrink beyond this size.

160
00:14:06,180 --> 00:14:12,810
So I've talked a little bit about growing and shrinking, and this is a really important concept to

161
00:14:12,810 --> 00:14:21,210
understand in Flexbox because a lot of that flexibility, the flexible part of the flexible box comes

162
00:14:21,210 --> 00:14:25,110
from this ability to grow and to shrink.

163
00:14:25,380 --> 00:14:32,700
It's probably easier to understand these properties by switching both of them off first. So we can switch

164
00:14:32,730 --> 00:14:35,580
each of these property off by setting it to 0.

165
00:14:35,580 --> 00:14:42,480
So let's set flex-grow to 0 and flex-shrink to 0 and see what happens to our boxes.

166
00:14:42,510 --> 00:14:45,720
They start out being 100px wide,

167
00:14:46,820 --> 00:14:54,380
and then when we go ahead and try to grow and shrink it, namely trying to increase and decrease the

168
00:14:54,380 --> 00:15:01,250
width of the window, you can see that our items don't actually change in their size at all.

169
00:15:01,250 --> 00:15:07,760
They just stay exactly the same size as before because it can't grow and it can't shrink.

170
00:15:07,760 --> 00:15:10,790
So this doesn't even look like a Flexbox anymore.

171
00:15:10,820 --> 00:15:11,390
Right?

172
00:15:11,540 --> 00:15:14,390
Let's go ahead and switch some of those things on.

173
00:15:14,600 --> 00:15:22,160
If we go ahead and change the flex-grow to 1, which means that flex-grow is on, but flex-shrink

174
00:15:22,160 --> 00:15:30,440
is off, then what's going to happen is each of these items will first start out at 100px,

175
00:15:30,440 --> 00:15:36,770
remember the flex-basis is the initial starting value,

176
00:15:38,080 --> 00:15:48,550
it tries to be 100px wide, but then because it's allowed to grow and there is plenty of space

177
00:15:48,550 --> 00:15:53,120
to grow, there's way more than 400px to fit our four items,

178
00:15:53,140 --> 00:16:00,340
then it's going to increase the width of each of these items until the entire width of the container

179
00:16:00,340 --> 00:16:03,400
is filled up by each of our items.

180
00:16:04,300 --> 00:16:10,780
So when we adjust the width of our container, this is where you can see that when the width is reduced,

181
00:16:10,780 --> 00:16:18,190
it gets reduced to that flex-shrink amount, which is 100px, but it doesn't go any further than

182
00:16:18,190 --> 00:16:18,460
that.

183
00:16:18,460 --> 00:16:21,760
Any further than that, the items start going off the screen.

184
00:16:21,880 --> 00:16:29,290
But when there's more than 100px, for example, when we're widening the amount of space like here,

185
00:16:29,290 --> 00:16:33,760
it will continue to grow until it can fill up all of the space.

186
00:16:34,600 --> 00:16:37,030
Now, what if we switch that around?

187
00:16:37,030 --> 00:16:41,660
Let's turn off flex-grow and turn on flex-shrink.

188
00:16:41,690 --> 00:16:49,010
What happens here is by default, it is going to set everything to the flex-basis.

189
00:16:49,010 --> 00:16:58,430
So 100px and it's not going to grow to fill the space, but it is going to shrink beyond the flex-basis

190
00:16:58,430 --> 00:17:03,130
size until you reach that minimum width.

191
00:17:03,140 --> 00:17:08,480
And because that's not set in this case, then it's just going to look at the minimum width of the content.

192
00:17:09,380 --> 00:17:14,150
So this is actually the default setting of Flexbox items.

193
00:17:14,240 --> 00:17:18,170
It's going to not grow, but it is going to shrink.

194
00:17:18,200 --> 00:17:23,150
Even if you didn't set these two properties, you would see this behavior by default.

195
00:17:23,510 --> 00:17:28,940
Now, the next example I've got is where flex-grow and flex-shrink are both on,

196
00:17:28,940 --> 00:17:35,930
and as you can imagine, what's going to happen is it's going to try and take up as much width as possible.

197
00:17:35,930 --> 00:17:40,890
And then when you shrink it, it's going to try and be as small as possible.

198
00:17:40,910 --> 00:17:49,580
So in this case, the flex-basis is pretty much completely ignored because flex-grow and flex-shrink

199
00:17:49,580 --> 00:17:51,230
are both on.

200
00:17:51,410 --> 00:17:55,190
It's actually going to grow to the max-width,

201
00:17:56,200 --> 00:17:59,620
and it's going to shrink to the minimum width.

202
00:18:01,070 --> 00:18:08,390
And if these two are not set, then it's going to infer that from the content of those items.

203
00:18:08,600 --> 00:18:16,130
Now, the default for flex-basis is actually auto and auto is a little bit of a complex one because

204
00:18:16,130 --> 00:18:20,450
it's going to look at the amount of content in each of the items.

205
00:18:20,450 --> 00:18:25,630
So it's going to give more flex-basis to the items with more content.

206
00:18:25,640 --> 00:18:33,050
For example, this last item with the most words and it's going to give less width to the ones that

207
00:18:33,050 --> 00:18:35,030
have smaller content.

208
00:18:35,120 --> 00:18:41,600
If you don't want that and instead you want everything to be equal width, then you simply switch it

209
00:18:41,600 --> 00:18:43,550
off by giving it a 0.

210
00:18:44,270 --> 00:18:50,810
There's actually a shorthand way of writing this without having to write out flex-basis, flex-grow,

211
00:18:50,810 --> 00:18:51,830
flex-shrink,

212
00:18:51,830 --> 00:18:56,040
and we've seen this style of shorthand before in CSS.

213
00:18:56,090 --> 00:18:58,640
The first value is the grow.

214
00:18:59,180 --> 00:19:02,220
The second value is the shrink.

215
00:19:03,740 --> 00:19:06,440
And the third value is the basis.

216
00:19:07,250 --> 00:19:13,370
So it's exactly the same, but it's obviously a lot quicker to write.

217
00:19:13,400 --> 00:19:22,580
And because this particular set is so commonly used, you can actually shorten this even further by

218
00:19:22,580 --> 00:19:25,100
simply just writing flex: 1.

219
00:19:25,370 --> 00:19:33,530
And that means a grow of 1, a shrink of 1 and a basis of 0 to keep everything equal.

220
00:19:33,800 --> 00:19:42,050
We've actually seen this before where we created containers with different size ratios; a red item

221
00:19:42,050 --> 00:19:51,140
that is half the size of the blue container, which has a flex of 2, and the blue one is two-thirds

222
00:19:51,140 --> 00:19:55,310
the size of the one with a flex of 3,

223
00:19:55,310 --> 00:20:02,090
and essentially what we're doing here is we're setting the grow to 1 and the shrink to 1.

224
00:20:03,050 --> 00:20:08,550
And in this case, it's a grow of 2 and a shrink of 2.

225
00:20:08,970 --> 00:20:15,180
In this way, we're able to set a ratio for how our elements will respond responsively.

226
00:20:15,180 --> 00:20:22,050
So no matter if you grow or shrink, it's going to try and keep these ratios and it's going to try and

227
00:20:22,050 --> 00:20:26,370
respect that even while it's being responsibly resized.

228
00:20:27,180 --> 00:20:32,410
That was quite a lot of information on how Flexbox sizing works.

229
00:20:32,430 --> 00:20:39,240
Let's go ahead and try an exercise to see if you can apply this in code and see if you've understood

230
00:20:39,240 --> 00:20:42,780
a lot of the principles that we talked about in this lesson.

231
00:20:42,780 --> 00:20:47,700
So head over to this URL where I've prepared an exercise for you.

232
00:20:47,730 --> 00:20:54,630
You can simply just write your code inside this text box and then when you click "Apply CSS," the goal

233
00:20:54,630 --> 00:21:02,970
is that your CSS rules will allow this blue Flexbox to behave the same way as this green one.

234
00:21:03,120 --> 00:21:08,820
So I want you to resize the window and see how the green box behaves.

235
00:21:09,000 --> 00:21:10,350
Does it grow?

236
00:21:10,350 --> 00:21:11,640
Does it shrink?

237
00:21:11,640 --> 00:21:14,190
What's the size that it wants to be?

238
00:21:14,190 --> 00:21:17,640
And I want you to use what you see on screen.

239
00:21:17,640 --> 00:21:23,460
So notice how I've told you what each of these should be in terms of their ideal width,

240
00:21:23,880 --> 00:21:28,170
and I want you to write your code down here, whatever it is that you need.

241
00:21:28,170 --> 00:21:31,080
Maybe you don't need to write any code under some of the brackets,

242
00:21:31,080 --> 00:21:33,060
maybe you need to write more code,

243
00:21:33,060 --> 00:21:39,000
but essentially once you click, "Apply CSS," the blue boxes which you control with your code should have

244
00:21:39,000 --> 00:21:41,100
the same behavior as the green ones.

245
00:21:41,130 --> 00:21:41,790
Pause the video now,

246
00:21:41,790 --> 00:21:45,150
head over here and give that exercise a go.

247
00:21:47,160 --> 00:21:47,550
All right.

248
00:21:47,550 --> 00:21:53,070
So the first thing that you might notice is something that's actually completely unrelated to sizing,

249
00:21:53,070 --> 00:22:01,050
which is the fact that each of our items are distributed along this container and that if you remember

250
00:22:01,050 --> 00:22:02,910
from a previous lesson,

251
00:22:02,910 --> 00:22:06,960
so a little bit of revision here is done using justify-content.

252
00:22:06,960 --> 00:22:12,240
And this particular style of justify content is actually space between.

253
00:22:12,240 --> 00:22:16,830
So if I click, "Apply CSS," you can see it's now spaced between.

254
00:22:16,980 --> 00:22:23,010
Now the next thing we need to change is the fact that each of these items actually should have different

255
00:22:23,010 --> 00:22:24,120
ideal widths.

256
00:22:24,120 --> 00:22:27,990
And we know we can set that by using the flex-basis.

257
00:22:27,990 --> 00:22:33,180
Let's go ahead and set the flex-basis for each of our items based on those widths.

258
00:22:33,180 --> 00:22:42,750
So it's 200px for the Item 1, 200px for Item 2 and 400px for Item 3.

259
00:22:42,780 --> 00:22:48,850
Let's apply our CSS and you can see they're now equal width and it looks like everything's the same,

260
00:22:48,850 --> 00:22:50,470
we've achieved our goal

261
00:22:50,470 --> 00:22:56,950
but remember I said you have to resize things and notice how they don't behave the same at all.

262
00:22:57,190 --> 00:23:04,900
Now when we resize this, you'll notice that Item 1, actually shrinks in our green Flexbox,

263
00:23:04,900 --> 00:23:08,050
but Item 2 and 3 don't shrink at all.

264
00:23:08,050 --> 00:23:15,460
So we can tell that 2 and 3 probably have shrink disabled and item 1 is left to shrink. Now by

265
00:23:15,460 --> 00:23:16,000
default,

266
00:23:16,000 --> 00:23:22,390
I mentioned that all items in a Flexbox are allowed to shrink and you can see our blue 1, 2 and

267
00:23:22,390 --> 00:23:26,050
3, all in fact, do that shrink to fit the space.

268
00:23:26,290 --> 00:23:30,370
Now, that is probably a more useful behavior in reality,

269
00:23:30,370 --> 00:23:35,500
but in this case, because we're trying to do an exercise, let's go ahead and match it.

270
00:23:35,500 --> 00:23:44,800
So let's turn the flex-shrink off on Item 2 by setting it to 0 and let's do the same for Item 3.

271
00:23:44,800 --> 00:23:51,160
Let's apply our CSS and see it now behaves exactly the same.

272
00:23:51,430 --> 00:23:55,090
So that is the solution to this simple exercise.

273
00:23:55,210 --> 00:24:00,850
But even though it's simple, it's actually quite difficult to work out exactly what needs to be changed.

274
00:24:00,850 --> 00:24:06,880
And hopefully through doing this exercise, you've had to review some content from before, such as

275
00:24:06,880 --> 00:24:15,070
justify-content, and also you've had to think hard about how flex-shrink, flex-basis and all of these

276
00:24:15,070 --> 00:24:18,490
different things we learned in today's lesson actually works.

277
00:24:18,610 --> 00:24:20,200
Have a play around with the code.

278
00:24:20,200 --> 00:24:25,420
Try writing some stuff yourself and once you're ready, go ahead to the next lesson where we have our

279
00:24:25,420 --> 00:24:26,980
final section project.

