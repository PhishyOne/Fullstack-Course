1
00:00:00,560 --> 00:00:06,530
Now that we've seen that we can create a Flexbox, we can set the flex-direction,

2
00:00:06,530 --> 00:00:13,280
in this lesson, I want to dive deeper into probably the biggest topic of Flexbox, which is creating

3
00:00:13,280 --> 00:00:16,219
layout and how you create flexible layout.

4
00:00:16,250 --> 00:00:23,180
What is the automatic or default behavior of Flexbox and what can you change to make it what you want

5
00:00:23,180 --> 00:00:23,870
it to be?

6
00:00:24,350 --> 00:00:30,470
One of the first things to differentiate when we're talking about the different properties to set is,

7
00:00:30,470 --> 00:00:37,400
is this property going to go onto the child, which is the flex item?

8
00:00:38,300 --> 00:00:47,000
So in this case, each of these items that are contained within the flexible container is a child or

9
00:00:47,030 --> 00:00:50,180
is the property going on to the parent?

10
00:00:50,180 --> 00:00:57,230
So the container. And it's important when you're learning Flexbox to really differentiate between these

11
00:00:57,230 --> 00:01:04,910
two things because as we saw earlier, if you set a property that's intended for the child on the parent

12
00:01:04,910 --> 00:01:06,560
selector, it's not going to work.

13
00:01:06,560 --> 00:01:12,920
So the first thing I want to mention is that, and this property is called "order", as you can imagine,

14
00:01:12,920 --> 00:01:16,370
what it sets is the order of your child items.

15
00:01:16,760 --> 00:01:19,790
Normally, this is the color of the rainbow.

16
00:01:19,850 --> 00:01:24,140
And you might remember the acronym ROYGBIV.

17
00:01:24,170 --> 00:01:26,870
Red, orange, yellow, green, blue, indigo, violet.

18
00:01:27,080 --> 00:01:33,710
Now, funnily enough, when I learned the rainbow, for some reason in my mind, blue and indigo were

19
00:01:33,710 --> 00:01:35,960
always the other way round.

20
00:01:36,530 --> 00:01:40,130
What if you wanted to rearrange these colors of the rainbow?

21
00:01:40,160 --> 00:01:44,420
Well, you would use the order property. By default,

22
00:01:44,420 --> 00:01:51,410
everything has an order of 0, so they're arranged by their order in the HTML.

23
00:01:51,440 --> 00:01:56,840
The red div is above the orange div and this is where the order comes from.

24
00:01:57,440 --> 00:01:59,030
What if you wanted to change that?

25
00:01:59,030 --> 00:02:01,070
Well, you could set the order.

26
00:02:01,070 --> 00:02:12,680
For example, if I selected the green div and I said, well, let's set its order property to 1.

27
00:02:12,710 --> 00:02:17,780
Well, immediately it's going to go right to the end of the Flexbox.

28
00:02:17,780 --> 00:02:20,420
It's going to be the one at the end.

29
00:02:20,450 --> 00:02:26,870
Now you could change that to 1 or you could have it as 5 or 10 or 20, whatever it is,

30
00:02:26,900 --> 00:02:33,410
as long as there's nothing set between that number and any of these other ones which are all defaulting

31
00:02:33,440 --> 00:02:37,040
to 0, then it's just going to look at which one's bigger, right?

32
00:02:37,070 --> 00:02:38,330
10 is bigger than 0.

33
00:02:38,330 --> 00:02:40,050
So 10 is going to go here.

34
00:02:40,050 --> 00:02:44,460
But if this was nine, then obviously 10 is greater than 9.

35
00:02:44,460 --> 00:02:46,230
9 is greater than 0.

36
00:02:46,320 --> 00:02:52,170
But say this was, I don't know, 20, then the 20 is going to get moved over here.

37
00:02:52,170 --> 00:03:01,410
So this is just a really easy way of picking out a specific element that is a Flexbox item and then

38
00:03:01,410 --> 00:03:07,440
setting the order property on it to be whichever it is you want to be to set up the order.

39
00:03:07,440 --> 00:03:09,240
So pretty simple so far.

40
00:03:09,750 --> 00:03:14,520
The next one I want to mention is something called the "flex-wrap" property,

41
00:03:14,520 --> 00:03:20,730
and this is really useful when you run out of space on the horizontal.

42
00:03:20,730 --> 00:03:24,450
Here we've got a row-based Flexbox.

43
00:03:24,660 --> 00:03:27,300
The main axis is from left to right.

44
00:03:27,330 --> 00:03:31,020
New items gets added on here at the right.

45
00:03:31,320 --> 00:03:37,860
But what happens if you have too many items or some of these items are a bit longer?

46
00:03:37,860 --> 00:03:40,920
Well, it's just going to be pushed to the end.

47
00:03:40,920 --> 00:03:46,800
And once we run out of space, it's not going to go on to the next line.

48
00:03:47,040 --> 00:03:56,550
This is the default behavior of Flexbox and the flex-wrap property is normally set to nowrap.

49
00:03:56,580 --> 00:04:04,680
Don't ask me why there is no hyphen between no and wrap like a good CSS value should be,

50
00:04:04,680 --> 00:04:06,540
but this is just how it is.

51
00:04:06,570 --> 00:04:13,170
And every single time I look at that property, I always see the words now wrap and I think about Snoop

52
00:04:13,170 --> 00:04:15,840
Dogg rapping to my Flexbox,

53
00:04:15,840 --> 00:04:18,360
but remember, no hyphen,

54
00:04:18,360 --> 00:04:20,459
that's just the default behavior.

55
00:04:21,300 --> 00:04:26,430
Let's say we have a new item and everything is set to nowrap,

56
00:04:26,460 --> 00:04:32,220
then it's just going to continue pushing until you can't collapse any of these items anymore and things

57
00:04:32,220 --> 00:04:34,770
get pushed off the page.

58
00:04:34,890 --> 00:04:43,610
Now you can change this property to wrap instead, but this is not a very responsive layout because

59
00:04:43,610 --> 00:04:49,460
when you shrink the width of your window, then all the items that don't fit are going to be pushed

60
00:04:49,490 --> 00:04:52,400
off the screen and the user won't be able to see it.

61
00:04:52,670 --> 00:04:59,540
If you want this to actually continue on to the next line instead of being invisible, then you could

62
00:04:59,540 --> 00:05:04,220
change this property flex-wrap to wrap instead.

63
00:05:04,220 --> 00:05:13,370
And what this will do is it'll move all the elements that don't have enough space to fit in its full

64
00:05:13,370 --> 00:05:16,790
minimum width onto the top line.

65
00:05:16,790 --> 00:05:21,320
It'll just go to the next line and continue wrapping.

66
00:05:21,320 --> 00:05:26,570
Now remember this flex-wrap is a property on the parent,

67
00:05:26,570 --> 00:05:36,050
so this is set onto the Flexbox container itself and it tells how all of the children should behave,

68
00:05:36,050 --> 00:05:37,910
namely, they should wrap around.

69
00:05:38,960 --> 00:05:44,180
Now, it's a really good idea to play around with some of these properties to see how they work, which

70
00:05:44,180 --> 00:05:51,860
is why I've created a demo website for you at https://appbrewery.github.io/flex-layout/

71
00:05:52,070 --> 00:05:58,880
So if you go to this website, you'll see we've got our rainbow colors and we've got some selectors

72
00:05:58,880 --> 00:05:59,780
down here.

73
00:05:59,900 --> 00:06:05,030
We just learned about flex-wrap, which can be changed on the container,

74
00:06:05,030 --> 00:06:13,100
and the container is this orange box that you see around the entire border here.

75
00:06:13,490 --> 00:06:23,030
If we turned this container into, say, a flex-wrap: wrap, then you can see what will happen is when

76
00:06:23,030 --> 00:06:33,470
I decrease the width of the screen, all of those child flex items go on to the next line, which is

77
00:06:33,470 --> 00:06:34,370
pretty neat.

78
00:06:35,030 --> 00:06:40,940
Now, there's also something called wrap-reverse, and it means that things are wrapped, but it goes

79
00:06:40,940 --> 00:06:48,020
from the bottom-right corner to the top-left corner instead of the normal version, which is from the

80
00:06:48,020 --> 00:06:51,320
top-left to the bottom-right.

81
00:06:51,650 --> 00:06:59,150
It's sort of like an axis, I guess because we're now in two dimensions when we're wrapping. Have

82
00:06:59,150 --> 00:07:03,180
a play around with that and then once you're done, let's learn about another property.

83
00:07:03,200 --> 00:07:10,160
This one is called "justify-content", and again, it's set on the parent container.

84
00:07:10,760 --> 00:07:19,040
Justify- content basically sets the distribution of our items along the main axis.

85
00:07:19,250 --> 00:07:23,120
This concept of main axis and cross axis is going to come back,

86
00:07:23,120 --> 00:07:28,910
but remember what we learned when we learned about the flex-direction. When we have a row, the main

87
00:07:28,910 --> 00:07:33,320
axis is from left to right and the cross axis is from top to bottom.

88
00:07:33,320 --> 00:07:37,700
So here we have a row based Flexbox.

89
00:07:37,700 --> 00:07:39,420
So that's how it's set up.

90
00:07:39,420 --> 00:07:43,830
And if it was a column based setup, then the main and the cross axis would flip.

91
00:07:44,520 --> 00:07:52,530
In this particular example, if we set the justify-content to flex-start, then this is exactly what

92
00:07:52,530 --> 00:07:53,270
you're going to see,

93
00:07:53,280 --> 00:07:57,840
everything is going to be bunched up to the left.

94
00:07:57,840 --> 00:08:04,710
And on the opposite end of that is flex- end where everything gets bunched up all to the end.

95
00:08:04,710 --> 00:08:13,320
And this is of course provided that when all the items are expanded to their maximum width, there is

96
00:08:13,320 --> 00:08:18,090
still space left for us to actually justify the content.

97
00:08:18,120 --> 00:08:24,060
If all the items have already taken up all this space, then this is not going to behave like this.

98
00:08:24,660 --> 00:08:32,580
Now the next one is justify-content: center, which is a pretty easy way of centering items in CSS. Compared

99
00:08:32,580 --> 00:08:36,809
to all of the other ways that we can center using traditional CSS,

100
00:08:36,840 --> 00:08:42,240
t his is a really, really almost like a godsend of a property.

101
00:08:42,360 --> 00:08:45,330
Very easy to horizontally center,

102
00:08:45,330 --> 00:08:50,430
or if you had the main axis going that way, you could vertically center as well.

103
00:08:51,300 --> 00:08:56,940
And then there's also different properties which allow you to have spacing between the different elements.

104
00:08:56,940 --> 00:09:01,530
And this is something that's used really commonly because when you're creating a website layout, you

105
00:09:01,530 --> 00:09:08,340
kind of want everything to use up the available space and create some gaps between each other to distribute.

106
00:09:08,880 --> 00:09:17,730
Coming back to our demo website on flex layout, then if we take a look at the Justify Content, you

107
00:09:17,730 --> 00:09:23,160
can see we've got Flex Start, Flex End, and I want you to just play around with some of these different

108
00:09:23,160 --> 00:09:23,970
versions.

109
00:09:23,970 --> 00:09:31,720
So Space Between makes sure that the first and last items are stuck to the edges of the container and

110
00:09:31,720 --> 00:09:39,700
then Space Around makes sure that this gap between the left and the right, and the center, add up to the

111
00:09:39,700 --> 00:09:45,000
space between each of the items and then there is Space Evenly, where each of the gaps are equal.

112
00:09:45,010 --> 00:09:50,710
So Flexbox does all of the math and calculations for us in order to achieve the layout that we want,

113
00:09:50,710 --> 00:09:56,200
and if you play around with some of these different versions, then you can see what is it that you

114
00:09:56,200 --> 00:10:01,210
want to achieve and which value you'll need to set for Justify Content.

115
00:10:02,440 --> 00:10:11,470
The next property is called "align-items" and align-items is a little bit different from justify items,

116
00:10:11,470 --> 00:10:15,400
even though some of the values might seem really similar.

117
00:10:15,580 --> 00:10:19,990
This is the position of the item,

118
00:10:19,990 --> 00:10:22,630
so remember, this is a row-based Flexbox.

119
00:10:22,630 --> 00:10:33,410
So here is our main axis and this is what we use justify-content to set the distribution.

120
00:10:33,430 --> 00:10:43,120
Now, in this case, we've got align-items which actually sets the distribution along the cross-axis.

121
00:10:44,020 --> 00:10:48,520
And again, this is a property that's set on our container.

122
00:10:49,220 --> 00:10:58,070
But if you notice here, our container is only taking up the height of our items. For align-items to

123
00:10:58,070 --> 00:11:03,460
really work, we actually need to set the height of the container.

124
00:11:03,470 --> 00:11:11,630
So in this case, we're setting it to 70vh and vh is short for viewport height.

125
00:11:11,720 --> 00:11:16,910
It's basically the height of the window that you're viewing the page.

126
00:11:17,000 --> 00:11:23,480
If this was the window size, then this would be 100vh,

127
00:11:23,690 --> 00:11:31,070
and then if we're setting it to, this is not quite 70, this is more like maybe 60, but this height

128
00:11:31,100 --> 00:11:34,820
is what we're setting when we set the height of our container.

129
00:11:34,820 --> 00:11:40,910
So once our container is a little bit bigger, then we actually have the ability to align our items,

130
00:11:41,030 --> 00:11:41,900
align-items: flex-start

131
00:11:41,900 --> 00:11:49,500
is going to make it all bunch up to the top and then we've got flex-end, which makes everything

132
00:11:49,500 --> 00:11:51,000
bunch up to the bottom.

133
00:11:51,000 --> 00:11:59,910
And similarly to justify content, we've got center and we've also got some other stuff. To demonstrate

134
00:11:59,910 --> 00:12:00,810
align-items,

135
00:12:00,810 --> 00:12:07,230
I want you to change the Flex Wrap back to No Wrap, if you've changed this, and then if you see Flex Start,

136
00:12:07,230 --> 00:12:17,340
Flex End, Center, Baseline or Stretch, they all work pretty much as you would expect.

137
00:12:17,370 --> 00:12:23,970
Now, if Wrap was enabled, then you're going to see that the behavior is not going to be quite what

138
00:12:23,970 --> 00:12:24,720
you expect.

139
00:12:24,720 --> 00:12:28,470
And we're going to talk about this a little bit later on when we talk about Align Content.

140
00:12:28,470 --> 00:12:34,890
But for now, keep the Wrap set to No Wrap and then play around with Align Items.

141
00:12:36,610 --> 00:12:42,530
Now, what if you wanted to align everything in the container to the center?

142
00:12:42,550 --> 00:12:49,150
So you use align-items: center, but then you wanted one particular item,

143
00:12:49,150 --> 00:12:52,510
for example this one, to be right at the top,

144
00:12:52,540 --> 00:12:56,030
well, it would need a different align value, right?

145
00:12:56,050 --> 00:13:03,220
In this case, what you can do is all of these properties that we've set over here are on the container,

146
00:13:03,220 --> 00:13:04,780
so on the parent.

147
00:13:05,080 --> 00:13:14,560
But you can reach into the actual item itself and set a property called "align-self".

148
00:13:14,590 --> 00:13:20,620
So this is saying let's be an independent item and let's think for ourselves,

149
00:13:20,740 --> 00:13:27,760
if we set this property to start or end or whichever it is that you want, then it'll actually make

150
00:13:27,760 --> 00:13:32,500
this item separate from the groupthink and do its own thing.

151
00:13:33,130 --> 00:13:37,520
At this point, you might already be a little bit overwhelmed by all of the different options,

152
00:13:37,520 --> 00:13:39,620
you think, "Oh, what if I don't remember all of these?"

153
00:13:39,650 --> 00:13:41,480
"Do I have to memorize everything?"

154
00:13:41,480 --> 00:13:42,320
No.

155
00:13:42,320 --> 00:13:43,790
We are programmers.

156
00:13:43,790 --> 00:13:50,390
We don't memorize anything because we have the internet and the computer at our fingertips.

157
00:13:50,510 --> 00:13:59,450
A good resource I want to point you to is the CSS Flexbox cheat sheet from CSS tricks, and I will link

158
00:13:59,450 --> 00:14:03,110
to it in the course resources for this lesson.

159
00:14:03,110 --> 00:14:09,560
So you can either download the entire poster or you can just look through it in the web page.

160
00:14:09,740 --> 00:14:15,500
Notice how they differentiate between properties for the parent and the properties for the children.

161
00:14:15,650 --> 00:14:21,170
When we look at something that we've talked about just now, for example, flex-wrap, it tells you

162
00:14:21,170 --> 00:14:23,390
all of the different possible options.

163
00:14:23,390 --> 00:14:30,520
So you wouldn't set all three, you would pick one and it tells you what each of these values will do.

164
00:14:30,530 --> 00:14:33,620
Similarly, we've got our justify-content

165
00:14:33,620 --> 00:14:40,220
it shows you what each of them does and also describes what each of them does, and then align-items.

166
00:14:40,220 --> 00:14:46,640
And then what we saw just now was a property for the children, which is the align-self property.

167
00:14:46,640 --> 00:14:51,050
And you can see all of the different possible variations that you could use.

168
00:14:51,980 --> 00:14:56,540
Now, the final property I want to talk about today is the "align-content".

169
00:14:56,780 --> 00:15:06,380
And I said I would come back to this, align-content is similar to align-items, but it only works when

170
00:15:06,380 --> 00:15:10,370
you have the flex-wrap set to wrap.

171
00:15:10,670 --> 00:15:20,150
So when you've made your items wrap and then you want to specify how the content should align, then

172
00:15:20,150 --> 00:15:22,580
that's when you would set align content.

173
00:15:22,910 --> 00:15:29,570
If we applied, align-content to center and we made our Flexbox wrap, then when the width of our window

174
00:15:29,570 --> 00:15:33,650
reduces, everything will bunch up together.

175
00:15:33,650 --> 00:15:38,420
If they need a second line, they'll go on to the second line and then it's going to look at this

176
00:15:38,420 --> 00:15:43,310
align-content value to see how it should be spaced on the screen.

177
00:15:44,000 --> 00:15:48,110
One of the things you might be wondering at this stage, well, what exactly is the difference between

178
00:15:48,110 --> 00:15:51,470
Align Items and Align Content?

179
00:15:51,470 --> 00:15:57,800
Because when everything is Nowrap, when we set Align Content, it doesn't really do anything,

180
00:15:57,800 --> 00:16:06,020
but when we set our items to Wrap and then there's not enough width to have everything on one line,

181
00:16:06,020 --> 00:16:12,890
that's when our Align Content starts working so we can set it to Center, we can set it to Flex End,

182
00:16:12,890 --> 00:16:19,970
to Flex Start. Have a play around with the different properties and take a look at the cheat sheet

183
00:16:19,970 --> 00:16:20,600
here.

184
00:16:20,600 --> 00:16:26,120
Remember, you don't need to memorize anything as long as you know where to go and find help.

185
00:16:26,120 --> 00:16:31,910
So when you want to align something and you don't remember what justify-content does, go over here,

186
00:16:31,910 --> 00:16:35,030
just read the different values and pick the one that you want.

187
00:16:35,030 --> 00:16:39,580
And I'm a really big believer in the sort of just in time recap.

188
00:16:39,580 --> 00:16:45,280
So when you're learning stuff like you are now, I'm trying to tell you all the things that are possible

189
00:16:45,280 --> 00:16:49,450
and then when you actually need to apply it for your own projects, you remember the fact that this

190
00:16:49,450 --> 00:16:55,030
is possible and all you need to do is just to refresh yourself on how to do it precisely.

191
00:16:55,270 --> 00:16:58,960
And that way you don't have to memorize any of the things.

192
00:16:59,320 --> 00:17:06,099
Now, in order to complete this lesson, I want you to complete the Flex Box Froggy game.

193
00:17:06,109 --> 00:17:12,609
This is an interactive game and it's a really, really brilliant concept created by Thomas Park where

194
00:17:12,609 --> 00:17:18,730
you can apply your knowledge of everything that you've learned just now in order to move the frog to

195
00:17:18,730 --> 00:17:19,750
the lily pad.

196
00:17:19,990 --> 00:17:24,150
Head over to https://appbrewery.github.io/flexboxfroggy/

197
00:17:24,160 --> 00:17:30,970
And I want you to go into the settings and I want you to go ahead and select Intermediate.

198
00:17:31,000 --> 00:17:35,530
Now, notice here, there are also different languages if you need that.

199
00:17:36,120 --> 00:17:39,950
You can also change the colorblind mode to on or off.

200
00:17:39,960 --> 00:17:45,960
But I want you to complete the challenges in intermediate mode. So there's no directions,

201
00:17:45,960 --> 00:17:51,930
but remember, you have the cheat sheet and you have what you've learned in this lesson.

202
00:17:51,930 --> 00:17:59,370
And the goal is to write the code that's going to move our frog onto the lily pad.

203
00:17:59,460 --> 00:18:02,970
So, for example, in this case we've got display: flex,

204
00:18:02,970 --> 00:18:07,940
so we know that this is a default row-based Flexbox.

205
00:18:07,950 --> 00:18:17,460
If I want to move my frog from the start to the end, all I have to do is use justify-content and set

206
00:18:17,460 --> 00:18:21,420
it to flex-end.

207
00:18:21,510 --> 00:18:27,720
And once I've done that, you can see my frog is on the lily pad and the next button becomes active.

208
00:18:27,780 --> 00:18:28,950
That's just a demo.

209
00:18:28,980 --> 00:18:30,930
The rest you're going to have to figure out yourself.

210
00:18:30,930 --> 00:18:36,090
If you get stuck, you can go back to the beginner difficulty where they're going to give you a lot

211
00:18:36,180 --> 00:18:36,990
more hints.

212
00:18:36,990 --> 00:18:41,100
But ideally I want you to stay on intermediate with no directions.

213
00:18:41,100 --> 00:18:49,380
Do as a professional developer would, to read the, either MDN Docs or in this case probably easier to

214
00:18:49,380 --> 00:18:55,560
just go to the cheat sheet and figure out what will help you and maybe even use the demo page to help

215
00:18:55,560 --> 00:18:58,650
you figure out what it is you need in order to move your frogs.

216
00:18:59,250 --> 00:19:05,550
Go ahead and try and complete all of the different levels and if you get stuck, you can always change

217
00:19:05,550 --> 00:19:10,800
the difficulty and you will probably be able to solve everything much more easily.

218
00:19:11,580 --> 00:19:14,130
Pause the video and give that a go now.

219
00:19:14,130 --> 00:19:19,290
And once you're done, head over to the next lesson where we're going to continue learning about how

220
00:19:19,290 --> 00:19:21,270
sizing works in Flexbox.

