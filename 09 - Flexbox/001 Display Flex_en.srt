1
00:00:00,650 --> 00:00:05,030
Hey, guys, welcome to this module on CSS, Flexbox.

2
00:00:05,030 --> 00:00:11,900
We're going to learn all about it, how it works and how we can use it to create complex, flexible

3
00:00:11,900 --> 00:00:14,900
layouts using this CSS tool.

4
00:00:15,530 --> 00:00:23,540
As we mentioned, a lot of the web layout was originally inspired by newspapers and magazine articles,

5
00:00:23,540 --> 00:00:29,120
which is where all these display: inline, display: block, float all comes from,

6
00:00:29,300 --> 00:00:35,540
and over the years, the layout of the web has become more and more complex to the extent where it's

7
00:00:35,540 --> 00:00:44,210
no longer really that similar to a magazine and a website has become far more complex and far more interactive.

8
00:00:44,420 --> 00:00:51,230
Over the years, there have been many ways of implementing HTML and CSS to layout a website.

9
00:00:51,320 --> 00:00:55,040
One of the earliest ways was actually using HTML.

10
00:00:55,070 --> 00:01:03,650
We had these things called tables, so you could create a "table" element with table rows (tr) and table data (td)

11
00:01:03,650 --> 00:01:09,170
to create something like this, a three column layout for your website.

12
00:01:09,170 --> 00:01:16,250
And if you set the width of these three columns to different amounts, then you can lay out your web

13
00:01:16,250 --> 00:01:21,020
page like this with three boxes or cards or whatever you like to call it.

14
00:01:21,350 --> 00:01:30,230
The table element is still very much in use in modern web design, but because it's in the HTML, it

15
00:01:30,230 --> 00:01:36,170
should really only be used when semantically you're actually trying to create a table.

16
00:01:36,170 --> 00:01:42,890
So in this case, if you were using this to represent some data, like I don't know how many car tires

17
00:01:42,890 --> 00:01:49,760
were sold on your website or how many visitors you had in May, then that is probably tabular data and

18
00:01:49,760 --> 00:01:52,640
should be represented with a table element.

19
00:01:52,640 --> 00:01:59,990
But if you're using table just the layout, the styling of your website, then this is very much a no

20
00:01:59,990 --> 00:02:02,790
no in modern web design.

21
00:02:02,880 --> 00:02:07,320
And as you'll see, there are much, much better tools to do this nowadays.

22
00:02:07,320 --> 00:02:09,120
So you're not left in the dark.

23
00:02:09,419 --> 00:02:16,710
After people stopped using tables for layout, they started using what we've explored previously, which

24
00:02:16,710 --> 00:02:19,950
is using the Display Property.

25
00:02:19,980 --> 00:02:27,060
For example, you could set three divs to have inline block so that they will all show up on the same

26
00:02:27,060 --> 00:02:27,810
line,

27
00:02:27,960 --> 00:02:35,400
and then if you set them to have a specific amount of width, then as long as there is enough for the

28
00:02:35,400 --> 00:02:41,190
entire horizontal, they will be stacked up next to each other like this in different columns.

29
00:02:41,280 --> 00:02:47,010
There are some problems with this though, because as you can see, the layout doesn't look great,

30
00:02:47,010 --> 00:02:47,340
right?

31
00:02:47,340 --> 00:02:51,030
Like, why are they not all on one line at the top?

32
00:02:51,030 --> 00:02:56,640
And in order to control this and move these blocks up and to have them all lined up, it's actually

33
00:02:56,640 --> 00:02:57,630
really fiddly.

34
00:02:57,630 --> 00:02:59,760
And it's quite a painful process.

35
00:02:59,760 --> 00:03:06,300
And people have undergone this process just in order to have a specific styling that they want.

36
00:03:06,330 --> 00:03:13,560
You could, for example, use position: absolute. So you could take these blocks out of the normal flow

37
00:03:13,560 --> 00:03:22,530
of HTML and instead have them be floating above the other content using absolute and then with absolute,

38
00:03:22,560 --> 00:03:26,130
you can of course set the how much you want it to go from the left.

39
00:03:26,130 --> 00:03:32,820
And then this way you can set up a relatively complex layout, but it's a very inflexible layout because

40
00:03:32,820 --> 00:03:38,670
as soon as anything else gets added to this, that's not absolute, say at the bottom, then you're going

41
00:03:38,670 --> 00:03:41,310
to have to fiddle around with it to get the right layout.

42
00:03:41,310 --> 00:03:46,110
And it's really not responsive and it's just not a great idea.

43
00:03:46,110 --> 00:03:50,280
But if you have no other tools, then a hammer is going to do everything, right?

44
00:03:50,280 --> 00:04:00,630
But we do have other tools and one of the most relied-on tools in the sort of 2005 to 2010 era, was using

45
00:04:00,660 --> 00:04:09,210
float and as we saw, float is a very useful tool for floating images to get text to wrap around it,

46
00:04:09,210 --> 00:04:14,490
but people realize that you can actually use float to create more complex layouts as well.

47
00:04:14,760 --> 00:04:20,100
For example, we could make all three of these float left so that they stack up next to each other.

48
00:04:20,130 --> 00:04:26,430
Alternatively, we could make something on the right, float to the right and we could have something

49
00:04:26,430 --> 00:04:27,300
float to the left.

50
00:04:27,300 --> 00:04:33,540
And as you saw before, we could clear a footer and use float and clear to basically create a more complex

51
00:04:33,540 --> 00:04:34,170
layout.

52
00:04:34,260 --> 00:04:39,060
And there are so many float related tips and hacks.

53
00:04:39,060 --> 00:04:44,400
For example, there's something called "The Clearfix Hack" and there's different hacks to use, float

54
00:04:44,400 --> 00:04:47,610
and clear to create complex layouts that you would want.

55
00:04:47,610 --> 00:04:54,870
But again, you know, it's kind of hacky and it's not that simple to reason about, especially

56
00:04:54,870 --> 00:04:57,330
when something goes wrong or something doesn't look quite right.

57
00:04:57,330 --> 00:04:59,010
It's really hard to fix.

58
00:04:59,510 --> 00:05:06,320
And I saw this great thing on puns, which you can Google for where they had this #titanic,

59
00:05:06,350 --> 00:05:07,010
float: none,

60
00:05:07,550 --> 00:05:13,430
that kind of describes how float is considered these days for complex layout.

61
00:05:13,460 --> 00:05:15,410
Don't use float for that.

62
00:05:15,770 --> 00:05:23,810
Float is great when you want to float an image to the left or the right of a block of text to wrap the

63
00:05:23,810 --> 00:05:25,100
text around it,

64
00:05:25,100 --> 00:05:29,570
but don't use floats for layout. Instead

65
00:05:29,570 --> 00:05:31,100
use something else like what

66
00:05:31,100 --> 00:05:38,300
we're going to explore Flexbox, Grid, Bootstrap, something that is designed specifically for creating

67
00:05:38,300 --> 00:05:40,430
an overall page structure.

68
00:05:40,760 --> 00:05:46,490
And within each of these blocks you could continue to use your float and your clear,

69
00:05:46,490 --> 00:05:53,630
but we're keeping to the original intent of that tool and we're not doing any sort of crazy hacks because

70
00:05:53,660 --> 00:06:00,500
Flexbox is also incredibly easy to use. In order to create that layout that we've been coveting using

71
00:06:00,500 --> 00:06:07,490
all these different tricks and different hacks, with Flexbox, all you need to do is to wrap your divs

72
00:06:07,490 --> 00:06:16,490
inside a container and then target that container in your CSS and set the display to "flex".

73
00:06:16,490 --> 00:06:18,290
That's pretty much it.

74
00:06:18,290 --> 00:06:24,860
All you need to do in order to get them to be displayed in columns like this, as you would expect on

75
00:06:24,860 --> 00:06:26,300
a modern website.

76
00:06:26,510 --> 00:06:32,390
Now it's also got these great additional properties like, for example, "gap", where you can add in

77
00:06:32,390 --> 00:06:37,790
a gap between each of these items and there's a whole lot more that we're going to cover in this module,

78
00:06:37,790 --> 00:06:44,030
and you're going to see just how flexible and easy it is to use Flexbox to create more complex layouts

79
00:06:44,060 --> 00:06:45,500
on our website.

80
00:06:45,940 --> 00:06:53,410
Now, one of the things that you might realize at this stage is this flex is set on the Display Property.

81
00:06:53,410 --> 00:07:00,640
And we know that previously we've looked at display: inline, display: block, display: inline-block

82
00:07:00,640 --> 00:07:04,780
and all of that and display: none.

83
00:07:05,290 --> 00:07:10,960
This particular set, I want you to think of it as a completely different system.

84
00:07:11,080 --> 00:07:16,140
When we're thinking about Flexbox, we have to throw all of this out of the window.

85
00:07:16,150 --> 00:07:21,430
That doesn't mean we're not going to use it, because as you see, websites still continue to use these

86
00:07:21,430 --> 00:07:22,300
different things,

87
00:07:22,300 --> 00:07:27,030
but when you make something flex, it no longer abides by any of these rules.

88
00:07:27,040 --> 00:07:30,850
Instead, it's a different system with different rules

89
00:07:30,850 --> 00:07:34,780
and we have to learn about it and think about it as a separate entity.

90
00:07:34,810 --> 00:07:42,700
And essentially what happens when we declare something display flex is we give a little bit of the control

91
00:07:42,730 --> 00:07:50,120
to Flexbox to layout our content in a reasonable and commonly desired way.

92
00:07:50,120 --> 00:07:56,360
But we have all of these different modifiers in order to tweak it, to have the exact layout that we

93
00:07:56,360 --> 00:07:56,930
want.

94
00:07:57,530 --> 00:08:02,870
Again, just to reiterate, remember previously we mentioned that different elements by default have

95
00:08:02,870 --> 00:08:04,640
different display values,

96
00:08:04,670 --> 00:08:08,270
a div is by default going to be full width block.

97
00:08:08,300 --> 00:08:11,930
A span is by default going to be an inline element.

98
00:08:11,960 --> 00:08:19,760
Well, when you use Flexbox and you enclose all of the elements that you want to display inside a flexible

99
00:08:19,760 --> 00:08:26,600
container, then what happens is all of these previous display values will be ignored,

100
00:08:26,600 --> 00:08:35,059
and instead, we're going to have everything laid out by Flexbox. And the width of each of the elements

101
00:08:35,059 --> 00:08:40,190
inside the Flexbox will normally be based on the content size.

102
00:08:40,190 --> 00:08:45,800
So it's going to try and let you have all of your content displayed in one line.

103
00:08:45,800 --> 00:08:50,690
And it doesn't matter what type of element you've got inside the Flexbox,

104
00:08:50,780 --> 00:08:54,080
it's going to apply the Flexbox rules to each of them.

105
00:08:54,530 --> 00:09:00,440
As we saw, we could use that property called gap in order to add a gap.

106
00:09:00,440 --> 00:09:06,980
So you could, for example, set it to be 10px, which would be pretty static.

107
00:09:06,980 --> 00:09:12,620
Or if you want it to be more responsive, you could set it to 1rem, which remember from previous

108
00:09:12,620 --> 00:09:19,970
lessons we learned is a unit that is going to adapt based on the top-level size of your content.

109
00:09:20,120 --> 00:09:31,880
By default, when you declare a container to be display: flex, it's going to create a container that

110
00:09:31,880 --> 00:09:35,210
is going to be actually more or less like a block element.

111
00:09:35,210 --> 00:09:38,600
It's going to be 100% full width.

112
00:09:38,600 --> 00:09:44,960
But there's also this thing where instead of setting the container to be display: flex, you can actually

113
00:09:44,990 --> 00:09:52,550
set it to be display: inline-flex, and similarly to the 
inline-block,

114
00:09:52,580 --> 00:10:01,040
what it does is it allows this Flexbox to occupy as much space as it needs, but it means that other

115
00:10:01,040 --> 00:10:04,640
things can also go and occupy that same line.

116
00:10:04,640 --> 00:10:09,620
So this is just two different versions of creating a Flexbox container.

117
00:10:09,740 --> 00:10:16,850
So in this lesson, we looked very briefly at what happens when you set a container to be display: flex.

118
00:10:16,850 --> 00:10:22,970
So now we're going to try and exercise and see if we've taken on some of the ideas that we've learned

119
00:10:22,970 --> 00:10:24,140
in this lesson.

120
00:10:24,350 --> 00:10:31,310
Go ahead and download the starting folder and extract it and open it inside VS Code, select index.html

121
00:10:31,310 --> 00:10:34,430
and go ahead and show it in preview mode.

122
00:10:34,580 --> 00:10:40,940
You can see I've got a couple of different page layout methods that I mentioned in the lesson and it's

123
00:10:40,940 --> 00:10:43,220
linked to in this home page.

124
00:10:43,220 --> 00:10:50,000
So I showed you how an HTML table would look like and you can look at the code for that layout by going

125
00:10:50,000 --> 00:10:53,000
over to html-table.html.

126
00:10:53,030 --> 00:11:00,530
You can see we've set different values on the table data or the actual table itself and the different

127
00:11:00,530 --> 00:11:01,820
table rows.

128
00:11:01,820 --> 00:11:10,100
And we've created a reasonable sort of layout and then you can see how we can create a similar layout

129
00:11:10,130 --> 00:11:15,770
using inline-block and how this is also more or less responsive.

130
00:11:15,800 --> 00:11:22,040
We've set different widths, but you can see how the layout is actually all defaulting down to squish

131
00:11:22,040 --> 00:11:22,850
at the bottom.

132
00:11:22,850 --> 00:11:29,150
And I want you to just explore some of these different ways of laying out content on a web page.

133
00:11:29,480 --> 00:11:37,490
Now, finally, I want you to take a look at flex.html and see how easy it was to create that layout and

134
00:11:37,490 --> 00:11:40,910
how few lines of code it actually required.

135
00:11:41,150 --> 00:11:45,500
Now, once you've done that, it's time for your challenge, which

136
00:11:45,580 --> 00:11:53,230
is to take the index.html page which looks like this, and it's created using a whole bunch of

137
00:11:53,230 --> 00:11:54,460
list items.

138
00:11:54,490 --> 00:11:59,890
Now I've gotten rid of the bullet points by setting list style to none, which you can switch on and

139
00:11:59,920 --> 00:12:01,500
off to see what happens,

140
00:12:01,510 --> 00:12:04,420
and this basically just gets rid of the bullet points,

141
00:12:04,420 --> 00:12:07,780
but I want you to turn this into a navigation bar.

142
00:12:07,780 --> 00:12:10,570
So I want everything to be on the horizontal.

143
00:12:10,570 --> 00:12:14,670
And if you take a look inside the goal image, this is what you're looking for.

144
00:12:14,680 --> 00:12:20,680
So you want all of these things to go up so that they are kind of laid out like this.

145
00:12:20,680 --> 00:12:22,600
You want to have a gap between them.

146
00:12:22,600 --> 00:12:30,010
You can set how big this gap you want it to be, but essentially this is the sort of outcome you're looking

147
00:12:30,010 --> 00:12:33,430
for, and I want you to do it using Flexbox.

148
00:12:33,700 --> 00:12:37,900
Pause the video now and see if you can complete this challenge.

149
00:12:40,190 --> 00:12:40,580
All right.

150
00:12:40,580 --> 00:12:44,360
So this should be a relatively simple challenge.

151
00:12:44,360 --> 00:12:49,190
So we've got our preview on the right and then we've got our index on the left.

152
00:12:49,220 --> 00:12:56,900
If you remember, Flexbox is declared on the container that contains all the elements that you want

153
00:12:56,900 --> 00:12:57,760
to flex.

154
00:12:57,770 --> 00:13:03,260
So in this case, we've got a div with a class of ".container" that contains all the things we want.

155
00:13:03,380 --> 00:13:11,120
Let's go into this class selector and then go ahead and change the display to flex.

156
00:13:11,120 --> 00:13:18,980
And you can see almost immediately everything is now on the same line, looking pretty much like a

157
00:13:19,010 --> 00:13:21,260
nav-bar that you would see out in the wild.

158
00:13:21,380 --> 00:13:26,120
The only thing we need to do is add a little bit of a gap between each of those items.

159
00:13:26,120 --> 00:13:34,220
So we could either add a 10px gap, which looks pretty good, or you could use the rem system.

160
00:13:34,220 --> 00:13:37,730
If you don't remember what the rem is about, go back,

161
00:13:37,760 --> 00:13:44,130
there is a lesson where we covered font sizes where we talk about this in more detail, but no matter

162
00:13:44,130 --> 00:13:48,690
which way you do, you should be able to achieve this layout relatively easily.

163
00:13:48,780 --> 00:13:54,510
And if you want to take a look at the solution, you can see as well that the only thing that's really

164
00:13:54,510 --> 00:14:00,150
added are these two things in order to achieve this final goal outcome.

165
00:14:00,690 --> 00:14:08,310
Hopefully, you managed to do that and you managed to see what declaring display as Flex does to our HTML

166
00:14:08,340 --> 00:14:09,120
elements.

167
00:14:09,120 --> 00:14:15,300
And in the next lesson, we're going to dive deeper into Flexbox and we're going to learn more about

168
00:14:15,300 --> 00:14:19,070
the "Flexbox axis" and the "direction of flex."

169
00:14:19,080 --> 00:14:21,450
So for all of that and more, I'll see you there.

