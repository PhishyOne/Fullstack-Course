1
00:00:00,410 --> 00:00:03,350
Hey guys, welcome to a brand new module.

2
00:00:03,350 --> 00:00:07,400
In this module we're going to be learning all about data persistence.

3
00:00:07,400 --> 00:00:09,580
And that means databases.

4
00:00:09,590 --> 00:00:15,320
In the last module when you built your own API, you might have noticed a peculiar thing.

5
00:00:15,440 --> 00:00:18,050
You might have created some new blog posts.

6
00:00:18,080 --> 00:00:18,590
Right?

7
00:00:18,590 --> 00:00:27,710
And as soon as you restarted your server, if you stored any of those blog posts in your variable,

8
00:00:27,710 --> 00:00:34,250
then you'll notice that those blog posts completely get wiped and returned to their original state.

9
00:00:34,340 --> 00:00:35,510
Why is that?

10
00:00:35,510 --> 00:00:40,430
Well, that's because your data is held in a temporary form of memory.

11
00:00:40,430 --> 00:00:45,190
It's only valid as long as your server state doesn't get refreshed.

12
00:00:45,200 --> 00:00:48,170
So how can we persist our data?

13
00:00:48,500 --> 00:00:54,620
Well, then we would need some form of data storage and not something like this.

14
00:00:54,860 --> 00:01:03,650
This is a actual memory disk that I found in the computer Museum in Bletchley Park, where they had

15
00:01:03,650 --> 00:01:05,120
this gigantic thing.

16
00:01:05,120 --> 00:01:08,510
You can see how big it is relative to my face.

17
00:01:08,930 --> 00:01:14,690
And believe it or not, this entire thing only stores four megabytes.

18
00:01:14,720 --> 00:01:22,730
It's crazy how far we have come in terms of technology, but under the hood, these things still work

19
00:01:22,730 --> 00:01:23,990
more or less the same.

20
00:01:23,990 --> 00:01:30,560
We have ways of putting data into a permanent state of memory.

21
00:01:30,560 --> 00:01:39,020
So in these cases, which are magnetic based memory storage, what you have is an electromagnet that

22
00:01:39,020 --> 00:01:44,840
can generate a polarity in this electromagnet.

23
00:01:44,840 --> 00:01:53,690
And as you have a strip of little magnets moving around, by changing the polarity, by changing the

24
00:01:53,690 --> 00:01:59,240
current that's going through the electromagnet, we can flip these poles around so we can make this

25
00:01:59,240 --> 00:02:08,840
part north, and then this part south, and then this part south again, and this part maybe north.

26
00:02:08,840 --> 00:02:14,210
And essentially what happens is when you read this data and you look at all the little magnets and you

27
00:02:14,210 --> 00:02:22,100
look at the polarity of it, the computer is able to tell what the bits that are stored on this.

28
00:02:22,130 --> 00:02:30,770
For example, if you have two magnets that are of opposite directions, so this north south are flipped

29
00:02:30,770 --> 00:02:33,620
from each other, then this would be a one.

30
00:02:33,620 --> 00:02:39,890
And if they are the same, it doesn't matter which direction they are counted as a zero.

31
00:02:39,890 --> 00:02:48,380
And you can basically go through this entire strip of memory and store data in bits and bytes by changing

32
00:02:48,380 --> 00:02:50,510
the magnetic polarity.

33
00:02:50,510 --> 00:02:53,600
So this is actually what I learned at this museum.

34
00:02:53,600 --> 00:02:59,960
If you're ever in London and you have a minute to go up north on a train, I highly recommend going

35
00:02:59,990 --> 00:03:02,450
to the Computer Museum and Bletchley Park.

36
00:03:03,290 --> 00:03:11,450
But going back to data storage, what we need essentially is a form of data storage that prevents our

37
00:03:11,450 --> 00:03:17,270
variables, which are held in temporary memory, from going poof.

38
00:03:17,720 --> 00:03:21,170
And that means we have to talk about databases.

39
00:03:21,260 --> 00:03:27,140
Now there's a whole bunch of different types of databases, but the main types that you'll hear about

40
00:03:27,140 --> 00:03:34,100
is SQL database and a NoSQL type database.

41
00:03:34,670 --> 00:03:37,190
SQL stands for Structured

42
00:03:38,930 --> 00:03:42,320
Query Language.

43
00:03:43,040 --> 00:03:50,330
And if you will, it's sort of like a programming language that allows you to query a database that

44
00:03:50,330 --> 00:03:53,000
is in this particular structured format.

45
00:03:53,030 --> 00:03:58,940
So we're already getting close to discovering the differences between these two types of databases,

46
00:03:58,940 --> 00:04:01,790
structured and not structured.

47
00:04:01,820 --> 00:04:05,780
The NoSQL stands for well, no SQL.

48
00:04:05,810 --> 00:04:12,920
But also some people call it not only SQL, but let's take a closer look at what makes each of these

49
00:04:12,920 --> 00:04:14,600
types of databases special.

50
00:04:14,630 --> 00:04:16,610
Let's start with SQL database.

51
00:04:16,610 --> 00:04:23,870
This is the OG, the Big Daddy, the database that has been around for years and years ever since we

52
00:04:23,870 --> 00:04:25,820
started needing to organize data.

53
00:04:25,850 --> 00:04:35,360
These types of databases have been around, and the big principle of SQL databases is that structurally,

54
00:04:35,390 --> 00:04:38,750
data is stored in tables.

55
00:04:38,780 --> 00:04:42,800
For example, you have a website and you need to keep track of your users.

56
00:04:42,800 --> 00:04:50,330
So you build a users table and beforehand you have to anticipate what do you need to store in this table.

57
00:04:50,330 --> 00:04:55,070
So you probably need to store their name, their password, their email.

58
00:04:55,070 --> 00:05:02,840
All of these fields that you start creating determine the structure and size of this table.

59
00:05:02,930 --> 00:05:09,440
Once you've created all of the columns, then you can populate it line by line by adding new records.

60
00:05:09,440 --> 00:05:14,330
So you sign up a new user, you add a new record and you store their data.

61
00:05:14,570 --> 00:05:21,770
One of the greatest things about SQL type databases is their ability to form relationships.

62
00:05:21,770 --> 00:05:28,940
And this is why you'll hear another name for this type of database is a relational database.

63
00:05:29,060 --> 00:05:32,720
And this is because let's say we have a user here.

64
00:05:32,720 --> 00:05:42,050
Let's say it's me and I have a password, and I have an email and I create a blog post.

65
00:05:42,050 --> 00:05:48,350
So then in this case, we've already created the record in the users table of this user me.

66
00:05:48,350 --> 00:05:51,020
And now we're creating a new blog post.

67
00:05:51,020 --> 00:05:57,850
So in this blog post we have a title, we have a date of creation, and we have an author.

68
00:05:57,860 --> 00:06:06,500
And because this is an SQL database, it's incredibly easy to link up the relationship between that

69
00:06:06,500 --> 00:06:09,140
field and this record.

70
00:06:09,140 --> 00:06:17,450
So now we have a relationship and instead of creating one very long line of record, we can now have

71
00:06:17,450 --> 00:06:22,460
multiple records on another table that's linked to one user.

72
00:06:22,460 --> 00:06:28,850
So then you imagine I write a second post and you can link this also to me as a user.

73
00:06:28,850 --> 00:06:36,860
So then I can query all of the posts that I've written very easily by using the Structured Query language,

74
00:06:37,550 --> 00:06:44,330
some of the most popular types of SQL databases that you might have heard of is the Oracle Database,

75
00:06:44,330 --> 00:06:50,960
which is currently worldwide, one of the most used databases in large corporate organizations.

76
00:06:50,960 --> 00:06:58,250
But they do cost something like $50,000 as a starting plan.

77
00:06:58,250 --> 00:07:03,650
So we're not going to be looking into that until we're like a fortune 500 company or something.

78
00:07:03,650 --> 00:07:09,230
But there's also other ones like Postgres, MySQL, SQLite, et cetera.

79
00:07:09,230 --> 00:07:13,430
And there's a lot of different brands of databases out there.

80
00:07:14,150 --> 00:07:21,050
The difference is that some of these are open source, like Postgres, like SQL Lite, and some of them

81
00:07:21,050 --> 00:07:26,420
are not open source like Oracle or Microsoft SQL.

82
00:07:26,600 --> 00:07:30,590
So that's where the free and paid part comes in.

83
00:07:30,620 --> 00:07:33,680
That's a good thing to be aware of when you're doing your research.

84
00:07:34,640 --> 00:07:40,100
The other type of database that we mentioned are the NoSQL type databases.

85
00:07:40,220 --> 00:07:46,610
And these are characterized by one major advantage it's their flexibility.

86
00:07:46,640 --> 00:07:53,300
For example, if I created a document in almost like a Json format, which you're pretty familiar with

87
00:07:53,330 --> 00:07:55,730
by now, so I'm creating my new user.

88
00:07:55,730 --> 00:07:59,390
It has a name field, an email field, a password field.

89
00:07:59,390 --> 00:08:05,660
And just like with Json and just like with JavaScript objects, one of the greatest things about NoSQL

90
00:08:05,660 --> 00:08:14,000
databases is you're able to change the structure of your data afterwards without having to change the

91
00:08:14,000 --> 00:08:15,190
entire database.

92
00:08:15,200 --> 00:08:23,210
So this means that let's say I have a user here, and I decide that for this user and for this user

93
00:08:23,210 --> 00:08:27,260
only, I am going to give them an extra field.

94
00:08:27,260 --> 00:08:36,260
So for Angela and only for Angela, the user is going to have an extra field of favorite food and I'm

95
00:08:36,260 --> 00:08:38,000
going to store it as well.

96
00:08:38,030 --> 00:08:44,330
My favorite food is probably noodles, but I do love all the carbs.

97
00:08:44,330 --> 00:08:45,380
So.

98
00:08:46,100 --> 00:08:55,340
But anyways, this means that even if we had other users with a particular name, an email, a password,

99
00:08:55,340 --> 00:09:01,520
and no field of favorite food, so we didn't plan to have this particular field.

100
00:09:01,520 --> 00:09:09,480
We can modify our data on the fly, and this is what gives NoSQL databases their flexibility.

101
00:09:09,500 --> 00:09:16,760
They're not obliged to hold to the original structure of the table that was created at the time when

102
00:09:16,760 --> 00:09:20,120
you decided to build a users table.

103
00:09:20,880 --> 00:09:23,790
And you can see that this comes with a lot of advantages.

104
00:09:23,820 --> 00:09:26,610
It means that your database is more flexible.

105
00:09:26,610 --> 00:09:32,880
It means that as your product grows and you think of new things that you want to add to your storage,

106
00:09:32,880 --> 00:09:35,040
you can do that very flexibly.

107
00:09:35,640 --> 00:09:43,290
And NoSQL databases were really created in many ways to address some of the pains that people felt using

108
00:09:43,380 --> 00:09:44,830
SQL type databases.

109
00:09:44,850 --> 00:09:52,290
Firstly, the SQL language is probably not the most intuitive and requires learning, whereas NoSQL

110
00:09:52,320 --> 00:09:58,890
uses things such as key value pairs like what you see here, or document models where you store everything

111
00:09:58,890 --> 00:10:01,470
in a single document, just like a Json.

112
00:10:01,470 --> 00:10:04,920
And it kind of meant to make things a little bit easier.

113
00:10:05,040 --> 00:10:13,140
The other big idea, as I mentioned, is flexibility and moving away from this strict schema.

114
00:10:13,140 --> 00:10:17,430
So having to anticipate and plan your data ahead of time.

115
00:10:17,910 --> 00:10:22,570
And the other thing that they really wanted to address is scalability.

116
00:10:22,590 --> 00:10:30,630
So for your data to be able to scale horizontally and vertically, so vertically means having more records

117
00:10:30,630 --> 00:10:33,030
and horizontally means having more fields.

118
00:10:33,030 --> 00:10:40,680
So just as you saw now, it's very easy to add another field to a database that's built on NoSQL just

119
00:10:40,680 --> 00:10:43,440
as easily as it is to add a field in a Json.

120
00:10:43,560 --> 00:10:52,940
Some of the most popular NoSQL databases that you might come across include MongoDB, Reedus, or Reedus.

121
00:10:52,950 --> 00:10:55,170
I'm never really sure how to pronounce this one.

122
00:10:55,170 --> 00:10:56,850
And DynamoDB.

123
00:10:59,110 --> 00:11:06,160
Some of these are open source, such as readers, and others are run by companies, for example MongoDB

124
00:11:06,160 --> 00:11:07,450
and DynamoDB.

125
00:11:07,720 --> 00:11:13,030
DynamoDB is actually run by Amazon in terms of free and paid open source.

126
00:11:13,030 --> 00:11:13,720
Closed source.

127
00:11:13,750 --> 00:11:16,930
There are also differences in this category as well.

128
00:11:18,710 --> 00:11:26,990
If you've ever seen that ad of the PC guy and the Mac guy, then over the last few years, especially

129
00:11:26,990 --> 00:11:37,740
2010 to 2018, I would say the general consensus has been that SQL is a little bit more traditional.

130
00:11:37,760 --> 00:11:44,450
He's the PC guy, he's old school, and the no SQL guy is cool.

131
00:11:44,450 --> 00:11:49,670
He's hip, he knows how to make coffee really well, and he's just great.

132
00:11:49,670 --> 00:11:51,860
And he's the new kid on the block.

133
00:11:52,160 --> 00:11:58,250
And the reason why people were so excited about SQL is because SQL has been around for ages, and it

134
00:11:58,250 --> 00:12:03,260
really was this new innovation on something that's a little bit dusty databases.

135
00:12:03,260 --> 00:12:06,080
Let's be fair, it's not the most exciting topic.

136
00:12:06,440 --> 00:12:12,170
But as time has gone on and as somebody who's been in this space for a long time, I'm really seeing

137
00:12:12,170 --> 00:12:15,320
the tides change for SQL and NoSQL.

138
00:12:15,530 --> 00:12:22,340
There's a lot of blog posts on Hacker News about how NoSQL is not as great as we initially thought it

139
00:12:22,340 --> 00:12:28,190
was going to be, and a lot of people who used it for large infrastructure projects started having issues

140
00:12:28,190 --> 00:12:34,400
with precisely that thing that it was going to address scalability, but also with consistency.

141
00:12:34,400 --> 00:12:41,810
And it turns out that, hey, you know, boring guy is really good at relationships.

142
00:12:41,840 --> 00:12:48,890
Being able to join tables, being able to query efficiently actually vastly increases the speed of database

143
00:12:48,890 --> 00:12:49,760
access.

144
00:12:50,360 --> 00:12:57,470
In addition, having that structure, being able to plan your database, plan your relationships ahead

145
00:12:57,470 --> 00:13:04,460
of time, and having a consistency that you can rely on, turns out, is really good for maintaining

146
00:13:04,460 --> 00:13:05,720
good code quality.

147
00:13:05,720 --> 00:13:10,370
So it means that you're not querying for something and then suddenly get back something you don't expect

148
00:13:10,370 --> 00:13:14,780
because, oh, we were able to dynamically add fields and change the structure.

149
00:13:14,900 --> 00:13:17,390
So it's almost a bit like that meme.

150
00:13:17,510 --> 00:13:22,880
I don't know if you've seen where teenagers, when they watch Lord of the rings, they really like Legolas.

151
00:13:22,880 --> 00:13:29,960
And then when you turn into your 20s, you start liking Aragorn because he's cool and he's hip, and

152
00:13:29,960 --> 00:13:38,360
then actually who you really want is Sam because he's consistent and reliable in SQL and NoSQL database

153
00:13:38,360 --> 00:13:44,390
debate, which is ongoing, by the way, people are still shouting at each other, people in different

154
00:13:44,390 --> 00:13:46,280
camps saying mine is better than yours.

155
00:13:46,310 --> 00:13:46,850
ET cetera.

156
00:13:46,850 --> 00:13:52,400
But if we look at some hard stats, looking at the StackOverflow surveys, you can see that in terms

157
00:13:52,400 --> 00:14:01,100
of database technology, the clear winner is Postgres, which is an open source SQL type database.

158
00:14:01,370 --> 00:14:04,160
This is true across the board.

159
00:14:04,160 --> 00:14:08,000
So it's true for all respondents to their survey.

160
00:14:08,000 --> 00:14:11,450
And they do these big surveys across all programmers.

161
00:14:11,450 --> 00:14:18,020
But most importantly, if you look at professional developers, this is what really matters for us.

162
00:14:18,050 --> 00:14:23,900
We're trying to become professional tools in web development, and it's important to learn the tools

163
00:14:23,900 --> 00:14:26,690
that modern developers prefer to use.

164
00:14:26,810 --> 00:14:33,050
And when you look at learning to code, you can see that it slips down a little bit because MySQL is

165
00:14:33,050 --> 00:14:40,910
a lot simpler, SQL Lite is even simpler, and MongoDB, which is the only NoSQL database, has made

166
00:14:40,910 --> 00:14:43,370
it onto second place in this list.

167
00:14:43,370 --> 00:14:49,520
And if you took the previous version of this course, you'll know that MongoDB was in fact the technology

168
00:14:49,520 --> 00:14:52,790
that I taught in this web development course as well.

169
00:14:52,790 --> 00:14:58,730
But over time, with the change in technology and with the change of tides, it's important for me to

170
00:14:58,730 --> 00:15:05,750
update you on what is the most relevant and the most up to date technology to learn for professionals.

171
00:15:05,750 --> 00:15:08,630
That is no doubt going to be Postgres.

172
00:15:08,630 --> 00:15:11,570
So that's what we're going to be learning in this course.

173
00:15:11,600 --> 00:15:13,280
It is free to use.

174
00:15:13,310 --> 00:15:14,960
It's used by professionals.

175
00:15:14,960 --> 00:15:16,670
It's massively scalable.

176
00:15:16,670 --> 00:15:18,050
It's super reliable.

177
00:15:18,050 --> 00:15:24,530
And it has all of the great aspects of a good database for us to be able to use as web developers.

178
00:15:24,530 --> 00:15:30,980
So in the next module, we're going to be diving deep already in learning the SQL language.

179
00:15:30,980 --> 00:15:38,360
And we're going to learn how to insert how to do Crud operations using SQL and how to establish basic

180
00:15:38,360 --> 00:15:39,350
relationships.

181
00:15:39,350 --> 00:15:42,710
So for all of that and more, I'll see you on the next lesson.

