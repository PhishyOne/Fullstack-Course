1
00:00:00,330 --> 00:00:07,950
So what exactly is the Internet computer and how can we build dapps using the Internet computer?

2
00:00:08,550 --> 00:00:12,510
So the goal of the Internet computer is to reach blockchain singularity.

3
00:00:12,900 --> 00:00:19,380
The idea is to have a powerful, secure blockchain that's capable running the entire base layer of the

4
00:00:19,380 --> 00:00:19,680
web.

5
00:00:19,980 --> 00:00:26,220
So everything from hosting, storage, services, basically everything in one secure protocol.

6
00:00:26,550 --> 00:00:34,560
Now, back in 2019, when Vitalik Buterin, who's the founder of Ethereum, the person who first thought

7
00:00:34,560 --> 00:00:41,070
of and implemented these smart contracts, when he was talking at 2019 Unchained Live, he was asked this

8
00:00:41,070 --> 00:00:45,570
question of, 'What do you think is the biggest competitor to Ethereum today?'

9
00:00:45,840 --> 00:00:49,800
And his answer was Dfinity's Internet computer.

10
00:00:50,160 --> 00:00:57,450
And a part of the reason for that is because today's decentralized applications are only partially decentralized.

11
00:00:57,750 --> 00:01:03,030
They have a very small amount of logic and data that's hosted on a secure blockchain.

12
00:01:03,570 --> 00:01:10,890
But the majority of the logic and the data is all hosted on large web2 companies.

13
00:01:11,130 --> 00:01:18,330
For example, using Amazon's AWS or Microsoft Azure in order to host a lot of the data or using something

14
00:01:18,330 --> 00:01:23,850
like Chrome's browser extensions in order to connect a wallet and let users spend and earn tokens.

15
00:01:24,090 --> 00:01:31,020
So if the majority of a dapp is not on-chain, then it's not really decentralized and it doesn't have

16
00:01:31,020 --> 00:01:35,580
all of the benefits that's offered by a truly decentralized application.

17
00:01:36,030 --> 00:01:41,340
So it means that any of these companies, Amazon, Microsoft, can actually shut down your project just

18
00:01:41,340 --> 00:01:42,480
by snapping their fingers.

19
00:01:43,140 --> 00:01:51,270
So why is this? Why is it that we have all of this technology and yet we're still relying on legacy infrastructure?

20
00:01:51,300 --> 00:01:58,350
Well, the reason is because it's extremely difficult with the current blockchains, for example, Ethereum,

21
00:01:58,350 --> 00:02:04,650
to be able to host large amounts of data and carry out a large amount of transactions because it wasn't

22
00:02:04,650 --> 00:02:06,090
built for that purpose.

23
00:02:06,330 --> 00:02:11,940
Ethereum was built primarily to act as a ledger. It's not designed to handle a lot of computation

24
00:02:11,940 --> 00:02:12,990
or data storage.

25
00:02:13,530 --> 00:02:21,390
So if we look at a day in data just to see how much data gets created in your bog-standard web2 applications,

26
00:02:21,720 --> 00:02:27,900
there's something like 500 million tweets that are sent every day, and about 95 million photos and

27
00:02:27,900 --> 00:02:34,470
videos are shared on Instagram, which is a crazy amount of data to try and put onto a traditional blockchain.

28
00:02:34,920 --> 00:02:41,880
And if you look at how much it costs just to store one gigabyte of data on blockchain, for Ethereum,

29
00:02:41,880 --> 00:02:46,680
that's something like $350 million at the current price of Ethereum.

30
00:02:47,130 --> 00:02:51,120
So a gigabyte of data is just about 300 phone photos.

31
00:02:51,490 --> 00:02:59,300
So if we go back to that 95 million photos, if you multiply out, that'll cost something like $11 trillion,

32
00:02:59,610 --> 00:03:06,870
basically just completely unfeasible, which is why nobody creates fully-fledged decentralized applications

33
00:03:07,230 --> 00:03:13,170
entirely on chain, which is what I meant when I said Ethereum just wasn't designed to handle the entire

34
00:03:13,170 --> 00:03:14,910
tech stack of a web application.

35
00:03:15,690 --> 00:03:21,810
Also, remember how we said that each new block contains transaction data that updates the blockchain.

36
00:03:22,500 --> 00:03:28,890
The rate at which transactions can be processed determines how fast a blockchain-based app can run or

37
00:03:28,890 --> 00:03:30,330
how big it can scale.

38
00:03:30,930 --> 00:03:37,050
Each new post in a decentralized social media app is a transaction. That means the number of transactions

39
00:03:37,050 --> 00:03:42,840
per second of the blockchain itself will limit how many posts all of your users can make, because the

40
00:03:42,840 --> 00:03:46,290
TPS determines how fast your app can update it's state.

41
00:03:47,040 --> 00:03:53,220
It currently takes something around 14 seconds to create a new block on the Ethereum blockchain, and

42
00:03:53,320 --> 00:03:58,350
Ethereum has gradually increased the block size over time so that more data can be stored into a single

43
00:03:58,350 --> 00:03:58,800
block.

44
00:03:59,160 --> 00:04:04,410
But in the current version of Ethereum, we're limited to about 15 transactions per second.

45
00:04:04,830 --> 00:04:10,680
So imagine a Twitter that's completely on-chain on Ethereum, and it would only let four users post

46
00:04:10,680 --> 00:04:11,820
the tweet every minute.

47
00:04:12,270 --> 00:04:18,089
And it will probably cost them something like $100 to pay to tweet that single tweet because it's so

48
00:04:18,089 --> 00:04:19,649
expensive and it's so slow.

49
00:04:19,769 --> 00:04:24,840
Now, the Dfinity organization has been researching this problem and trying to come up with a better

50
00:04:24,840 --> 00:04:27,120
technological solution to address this.

51
00:04:27,690 --> 00:04:32,670
If you search the Internet archives, you can see that even as far back as 2015, the Dfinity team have

52
00:04:32,670 --> 00:04:34,590
already started working on this problem.

53
00:04:35,040 --> 00:04:38,370
How do you make blockchain smart contracts scale?

54
00:04:38,670 --> 00:04:40,350
How can you make it more performant?

55
00:04:40,380 --> 00:04:46,860
How can you turn this simple ledger into a new form of computer capable of processing thousands of computations

56
00:04:46,860 --> 00:04:50,070
per second and even be able to store data on chain?

57
00:04:50,250 --> 00:04:56,940
And they came up with basically a novel consensus algorithm, what they call threshold relay, and it

58
00:04:56,940 --> 00:04:59,850
allows the Internet computer to be able to reach much faster

59
00:04:59,930 --> 00:05:04,880
speeds when compared to the other major layer one blockchains that are currently in existence.

60
00:05:05,270 --> 00:05:07,550
But how does it work under the hood?

61
00:05:07,580 --> 00:05:14,150
Well, basically, the Internet computer aggregates the compute capacity of a large number of independent

62
00:05:14,150 --> 00:05:20,810
data centers, and it takes all of these data centers around the world and combines them using the Internet

63
00:05:20,930 --> 00:05:26,780
computer protocol into a large, single, decentralized world computer, if you will.

64
00:05:27,230 --> 00:05:33,650
And this decentralized computer is organized into individual, what they call, canisters or canister smart

65
00:05:33,650 --> 00:05:34,070
chains.

66
00:05:34,610 --> 00:05:40,490
And these canisters can basically run processes, execute code and store the data for the programs.

67
00:05:41,030 --> 00:05:46,550
So as a user, you can tap into the canisters directly by making HTTPS requests.

68
00:05:46,820 --> 00:05:52,820
But as a developer, what you need to realize is that this Internet computer is basically just a whole

69
00:05:52,820 --> 00:06:00,830
bunch of canisters where each canister can hold programs and programs state through a web assembly module

70
00:06:01,130 --> 00:06:04,070
and a flash memory model called a memory page.

71
00:06:04,580 --> 00:06:11,960
So you as a developer can write code that compiles into a performant way to run web applications on

72
00:06:11,960 --> 00:06:14,810
user hardware using web assembly

73
00:06:14,990 --> 00:06:19,820
and you can do that using many languages such as rust or Dfinity's motoko.

74
00:06:20,030 --> 00:06:25,820
And the really cool thing about these canisters is how they manage memory. Because your program's state,

75
00:06:26,120 --> 00:06:31,460
so the contents of your variables, your collections, your arrays, can actually get stored within the

76
00:06:31,460 --> 00:06:32,030
canister.

77
00:06:32,150 --> 00:06:37,130
And each of these canisters acts a bit like a process or a code sandbox.

78
00:06:37,460 --> 00:06:41,120
It's kind of similar to containers if you're familiar with Docker and that kind of stuff.

79
00:06:41,330 --> 00:06:49,160
But essentially, the program state gets preserved, so your canister kind of acts as if it runs forever.

80
00:06:49,490 --> 00:06:56,270
So imagine if you run something in Code Sandbox and you click Run and that program never gets killed,

81
00:06:56,840 --> 00:07:00,020
then all of your data can just simply be kept in their

82
00:07:00,020 --> 00:07:00,740
variables.

83
00:07:00,980 --> 00:07:06,920
So if you have a collection, if you have an array, a dictionary or an object, they just hold on to

84
00:07:06,920 --> 00:07:09,350
their state and they never get wiped.

85
00:07:09,650 --> 00:07:15,650
So that means you don't even have to think about data persistence or putting things into databases,

86
00:07:15,650 --> 00:07:20,240
taking things out of databases, because your program behaves like it never gets killed.

87
00:07:20,870 --> 00:07:26,660
So this makes canisters not only an evolution in the way that smart contracts work, but even a leap

88
00:07:26,660 --> 00:07:28,880
in the way that programs can be written.

89
00:07:29,000 --> 00:07:34,940
Because you as a developer only really have to worry about the logic and the Internet computer takes

90
00:07:34,940 --> 00:07:35,630
care of the rest.

91
00:07:35,780 --> 00:07:42,290
Now, currently, there's over 30,000 of these canisters that are running on the Internet computer, and

92
00:07:42,290 --> 00:07:44,180
it's growing at an incredible rate.

93
00:07:44,870 --> 00:07:51,040
There's already hundreds of applications are built on the Internet computer, for example, decentralized

94
00:07:51,050 --> 00:07:54,740
Reddit or the decentralized version of TikTok.

95
00:07:54,920 --> 00:08:02,690
And because everything is on-chain, you can enable some really fascinating new ways of interacting

96
00:08:02,690 --> 00:08:04,040
with these Web applications.

97
00:08:04,370 --> 00:08:10,280
For example, in the decentralized version of TikTok, which is called Cancan, that runs on the

98
00:08:10,280 --> 00:08:16,700
Internet computer, they have this ability for you to like a video.

99
00:08:17,150 --> 00:08:23,720
And then if that video later goes viral, then it looks at who were the first ten or 20 people who liked

100
00:08:23,730 --> 00:08:31,310
this video and rewards them with tokens from Cancan, which you can then later spend to buy real products

101
00:08:31,310 --> 00:08:34,700
or virtual products or get things from sponsors.

102
00:08:35,000 --> 00:08:40,850
So it's genuinely bringing about a new way that we think about developing web applications and how you

103
00:08:40,850 --> 00:08:44,400
can interact with users through these token economics.

104
00:08:44,420 --> 00:08:50,830
And currently there are definitive developer ground programs where you can get anything from $25,000 to

105
00:08:50,830 --> 00:08:52,870
$100,000 in grants.

106
00:08:52,880 --> 00:08:58,910
So that means no strings attached money to help you develop applications for the Internet computer.

107
00:08:59,300 --> 00:09:02,450
So there is no better time than now to get started.

108
00:09:02,660 --> 00:09:06,800
And in the coming lessons, we're going to be learning exactly how to do just that.

109
00:09:07,070 --> 00:09:12,470
So once you're ready, head over to the next lesson where we're going to get started by setting up our

110
00:09:12,470 --> 00:09:17,600
computer to be able to develop decentralized applications using the Internet computer.

