1
00:00:00,200 --> 00:00:03,200
All right, guys, so here comes your challenge.

2
00:00:03,200 --> 00:00:09,110
You should be able to discover a link that takes you to this code sandbox that I prepared for you.

3
00:00:09,110 --> 00:00:14,360
And the first thing to do, as always, is to go ahead and fork the code sandbox.

4
00:00:14,720 --> 00:00:19,520
That way you'll be able to keep a copy of your work, and if you're logged in, you'll be able to save

5
00:00:19,520 --> 00:00:23,630
it and take a look at it and come back to it later on if you need to.

6
00:00:24,140 --> 00:00:28,460
So in this challenge, there's a couple of steps that I want you to achieve.

7
00:00:28,460 --> 00:00:35,420
I want you to go through each of these comments step by step and try to complete the challenge.

8
00:00:35,420 --> 00:00:39,290
So in this case we want to create a react app from scratch.

9
00:00:39,290 --> 00:00:46,700
So notice how inside our index.js, I've kindly removed all the code for you so that you get extra practice

10
00:00:46,700 --> 00:00:48,440
creating react apps.

11
00:00:48,440 --> 00:00:55,340
But inside our index.html there is the predictable div with the id of root.

12
00:00:55,340 --> 00:01:01,220
So if you watch the last lesson, you should know what to do and by the end of this challenge, you

13
00:01:01,220 --> 00:01:08,390
should have created a website using react that has a H1 heading, a unordered list.

14
00:01:08,390 --> 00:01:12,350
So a bunch of bullet points and it should contain three list elements.

15
00:01:13,040 --> 00:01:18,710
So for example I've created a list of my favorite foods.

16
00:01:18,710 --> 00:01:21,950
Yep it's Angela talking about food again.

17
00:01:22,280 --> 00:01:29,720
Um, but here I've got an H1 with a heading and I've got three unordered list items listing all of my

18
00:01:29,720 --> 00:01:30,620
favorite foods.

19
00:01:31,220 --> 00:01:33,170
So now is the time for action.

20
00:01:33,170 --> 00:01:36,380
Go ahead and pause the video and try to complete this challenge.

21
00:01:36,380 --> 00:01:40,040
And then head back over here and we'll run through the solution together.

22
00:01:40,040 --> 00:01:42,710
I'll stay quiet now and let you do your work.

23
00:01:48,890 --> 00:01:49,370
All right.

24
00:01:49,370 --> 00:01:50,690
So how did that go?

25
00:01:50,720 --> 00:01:52,880
Let's walk through the solution together.

26
00:01:52,880 --> 00:01:56,870
And remember, if you haven't given it a go, I really urge you to do it.

27
00:01:56,870 --> 00:02:01,160
I know there's a lot of repetition, but it's going to build muscle memory and it's going to make you

28
00:02:01,160 --> 00:02:02,180
a better developer.

29
00:02:02,180 --> 00:02:04,520
So let's tackle the first comment.

30
00:02:04,520 --> 00:02:07,430
Create a react app from scratch.

31
00:02:07,430 --> 00:02:13,400
So remember that we've got our two dependencies which are installed into our project.

32
00:02:13,400 --> 00:02:16,790
But in order to use it we have to import them.

33
00:02:16,790 --> 00:02:24,740
So let's import react from the react module and then let's import the react Dom.

34
00:02:25,830 --> 00:02:31,350
From the react Dom module, and now we can use them.

35
00:02:31,350 --> 00:02:34,650
And the method that we want to use is render.

36
00:02:34,650 --> 00:02:36,690
And that comes from the react Dom.

37
00:02:36,690 --> 00:02:40,800
So let's go ahead and do react Dom dot render.

38
00:02:40,800 --> 00:02:45,510
And in this method we have to provide two things at the minimum.

39
00:02:45,510 --> 00:02:48,690
So the first thing is what to show.

40
00:02:48,690 --> 00:02:52,200
And the second is where to show it.

41
00:02:53,070 --> 00:02:56,790
So out of these two things what do we want to show.

42
00:02:56,790 --> 00:02:59,490
Well we want to show a H1 heading.

43
00:02:59,490 --> 00:03:03,120
So let's add that into the what to show.

44
00:03:03,120 --> 00:03:05,100
So let's create an H1 heading.

45
00:03:05,100 --> 00:03:09,300
And mine is as always going to be my favorite foods.

46
00:03:09,540 --> 00:03:17,310
And then in terms of the where to show it, remember that we have our div in here with that particular

47
00:03:17,310 --> 00:03:24,750
ID, and we can get hold of this element to insert our react elements into that div.

48
00:03:24,750 --> 00:03:27,900
So the where to show it is going to require some JavaScript.

49
00:03:27,900 --> 00:03:35,850
So document get element by id and the id is the string which was called root.

50
00:03:35,970 --> 00:03:43,890
So now if we hit save and we refresh our little browser on the right, then we should see our H1 showing

51
00:03:43,890 --> 00:03:44,850
up right now.

52
00:03:44,850 --> 00:03:47,520
So we've done step one.

53
00:03:47,520 --> 00:03:49,110
We've done step two.

54
00:03:49,140 --> 00:03:51,060
So now let's tackle this part.

55
00:03:51,060 --> 00:03:53,850
It should also display an unordered list.

56
00:03:53,850 --> 00:03:55,500
So a bunch of bullet points.

57
00:03:55,500 --> 00:04:01,320
Now remember that the render method can only accept one element.

58
00:04:01,320 --> 00:04:06,510
So we can't simply just tag our unordered list over here at the end.

59
00:04:06,690 --> 00:04:12,720
But what we can do instead is we can firstly format our method a little bit.

60
00:04:12,720 --> 00:04:20,430
And instead of having two HTML elements, we can wrap them inside a div.

61
00:04:20,430 --> 00:04:25,680
So let me go ahead and create that div and then put the closing tag right here.

62
00:04:25,680 --> 00:04:27,960
Just before that comma.

63
00:04:27,960 --> 00:04:30,780
So this block is one thing.

64
00:04:30,780 --> 00:04:34,440
And then let's add a new line over here.

65
00:04:34,440 --> 00:04:42,450
So now we're abiding by the laws of the render method where we're only rendering a single element.

66
00:04:42,450 --> 00:04:46,620
But nobody said that the HTML element can't have children.

67
00:04:46,620 --> 00:04:53,670
So inside the div we've got two child elements a ul and a h1.

68
00:04:54,390 --> 00:04:57,930
So now we can continue building out the rest of our app.

69
00:04:57,930 --> 00:05:02,100
So inside our unordered list we're going to create three list elements.

70
00:05:02,100 --> 00:05:04,800
So let's go ahead and add three lis.

71
00:05:04,800 --> 00:05:10,950
And if you hit save so command S or control S on windows or go to File and Save.

72
00:05:10,950 --> 00:05:12,990
And just look at that shortcut there.

73
00:05:12,990 --> 00:05:18,570
Then it'll actually reformat your code and prettify everything every time you do.

74
00:05:18,570 --> 00:05:20,370
That makes it easier to read.

75
00:05:20,370 --> 00:05:28,770
So notice how just now when it prettified our code, it actually changed this Li from a normal li,

76
00:05:28,830 --> 00:05:34,590
where we can add something in the middle to a self-closing tag.

77
00:05:34,590 --> 00:05:39,750
So remember tags like image or link are self-closing.

78
00:05:39,750 --> 00:05:47,430
They don't have anything in between the tags, unlike the list element, or the ul or the h1 or the

79
00:05:47,430 --> 00:05:48,360
paragraph.

80
00:05:49,230 --> 00:05:54,600
So that's just something to be aware of that when you hit save, sometimes it reformats your code and

81
00:05:54,600 --> 00:06:01,290
update certain things, and in the case where you have HTML elements with nothing inside so no children,

82
00:06:01,290 --> 00:06:03,420
it'll turn it into a self-closing tag.

83
00:06:04,230 --> 00:06:09,690
So let me go ahead and add some content to our list element so it won't think that it's empty.

84
00:06:09,690 --> 00:06:14,520
So let's add our good old bacon as a list element.

85
00:06:14,520 --> 00:06:19,290
And then maybe some noodles.

86
00:06:19,290 --> 00:06:20,490
Always good.

87
00:06:20,490 --> 00:06:24,750
And finally I'm going to add some veg.

88
00:06:24,750 --> 00:06:26,850
But then again, who am I kidding.

89
00:06:26,880 --> 00:06:28,290
Adding mushrooms in there.

90
00:06:28,890 --> 00:06:31,080
I think it's more likely to be something meaty.

91
00:06:31,140 --> 00:06:31,650
All right.

92
00:06:31,650 --> 00:06:39,870
So now we have created a website with an H1, an unordered list with three list items, and they're

93
00:06:39,870 --> 00:06:45,210
all being rendered inside this div with the id of root.

94
00:06:46,940 --> 00:06:49,850
Did you manage to solve this challenge?

95
00:06:49,880 --> 00:06:57,080
If not, or if any of this was confusing at all, be sure to have a play around with this completed

96
00:06:57,080 --> 00:07:04,040
code, so I'll include a link to this completed challenge in the course resources, and you can have

97
00:07:04,040 --> 00:07:08,060
a mess around with it and match up your code with mine if you got any errors.

98
00:07:08,120 --> 00:07:16,520
Once you're comfortable with this idea of rendering HTML elements into the Dom using react, then head

99
00:07:16,520 --> 00:07:17,930
over to the next lesson.

100
00:07:17,930 --> 00:07:26,210
We're going to talk more about adding JavaScript expressions inside these HTML elements using our JSX.

101
00:07:26,720 --> 00:07:30,230
So for all of that and more, I'll see you on the next lesson.

