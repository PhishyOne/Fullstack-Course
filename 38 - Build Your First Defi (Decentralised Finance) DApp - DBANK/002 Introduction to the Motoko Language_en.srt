1
00:00:00,270 --> 00:00:06,360
Now the first thing we have to do to get started developing for the Internet computer is we're going

2
00:00:06,360 --> 00:00:07,800
to have to create a new project.

3
00:00:07,890 --> 00:00:12,090
So we're going to cd into where we want to develop,

4
00:00:12,120 --> 00:00:17,200
so in my case, it's called ic-projects, which is on my root folder.

5
00:00:17,640 --> 00:00:23,580
And if you're not familiar with how to work with the terminal, be sure to take a look at the previous

6
00:00:23,580 --> 00:00:25,240
lessons where we talked about this.

7
00:00:25,260 --> 00:00:29,970
I'm not going to go into too much more detail, but I'll tell you what, every single line I write actually

8
00:00:29,970 --> 00:00:30,390
does.

9
00:00:30,420 --> 00:00:37,410
So in this case, we are cding or changing directory into this particular directory which I have

10
00:00:37,410 --> 00:00:40,350
on my computer called ic-project.

11
00:00:40,830 --> 00:00:45,450
And in the previous setup stages, you should have also created this folder

12
00:00:45,780 --> 00:00:47,910
so you should be able to navigate to it.

13
00:00:48,180 --> 00:00:51,790
Once we've done that, we are now inside ic-project..

14
00:00:52,110 --> 00:00:55,890
And here is where we're going to create our new Internet computer project.

15
00:00:56,430 --> 00:01:03,360
So the commands are dfx, using the dfx SDK, and then we're going to say new, to create a new project,

16
00:01:03,750 --> 00:01:09,000
and we're going to give our project a name, which I'm going to call dbank.

17
00:01:09,960 --> 00:01:10,800
Hit enter.

18
00:01:10,800 --> 00:01:17,280
And the SDK is going to do all of the behind the scenes stuff, setting up all of the required files

19
00:01:17,280 --> 00:01:18,000
and folders.

20
00:01:18,390 --> 00:01:22,380
And we're just going to have to let this progress bar run its course.

21
00:01:22,380 --> 00:01:27,060
And depending on the speed of your computer, this can take anywhere between 2 to 5 minutes.

22
00:01:27,330 --> 00:01:30,960
So grab a cup of tea and then let's get back once it's done.

23
00:01:31,680 --> 00:01:33,930
Brilliant. Mine is now complete.

24
00:01:34,290 --> 00:01:41,960
You'll see the dfinity logo show up and you can see that it is now ready to start.

25
00:01:42,330 --> 00:01:46,200
And we can cd into this new project, which I called dbank.

26
00:01:46,980 --> 00:01:54,360
And inside dbank we can take a look at the files and folders that have been created.

27
00:01:54,360 --> 00:01:55,770
There's a readme,

28
00:01:56,130 --> 00:02:00,210
there's a git which we can already start using.

29
00:02:00,510 --> 00:02:05,580
There is most importantly the source folder, which is where we're going to write all of our code and

30
00:02:05,580 --> 00:02:10,320
also this bunch of node modules and other configuration files which we don't have to worry too much

31
00:02:10,320 --> 00:02:10,620
about.

32
00:02:11,280 --> 00:02:16,310
Now, I don't want to look at this project just inside the command line.

33
00:02:16,320 --> 00:02:22,350
I want to open it up inside my code editor, which happens at the moment to be VSCode.

34
00:02:22,890 --> 00:02:24,550
So I'm going to go into code,

35
00:02:24,570 --> 00:02:25,620
I'm going to hit open.

36
00:02:26,310 --> 00:02:31,170
And then I'm going to find my project folder, select it, and click open.

37
00:02:31,500 --> 00:02:36,420
So now I have my VSCode opened up with my dbank project.

38
00:02:36,900 --> 00:02:44,070
And if we take a look inside the source code, you can see there is a main.mo, which is the Motoko

39
00:02:44,070 --> 00:02:46,170
file that we're going to be working with.

40
00:02:47,190 --> 00:02:52,020
You can see that there's some pre-existing code that's already in here, which we're going to promptly

41
00:02:52,320 --> 00:02:57,480
hit delete on because we're going to be writing everything from scratch so that we can learn what each

42
00:02:57,480 --> 00:02:58,200
line does.

43
00:02:58,500 --> 00:03:01,170
Once we're here with staring at this blank file.

44
00:03:01,440 --> 00:03:07,890
The first thing we're going to do is we're going to create the class, which is going to hold our canister.

45
00:03:08,490 --> 00:03:11,940
In Motoko language, this is called an actor.

46
00:03:12,390 --> 00:03:16,560
So we're going to write the keyword actor and then we're going to give this class a name.

47
00:03:17,070 --> 00:03:22,830
In my case, I'm just going to call it the DBank or decentralized bank, and then I'm going to open

48
00:03:22,830 --> 00:03:24,060
up a set of brackets.

49
00:03:24,060 --> 00:03:30,120
And just with those few lines, we've already created a new canister. Inside this,

50
00:03:30,120 --> 00:03:32,950
we can use pretty much all the code that we already know.

51
00:03:32,970 --> 00:03:41,760
So I'm going to create a new variable that's going to hold the current value of how much money basically

52
00:03:41,760 --> 00:03:43,650
is inside this bank.

53
00:03:44,160 --> 00:03:47,520
Let's say we start out with $300, right?

54
00:03:48,030 --> 00:03:53,280
And every line has to be capped off with a semicolon, just like in JavaScript.

55
00:03:53,850 --> 00:03:56,790
And we've got the var keyword to create the variable,

56
00:03:57,060 --> 00:03:58,740
te've given the variable a name.

57
00:03:59,130 --> 00:04:05,090
The naming convention in Motoko is to use lower camel cases for constants and variables,

58
00:04:05,100 --> 00:04:07,800
basically anything that is dynamic and can change.

59
00:04:08,160 --> 00:04:14,790
And to use upper camel case for actor names, module names, type names, basically things that usually

60
00:04:14,880 --> 00:04:15,990
stay static.

61
00:04:16,320 --> 00:04:22,560
And if you want to read more about this then I'll link to the language guide for Motoko and you can take

62
00:04:22,560 --> 00:04:26,630
a look through this document for how they want you to lay out your code.

63
00:04:26,640 --> 00:04:34,470
For example, two spaces per indentation, or how to layout and space your code, etc. This probably

64
00:04:34,470 --> 00:04:38,930
won't affect how your code runs, but is usually a good idea when you're getting up and running with

65
00:04:38,940 --> 00:04:45,390
a new language to just read through the language style guide. There we have it. We've created our first

66
00:04:45,390 --> 00:04:55,290
variable and now we've basically said inside or DBank, we have $300 in total as the current value

67
00:04:55,290 --> 00:04:55,710
held.

68
00:04:55,830 --> 00:04:59,930
Now a variable in Motoko works similarly to variables that we've seen

69
00:05:00,170 --> 00:05:00,480
before.

70
00:05:00,890 --> 00:05:04,230
It's basically a container that can store pieces of data.

71
00:05:04,250 --> 00:05:08,510
So in this case, we've got the number 300 stored inside.

72
00:05:09,020 --> 00:05:12,410
And because it's variable, then it can also vary.

73
00:05:12,650 --> 00:05:14,090
So we can change its value.

74
00:05:14,540 --> 00:05:19,910
Now when we change the value, instead of using just the single equals sign,

75
00:05:20,240 --> 00:05:22,770
we're actually using a different operator.

76
00:05:22,790 --> 00:05:25,370
We're using the colon equals.

77
00:05:25,520 --> 00:05:31,610
And this is saying that what the computer should do is replace the current value inside this container

78
00:05:31,610 --> 00:05:33,380
with whatever comes afterwards.

79
00:05:33,740 --> 00:05:41,210
So if I put 100 in here and close it off with my semicolon, then at the point where the code runs to

80
00:05:41,210 --> 00:05:47,960
here, it would have already created a variable called currentValue, given it 300 as the assignment

81
00:05:47,960 --> 00:05:50,390
and then later changed it to 100.

82
00:05:50,840 --> 00:05:56,840
So if I was able to inspect the code at this point on line four, currentValue would be equal to

83
00:05:56,840 --> 00:05:57,590
100.

84
00:05:57,980 --> 00:06:01,160
So how can we inspect and how can we debug our code?

85
00:06:01,190 --> 00:06:05,720
It's quite important to be able to get something like print or console log going.

86
00:06:06,080 --> 00:06:14,200
If we search on the documentation, you'll find a module called Debug which exists in the Motoko Base

87
00:06:14,210 --> 00:06:14,840
Library.

88
00:06:15,290 --> 00:06:19,760
And here we can find our print function, which is going to emit text,

89
00:06:19,770 --> 00:06:23,870
so it's going to output text basically, which is going to go into the terminal

90
00:06:23,870 --> 00:06:25,910
when we are doing local development.

91
00:06:26,210 --> 00:06:29,720
In order to use it, we first have to import that module.

92
00:06:29,720 --> 00:06:36,760
So we write the import keyword and then the name of the class and then we add double-quotes

93
00:06:36,770 --> 00:06:43,490
and inside we're going to say mo, for Motoko, :base, for the base library, and then /

94
00:06:43,490 --> 00:06:45,080
the debug module.

95
00:06:45,710 --> 00:06:47,990
Now we can use it right here.

96
00:06:48,620 --> 00:06:53,660
I'm going to say debug. and then I'm going to use that function called print.

97
00:06:54,230 --> 00:07:02,360
Now print, as you note in the documentation, allows us to put text into the function, and text is going

98
00:07:02,360 --> 00:07:04,400
to come out into the terminal.

99
00:07:04,730 --> 00:07:06,450
Let me just test this by writing

100
00:07:06,470 --> 00:07:07,070
Hello

101
00:07:07,100 --> 00:07:13,760
to begin with. And in order for our code to run, we, of course, have to deploy our canister.

102
00:07:14,420 --> 00:07:20,600
The two step process, as we saw before when we did all our setup, is first we set up a terminal

103
00:07:20,900 --> 00:07:28,190
and we say dfx start and you can see that our local environment is now up and running on localhost 8000.

104
00:07:28,670 --> 00:07:33,020
At this stage we have to add another terminal so we can't do it within this one.

105
00:07:33,020 --> 00:07:34,910
We don't want to stop this process.

106
00:07:35,390 --> 00:07:42,170
And here, making sure that you're inside the dbank project, we're going to say dfx deploy to deploy

107
00:07:42,200 --> 00:07:47,840
our canister onto this simulated internet computer blockchain.

108
00:07:48,380 --> 00:07:50,540
Let's go ahead and hit deploy.

109
00:07:50,930 --> 00:07:58,760
So it's going to create our canister dbank and then it's going to install and hopefully update.

110
00:07:59,150 --> 00:08:05,930
So now you can see as soon as that has finished running, the hello got printed over here in this terminal.

111
00:08:06,680 --> 00:08:09,050
We can see that our print is working.

112
00:08:09,290 --> 00:08:17,000
But if I tried to, instead of printing text, which is denoted by the double quotes, if I wanted to

113
00:08:17,000 --> 00:08:23,420
actually print the current value in here, so I paste that in here, then you can see we get an error.

114
00:08:23,900 --> 00:08:27,650
And the reason is because there's a type mismatch.

115
00:08:27,980 --> 00:08:34,669
This function print is expecting to print something that is a piece of text and this happens to be of

116
00:08:34,669 --> 00:08:37,370
type nat, which is a natural number.

117
00:08:37,730 --> 00:08:40,490
It basically holds any positive number.

118
00:08:41,030 --> 00:08:42,740
This is not going to let me do it.

119
00:08:42,890 --> 00:08:44,510
So what do I have to do instead?

120
00:08:44,540 --> 00:08:49,990
Well, I have to use another function inside here, which is called debug_show.

121
00:08:50,000 --> 00:08:55,550
And inside this function I can put my current value and we have no errors.

122
00:08:56,360 --> 00:09:06,800
Now if I go ahead and run dfx deploy again in the terminal that's not running the internet computer,

123
00:09:07,370 --> 00:09:14,660
then you'll see as soon as it builds, it will show my output and it shows that the current values currently

124
00:09:14,660 --> 00:09:17,870
equal at this point to 100.

125
00:09:18,650 --> 00:09:25,430
So we've seen how we can create variables, how we can reassign values, and how we can use the debug

126
00:09:25,430 --> 00:09:34,460
module to print either text or values that are held inside our actor, which is basically our canister.

127
00:09:35,390 --> 00:09:39,230
In addition to var, there's also something called a let.

128
00:09:39,800 --> 00:09:44,540
A var is the keyword that's going to create a variable, and we're very familiar with that.

129
00:09:44,930 --> 00:09:48,590
Now a let is similar to the constants that we have in JavaScript.

130
00:09:48,710 --> 00:09:52,760
You should use it whenever you want to create a variable that will hold data that will never change.

131
00:09:53,180 --> 00:09:55,670
Let's say that we had an ID number, right?

132
00:09:55,670 --> 00:09:58,070
I'm just going to make up some sort of number.

133
00:09:58,340 --> 00:09:59,630
Let's say that this was the ID

134
00:09:59,930 --> 00:10:00,910
of our canister.

135
00:10:01,400 --> 00:10:06,560
When we create something with let, it means that the data inside it we're not planning on changing it

136
00:10:06,560 --> 00:10:07,100
later on.

137
00:10:07,340 --> 00:10:15,140
If later on, I decided that I wanted to reassign the value that's held inside this constant id, similar

138
00:10:15,140 --> 00:10:17,120
to the way that I did it with currentValue,

139
00:10:17,120 --> 00:10:22,940
so with the colon and then the equals sign, you can see that this is not going to work because this

140
00:10:22,940 --> 00:10:29,090
is a constant. It's immutable, so you can't change what's held inside it.

141
00:10:29,450 --> 00:10:36,470
And this is really useful when you want to declare something that will hold on to a say piece of data

142
00:10:36,770 --> 00:10:38,210
and you don't want it to change.

143
00:10:38,210 --> 00:10:41,600
And we're going to see this as we build more programs on ICP.

144
00:10:41,960 --> 00:10:49,070
So now we've seen how to create a variable, how to reassign a value into the variable, how to create

145
00:10:49,070 --> 00:10:56,390
a constant, how to import, and how to use the print function to print out either text or any sort

146
00:10:56,390 --> 00:10:59,060
of value of a variable or a constant.

147
00:10:59,360 --> 00:11:01,430
Now I want you to have a go.

148
00:11:01,640 --> 00:11:04,250
Hopefully you've got all of this code written.

149
00:11:04,250 --> 00:11:10,850
If you have, I want you to pause the video and make sure that you've got some notes in the form of

150
00:11:10,850 --> 00:11:13,550
code written down on your local computer.

151
00:11:13,580 --> 00:11:15,440
There's no point just watching me do things.

152
00:11:15,440 --> 00:11:16,520
It's not going to sink in.

153
00:11:17,150 --> 00:11:23,900
And I want to give you a small challenge by getting the print function to print out whatever is stored

154
00:11:23,900 --> 00:11:25,370
in your constant id.

155
00:11:25,640 --> 00:11:29,990
Now, you probably just mashed your keys and that's totally fine, but I want you to make sure that

156
00:11:29,990 --> 00:11:32,450
you can get it to show up down here.

157
00:11:32,990 --> 00:11:34,190
So pause the video,

158
00:11:34,220 --> 00:11:35,840
try and give this small challenge a good.

159
00:11:38,900 --> 00:11:39,260
All right.

160
00:11:39,260 --> 00:11:45,830
So we said that the key thing here was debug_show, which allows us to put a variable or a constant

161
00:11:45,830 --> 00:11:49,070
inside so that it can print into the console.

162
00:11:49,640 --> 00:11:56,750
Now, instead of currentValue, we're simply just going to change this to id. And now if I hit save

163
00:11:56,960 --> 00:11:59,930
and go ahead and deploy again,

164
00:12:03,240 --> 00:12:09,690
you can see that value is printed down here and quite handily it actually adds these underscores to

165
00:12:09,750 --> 00:12:13,980
show you the thousands, millions, etc..

166
00:12:14,310 --> 00:12:15,690
So did you manage to get this going?

167
00:12:15,960 --> 00:12:21,540
If not, have a review of the code and make sure that you've understood everything that was covered

168
00:12:21,540 --> 00:12:22,530
in today's lesson.

169
00:12:23,460 --> 00:12:29,250
In the next lesson, we're going to be taking our dbank a little bit further, and we're going to start

170
00:12:29,250 --> 00:12:33,200
allowing users to deposit funds and withdraw funds.

171
00:12:33,490 --> 00:12:35,130
So, for all of that and more,

172
00:12:35,460 --> 00:12:36,750
I'll see you on the next lesson.

