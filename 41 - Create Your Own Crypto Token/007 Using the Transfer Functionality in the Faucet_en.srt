1
00:00:00,360 --> 00:00:06,330
Now that we finally got the transfer functionality working, there's just one small inconsistency we

2
00:00:06,330 --> 00:00:09,540
have to fix, and that is with the faucet.

3
00:00:10,260 --> 00:00:17,730
Right now, you can see that our faucet function, the payOut function, is basically just putting the

4
00:00:17,730 --> 00:00:24,600
amount which we've set to be 10,000 tokens into the msg.caller's account,

5
00:00:24,600 --> 00:00:31,200
so whoever is logged in on the frontend. And they get to claim 10,000 DANG tokens.

6
00:00:31,440 --> 00:00:37,650
Now that's not quite how math works because we can't just give them 10,000.

7
00:00:37,650 --> 00:00:41,370
That 10,000 token has to come from somewhere, right?

8
00:00:41,760 --> 00:00:50,130
So if we're setting a total supply of 1 billion tokens and 10,000 tokens is just getting added to every

9
00:00:50,130 --> 00:00:56,070
ahd anybody's account, then eventually the total supply is going to increase and it's going to get out

10
00:00:56,070 --> 00:00:56,670
of control.

11
00:00:57,570 --> 00:01:06,270
What we want instead is for some of the tokens to be held by the canister, and when somebody claims

12
00:01:06,270 --> 00:01:12,690
some tokens, the canister will transfer it from the canister account into that person's account.

13
00:01:13,290 --> 00:01:20,010
And to do that, we have to have the transfer function already written and working, which we do now

14
00:01:20,490 --> 00:01:25,710
and we have to replace this balances.put with a transfer function.

15
00:01:26,100 --> 00:01:27,330
So it's pretty simple.

16
00:01:27,330 --> 00:01:33,660
All we need to do is to call the transfer function and we're going to pass in the person who we're paying

17
00:01:33,660 --> 00:01:38,190
to as the caller of this function,

18
00:01:38,190 --> 00:01:46,260
so the msg.caller. And then the amount that we're going to transfer is going to be the amount

19
00:01:46,260 --> 00:01:49,080
that we've set here, which is 10,000.

20
00:01:51,720 --> 00:01:58,770
And because this returns asynchronously a piece of text, we need to use await on that.

21
00:01:58,770 --> 00:02:05,670
And also we can capture that result which we can then return instead of the hardcoded success.

22
00:02:06,060 --> 00:02:12,330
Because remember, this function is going to return either success, if the transfer went through, or insufficient

23
00:02:12,330 --> 00:02:15,990
funds if in the case that our canister actually runs out of money.

24
00:02:16,500 --> 00:02:18,960
So this fixes that key problem.

25
00:02:19,140 --> 00:02:22,410
But if we go and test it, you'll see there's one problem.

26
00:02:23,070 --> 00:02:26,250
So let's go ahead and hit dfx deploy.

27
00:02:28,470 --> 00:02:32,700
Once it's deployed, we can go to our frontend and try to claim some tokens.

28
00:02:33,240 --> 00:02:41,190
Now the problem is we're going to get insufficient funds. And the insufficient funds occur when the from

29
00:02:41,190 --> 00:02:45,930
balance is not greater than the amount that's being requested.

30
00:02:46,920 --> 00:02:48,090
How is that possible?

31
00:02:48,120 --> 00:02:50,910
Well, that depends on where the balance is coming from.

32
00:02:51,420 --> 00:02:55,680
And in this case, the from is the caller of this transfer function.

33
00:02:56,040 --> 00:02:58,110
So the caller is her,

34
00:02:58,110 --> 00:03:04,380
it's another function, which means that it's actually this particular canister, our token canister,

35
00:03:04,710 --> 00:03:06,360
that's actually the caller.

36
00:03:06,840 --> 00:03:11,010
The token canister currently has a balance of zero

37
00:03:11,010 --> 00:03:16,620
and we can show that by simply going up in the deploy.

38
00:03:17,010 --> 00:03:22,440
And you can see that there's two canisters; upgrading code for canister token and token assets.

39
00:03:22,860 --> 00:03:27,180
So token is the canister where this money is being transferred from.

40
00:03:27,720 --> 00:03:32,520
And if we copy the canister id for it and yours will be different,

41
00:03:33,090 --> 00:03:38,100
if you paste it into the check balance, you can see it's got zero DANG.

42
00:03:38,130 --> 00:03:45,180
So that's why it's not able to transfer 10,000 DANG to the person who's claiming from the faucet.

43
00:03:45,930 --> 00:03:47,280
How do we fix this?

44
00:03:47,310 --> 00:03:56,820
Well, we can transfer our canister some funds. Because our canister ID is not really known until we actually

45
00:03:56,820 --> 00:03:58,080
deploy our code,

46
00:03:58,470 --> 00:04:05,340
it's not really a good idea to use this particular ID because a) it could change, and b) you don't know this

47
00:04:05,580 --> 00:04:08,910
when you first deploy your canister.

48
00:04:09,510 --> 00:04:13,650
So instead what we're going to do is we're going to call the transfer function, but we're going to

49
00:04:13,650 --> 00:04:15,000
call it from the command line.

50
00:04:15,450 --> 00:04:18,120
And if you take a look inside the read me,

51
00:04:18,750 --> 00:04:25,680
if you scroll down to the section where we've got charge the canister, you can see step by step how

52
00:04:25,680 --> 00:04:29,040
we're going to do this and each of the commands that you can copy.

53
00:04:29,580 --> 00:04:34,830
The first thing we're going to do is we're going to check our canister ID using dfx canister ID token.

54
00:04:35,190 --> 00:04:41,230
So paste that into a terminal and you can see that is this one for me.

55
00:04:41,280 --> 00:04:43,140
It will probably be different for you.

56
00:04:43,860 --> 00:04:48,780
Now, the next thing we're going to do is we're going to save that ID into a format that can be recognized

57
00:04:48,780 --> 00:04:50,130
as a principal.

58
00:04:50,430 --> 00:04:54,480
So it's principal and then it's space, and then it's got some double quotes around it.

59
00:04:54,840 --> 00:04:59,970
But this line of code is going to do it automatically for you, so you don't even have to worry about

60
00:04:59,970 --> 00:05:00,100
it.

61
00:05:00,120 --> 00:05:02,510
It's going to call that command that we call just now:

62
00:05:02,520 --> 00:05:04,070
dfx canister id token,

63
00:05:04,440 --> 00:05:09,090
and then it's going to insert the result into this formatting which we need, and then it's going

64
00:05:09,090 --> 00:05:13,050
to save it into this variable in the command line called CANISTER_PUBLIC_KEY.

65
00:05:13,740 --> 00:05:15,330
Let's go ahead and do that.

66
00:05:15,840 --> 00:05:18,120
Once we've done that, let's check that it worked.

67
00:05:18,150 --> 00:05:20,330
So we're going to use echo to print it out.

68
00:05:20,340 --> 00:05:26,340
And you can see it's in the format that we need, which is lowercase principal "

69
00:05:26,340 --> 00:05:28,800
and then the id of our canister."

70
00:05:29,370 --> 00:05:36,480
Now finally, we can transfer half a billion tokens to the canister, and remember that the user in the

71
00:05:36,480 --> 00:05:40,140
command line is the user who owns all the funds,

72
00:05:40,140 --> 00:05:40,440
right?

73
00:05:40,740 --> 00:05:44,610
So this is the owner, which is the caller from the command line.

74
00:05:45,210 --> 00:05:51,960
So now, that caller from the command line which owns a billion tokens, is going to call the transfer

75
00:05:51,960 --> 00:05:57,780
function and transfer half a billion to the canister using this command.

76
00:05:57,960 --> 00:06:04,470
Once we go ahead and do that and hit enter and it has returned success, then if we come back and we

77
00:06:04,470 --> 00:06:11,210
refresh this website and take our canister ID and check its balance, you can see that it's got half

78
00:06:11,210 --> 00:06:12,180
a billion DANG.

79
00:06:12,720 --> 00:06:19,770
Now, that means that we're able to transfer this money, this 10,000 DANG from the canister to the

80
00:06:19,770 --> 00:06:25,790
claimant, which is the person who's operating the frontend website and it's now returning success.

81
00:06:25,800 --> 00:06:32,550
And we fixed that small issue and we've now been able to transfer the money instead of simply just hard

82
00:06:32,550 --> 00:06:38,880
coding it into the ledger, which is a lot more logical and it makes a lot more sense in this case.

