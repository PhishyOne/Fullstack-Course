1
00:00:00,330 --> 00:00:00,630
All right.

2
00:00:00,640 --> 00:00:06,810
So now that we've seen that our frontend is up and working, we can move on to the next step which is

3
00:00:06,810 --> 00:00:10,200
getting this check balance section to actually work.

4
00:00:10,740 --> 00:00:16,050
Now for someone to actually have a balance, we actually have to assign it to them.

5
00:00:16,500 --> 00:00:25,890
So we basically have to write some code in our main.mo that assigns a amount of token to a particular

6
00:00:25,890 --> 00:00:26,400
user.

7
00:00:26,430 --> 00:00:28,170
So who are we going to assign it to?

8
00:00:28,710 --> 00:00:32,670
Well, we're going to have a owner that owns the tokens.

9
00:00:32,850 --> 00:00:36,990
So in the case of the DAngela coin, it will be me.

10
00:00:37,380 --> 00:00:41,850
And in the case of the coins that you're going to be creating, it's going to be yourself.

11
00:00:42,390 --> 00:00:46,500
So how can we identify ourselves to know who to give it to?

12
00:00:46,650 --> 00:00:51,210
Well, in the Internet computer, there's this type which is called a principal.

13
00:00:51,630 --> 00:00:55,500
And this is a way of identifying users and canisters.

14
00:00:55,680 --> 00:01:02,700
So it basically gives us an ID to be able to uniquely identify either a particular canister that's

15
00:01:02,700 --> 00:01:07,770
running some sort of smart contract, or a particular user that's interacting with the canister.

16
00:01:08,220 --> 00:01:14,520
Now, the principle type has a number of functions that can be associated with it.

17
00:01:14,760 --> 00:01:20,670
And it's something that we're going to be using to assign ourselves the starting allocation of all of

18
00:01:20,670 --> 00:01:21,510
our tokens.

19
00:01:21,930 --> 00:01:30,270
Now, as I mentioned, the user has a uniquely identifying principle ID, and we can get hold of that

20
00:01:30,270 --> 00:01:38,250
by typing into the command line dfx identity get -principal.

21
00:01:38,850 --> 00:01:47,880
And once you hit enter on that, it will give you the principal ID of the default user, which is yourself.

22
00:01:48,180 --> 00:01:53,820
And this is the ID that we're going to be assigning our tokens to when we create our canister.

23
00:01:54,270 --> 00:02:01,590
So as soon as we mint our freshly made tokens, let's say we're going to make a billion tokens, then

24
00:02:01,590 --> 00:02:07,110
we're going to assign all of those tokens to the owner, which is yourself through this ID.

25
00:02:08,070 --> 00:02:14,220
Let's go ahead and create a new actor in our main.mo.

26
00:02:14,730 --> 00:02:22,350
So we're going to call our actor Token with a capital T, and inside this actor we're going to create

27
00:02:22,350 --> 00:02:23,280
some variables.

28
00:02:23,820 --> 00:02:27,810
The first variable we're going to create is going to be the owner.

29
00:02:28,080 --> 00:02:30,060
In this case, it's going to be yourself.

30
00:02:30,480 --> 00:02:37,440
So this is going to be assigned the principal ID that you just got hold of. So we can define its data

31
00:02:37,440 --> 00:02:39,180
type as principal.

32
00:02:39,540 --> 00:02:44,070
Now, in order to use this data type, as always, we're going to have to import it.

33
00:02:47,080 --> 00:02:55,540
And then once we've got hold of that data type, we can use one of the methods in the data type, which

34
00:02:55,540 --> 00:03:04,030
is called fromText, in order to convert a piece of text into a principal data type.

35
00:03:04,630 --> 00:03:10,840
So as you notice here when we got hold of our actual principal ID, this is just a piece of text.

36
00:03:10,840 --> 00:03:11,890
It's a string, right?

37
00:03:12,310 --> 00:03:20,170
So we're going to use Principal.fromText and we're going to parse in this string. So you can select

38
00:03:20,170 --> 00:03:25,450
all of it, make sure that you got the entire long string with all the dashes and everything from the

39
00:03:25,450 --> 00:03:26,290
beginning to the end.

40
00:03:26,680 --> 00:03:33,970
Hit command+c to copy and then we can paste it into here so that we actually get hold of this principal

41
00:03:34,270 --> 00:03:37,840
and we can use it when we assign ourselves some tokens.

42
00:03:38,710 --> 00:03:43,660
Now, in addition to the owner, we're also going to create some other variables.

43
00:03:43,840 --> 00:03:48,130
So for example, we're going to create something called the totalSupply.

44
00:03:48,580 --> 00:03:56,470
So this is going to be the totalSupply of our particular token, and it's going to be a data type of

45
00:03:56,470 --> 00:03:57,280
natural number,

46
00:03:57,640 --> 00:03:59,320
so it can't go below zero.

47
00:03:59,350 --> 00:04:04,330
And I'm going to set it to 1 billion, so I'm going to mint 1 billion of my own tokens.

48
00:04:04,690 --> 00:04:06,700
So that's nine zeros.

49
00:04:09,400 --> 00:04:15,030
And finally, I'm going to give my token a symbol as well.

50
00:04:15,040 --> 00:04:18,720
So I'll just create something called symbol, which will be text

51
00:04:18,730 --> 00:04:25,720
and this is going to be the decentralized Angela coin, also for short known as DANG.

52
00:04:26,440 --> 00:04:29,530
You'll notice that many crypto tokens have an abbreviation.

53
00:04:29,680 --> 00:04:36,520
For example, ether goes by eth or ETH, and this is modeled after real currencies.

54
00:04:36,520 --> 00:04:41,290
So USD for U.S. dollars or GBP for great British pounds.

55
00:04:41,650 --> 00:04:50,740
And you've got coins such as Ethereum, so ETH, or something like DOGE for the dogecoin.

56
00:04:51,100 --> 00:04:55,450
So we're just going to create our own currency name and you can name it whatever you like.

57
00:04:55,720 --> 00:05:01,660
In my case, mine is going to be called DANG, and it's up to you what you want to call your own tokens.

58
00:05:02,350 --> 00:05:07,510
But once we've created that, we now have to figure out a way to create our ledger.

59
00:05:07,810 --> 00:05:15,610
Our ledger is just going to be a data store that stores the id of a particular user or canister,

60
00:05:16,120 --> 00:05:19,780
and then it's going to be the amount of token,

61
00:05:19,780 --> 00:05:23,140
so in this case DANG tokens that they possess.

62
00:05:23,830 --> 00:05:26,460
So the thought might have come to you as well.

63
00:05:26,590 --> 00:05:30,340
A good data structure for this would be a dictionary.

64
00:05:30,940 --> 00:05:37,750
And there's something that's very similar to a dictionary in Motoko, which is called a HashMap.

65
00:05:38,650 --> 00:05:46,090
A HashMap in Motoko is commonly known as a hash table in other languages, and it's basically a way

66
00:05:46,090 --> 00:05:49,780
of mapping a key to a value.

67
00:05:50,380 --> 00:05:55,540
And the nice thing about HashMaps is they don't really have an explicit required data type.

68
00:05:55,870 --> 00:05:59,290
So you could put your own objects in there, your own data types.

69
00:05:59,680 --> 00:06:09,010
And it's a really efficient way of indexing items so that you can hash the key and be able to store

70
00:06:09,010 --> 00:06:14,230
it into a location in the memory of the computer to store your value.

71
00:06:15,010 --> 00:06:20,740
And when you're looking for the value, you can simply find it by looking at the position of the hash.

72
00:06:21,310 --> 00:06:26,770
But for all intents and purposes, you can consider a HashMap just like you would work with a dictionary.

73
00:06:27,160 --> 00:06:29,530
It's got a key and it's got a value.

74
00:06:29,530 --> 00:06:33,010
And in order to get hold of a value, you have to provide the key.

75
00:06:33,490 --> 00:06:37,780
And we're going to be using it to create a variable called balances.

76
00:06:38,290 --> 00:06:45,100
And this is basically a way for us to keep track of who owns how much of our custom token.

77
00:06:46,120 --> 00:06:48,850
In order to use the HashMap again, we have to import it.

78
00:06:51,510 --> 00:06:56,100
So make sure that you've got the capital H, capital M and also here as well.

79
00:06:56,790 --> 00:07:01,470
And we're going to set our balances to equal a HashMap.

80
00:07:02,160 --> 00:07:06,060
We're going to use the equal sign and then HashMap.HashMap.

81
00:07:06,780 --> 00:07:11,430
And we get to assign what the data type will be for the key and the value.

82
00:07:12,000 --> 00:07:18,690
And the key, in our case, is going to be the principal data type, because remember, we're trying to

83
00:07:18,990 --> 00:07:24,660
associate a bunch of IDs with an amount that that ID owns.

84
00:07:25,020 --> 00:07:33,090
So it'll be a user or a canister, and then that will be linked to the amount of our custom token that

85
00:07:33,090 --> 00:07:33,570
they own.

86
00:07:34,050 --> 00:07:38,910
So in that case, the value is going to be of type Nat, it's just going to be a natural number.

87
00:07:40,050 --> 00:07:46,680
And once we've done that, we're going to initialize our new HashMap with a set of parentheses, and

88
00:07:46,680 --> 00:07:48,450
we have to provide three inputs.

89
00:07:48,810 --> 00:07:52,440
What is the initial size of our HashMap? Which we're going to set as one.

90
00:07:52,950 --> 00:07:58,010
Next, how are we going to check for the equality of our keys?

91
00:07:58,020 --> 00:08:02,670
So when we give our HashMap a key, how is it going to check against the actual HashMap?

92
00:08:03,210 --> 00:08:09,630
Well, thankfully, because we're using the principal type, they've helpfully provided a method in

93
00:08:09,630 --> 00:08:16,770
here called equal which we can use to check that a principal that we give our balance equals the principal

94
00:08:16,770 --> 00:08:17,460
thats stored.

95
00:08:18,180 --> 00:08:24,300
And finally, we have to tell this HashMap how it should hash those keys now. Because those keys are,

96
00:08:24,300 --> 00:08:25,400
again, principals,

97
00:08:25,410 --> 00:08:31,830
we're going to use a method from the principal type called Principal.hash which knows how to hash

98
00:08:31,830 --> 00:08:33,299
out principle IDs.

99
00:08:33,600 --> 00:08:38,760
So now you should have this variable which is set to equal this HashMap.

100
00:08:40,020 --> 00:08:47,880
And we can now go ahead and add our owner to this ledger as the first entry.

101
00:08:48,510 --> 00:08:57,420
So to do that, we tap into our balances and we say .put. And .put is going to insert the value,

102
00:08:57,420 --> 00:09:04,980
whatever we supply, at a particular key, which we also supply, and it will overwrite any existing entries

103
00:09:04,980 --> 00:09:05,970
with the same key.

104
00:09:06,690 --> 00:09:11,760
So because we're doing this as the first order of business, there won't be anything in here.

105
00:09:11,760 --> 00:09:13,050
It's completely empty.

106
00:09:13,440 --> 00:09:22,470
So we're going to put our owner as the principal key and the value is going to be the total supply.

107
00:09:23,100 --> 00:09:30,720
So basically in this line of code, we've added our owner's principal into our ledger of balances and

108
00:09:30,720 --> 00:09:37,230
we've given all of the tokens that we're going to mint to the owner, which should be yourself.

109
00:09:37,500 --> 00:09:44,070
So now that we've created our ledger, we have to figure out a way to be able to query in order to find

110
00:09:44,070 --> 00:09:45,720
out who owns how much,

111
00:09:46,020 --> 00:09:48,120
so a check balance method.

112
00:09:49,020 --> 00:09:58,530
I'm going to create a new public query function which is going to be called balanceOf. And in the balance

113
00:09:58,530 --> 00:09:59,160
Of method,

114
00:09:59,160 --> 00:10:04,530
we're going to supply the who, which in this case is going to be of type principal.

115
00:10:05,070 --> 00:10:12,240
So we're going to query how much balance does this particular ID own in our ledger from our balance

116
00:10:12,240 --> 00:10:12,810
HashMap?

117
00:10:13,080 --> 00:10:18,930
And then we're going to asynchronously return the output, which is going to be a natural number because

118
00:10:18,930 --> 00:10:27,150
it's going to be the value that's inside this HashMap that's associated with the queried ID.

119
00:10:27,900 --> 00:10:34,110
So we want to check if the balances.get--

120
00:10:35,230 --> 00:10:43,330
This .get allows us to pass in a key and get hold of the stored value.

121
00:10:43,930 --> 00:10:52,150
But notice here that if it doesn't have that particular key and there's no associated value, then it's

122
00:10:52,150 --> 00:10:53,650
going to return null.

123
00:10:54,850 --> 00:11:01,870
What if we check that this particular principlal ID that was passed in, so balances.get pass in the

124
00:11:01,870 --> 00:11:06,850
who, and if that is equal to null,

125
00:11:07,300 --> 00:11:15,160
well, in that case, we want to return zero because that particular ID doesn't have any associated

126
00:11:15,160 --> 00:11:17,230
balance in our ledger.

127
00:11:17,830 --> 00:11:24,790
However, if it doesn't return null, then it means that it succeeded and we should be able to return

128
00:11:25,120 --> 00:11:26,410
the actual balance.

129
00:11:26,420 --> 00:11:29,800
So balances.get(who).

130
00:11:30,760 --> 00:11:38,020
Now, there's just one problem with this code, and the problem is that this expression, when we use

131
00:11:38,020 --> 00:11:43,660
a get on a HashMap, it outputs a data type of ?

132
00:11:43,660 --> 00:11:47,540
Nat. And instead of an actual natural number.

133
00:11:47,620 --> 00:11:49,600
So what's this question mark business?

134
00:11:49,990 --> 00:11:52,210
Well, it's a data type called an Option.

135
00:11:52,420 --> 00:11:55,420
And if you've done Swift, you would have heard the Optional.

136
00:11:55,810 --> 00:11:59,920
So basically it's very, very similar to that concept.

137
00:12:00,430 --> 00:12:02,200
Essentially, it's a typesave.

138
00:12:02,200 --> 00:12:02,560
null.

139
00:12:03,190 --> 00:12:13,090
What it means is that it retains the data type of a particular value, but it can be null or it can

140
00:12:13,090 --> 00:12:13,930
have a value.

141
00:12:14,860 --> 00:12:21,310
The way that we're supposed to deal with these optionals is we're supposed to use a switch statement to

142
00:12:21,310 --> 00:12:29,650
check if it's null or if it, in fact, is an optional of a particular data type.

143
00:12:30,310 --> 00:12:37,540
Let's transplant this into our situation and we can sub the required parts for what we need.

144
00:12:38,200 --> 00:12:43,690
So let's create a constant with the let which we'll call the balance.

145
00:12:44,560 --> 00:12:53,810
And this is going to be a natural number and we're going to switch using this method balances.

146
00:12:53,830 --> 00:12:57,010
get and then we're going to pass in the who.

147
00:12:57,580 --> 00:13:03,520
And in order for it to switch on the entire statement, we're going to have to wrap it inside a pair

148
00:13:03,520 --> 00:13:04,990
of parentheses, like that.

149
00:13:06,010 --> 00:13:14,200
Now, in the case that the result of this function call is null, then we want to set the balance to

150
00:13:14,200 --> 00:13:15,150
equal zero.

151
00:13:15,730 --> 00:13:19,840
But in the case that it is an optional that gets returned,

152
00:13:19,870 --> 00:13:22,360
so our optional result,

153
00:13:23,350 --> 00:13:27,220
well then we want to simply return that result.

154
00:13:27,580 --> 00:13:34,240
This syntax, it's actually not that difficult if you know how switch statements work, which you should,

155
00:13:34,510 --> 00:13:39,160
because we've covered it in JavaScript. But the syntax is formatted differently.

156
00:13:39,340 --> 00:13:45,610
Essentially, we're checking the result or the outcome of this method call,

157
00:13:45,970 --> 00:13:53,950
so passing in the ID of the person we're checking into our balances ledger and we'll get the value

158
00:13:53,950 --> 00:13:56,470
of how much of this currency that they own.

159
00:13:57,130 --> 00:14:03,130
And then once we get that result, because it's an optional, we have the check in case the result is

160
00:14:03,130 --> 00:14:07,180
null, in which case we set this balance constant to zero.

161
00:14:07,660 --> 00:14:16,000
But if the result is an optional, then we'll set the balance to the result and we get rid of that optional

162
00:14:16,000 --> 00:14:16,840
question mark.

163
00:14:17,110 --> 00:14:22,840
Now, instead of having this if statement, we can simply return our balance.

164
00:14:23,500 --> 00:14:29,710
And because this balance is a natural number which is what we want to output, we get rid of all of

165
00:14:29,710 --> 00:14:30,640
these problems.

166
00:14:30,700 --> 00:14:37,370
Now that we've done all of that, we're finally ready to actually to do our dfx deploy again.

167
00:14:37,390 --> 00:14:38,770
So save your main.

168
00:14:38,770 --> 00:14:39,010
mo

169
00:14:39,040 --> 00:14:41,460
file with all the updated code.

170
00:14:41,830 --> 00:14:51,100
Go ahead and run dfx deploy which should now put yourself, your own principal, as the owner of a billion

171
00:14:51,100 --> 00:14:53,410
tokens of your own currency.

172
00:14:54,010 --> 00:15:01,540
Now, in order to call the balanceOf method from the command line, we have to get hold of our principal

173
00:15:01,540 --> 00:15:04,240
ID to pass in as an input.

174
00:15:04,840 --> 00:15:07,480
Now there's a little bit of formatting that's involved as well,

175
00:15:07,480 --> 00:15:13,570
but don't worry, I'm going to walk you through step by step. If you head over to the README.md

176
00:15:13,570 --> 00:15:16,240
file that's included in the starter project,

177
00:15:16,690 --> 00:15:24,460
you can view this markdown file in its proper formatting by clicking on this button here with the magnifying

178
00:15:24,460 --> 00:15:27,600
glass. In order to check our balance,

179
00:15:27,610 --> 00:15:31,330
the first thing we're going to do is we're going to find out our principal ID.

180
00:15:31,660 --> 00:15:34,210
So you've already seen that we can use this command

181
00:15:34,420 --> 00:15:39,350
dfx identity get -principal in order to get hold of the owner, so ourselves,

182
00:15:39,370 --> 00:15:48,820
principal ID. I'm just going to open up a new terminal window here which is inside my token project.

183
00:15:48,910 --> 00:15:54,250
So it's really easy from VSCode because it always knows where you are. And I'm going to paste that

184
00:15:54,250 --> 00:15:54,790
in here.

185
00:15:55,030 --> 00:15:59,830
And once we hit enter, you should see that principal that you got earlier on.

186
00:16:00,370 --> 00:16:05,170
And the reason why I've got this read me is because there's a lot of code that we're going to write

187
00:16:05,170 --> 00:16:07,720
into the command line in order to issue commands.

188
00:16:08,170 --> 00:16:13,030
And if you get any of these wrong or if you make a typo, it's really difficult to tell where you went

189
00:16:13,030 --> 00:16:13,360
wrong.

190
00:16:13,780 --> 00:16:19,510
So instead you can just copy and paste the commands, which is a lot easier. Once you've got hold of

191
00:16:19,510 --> 00:16:20,380
your principal,

192
00:16:20,770 --> 00:16:23,020
I want you to go ahead and save it somewhere.

193
00:16:23,020 --> 00:16:29,830
So inside the README.md you can see I've got this section 2 where it says save it somewhere and I want

194
00:16:29,830 --> 00:16:32,980
you to just go ahead and replace the xxx-yyy.

195
00:16:34,150 --> 00:16:40,840
This is really useful because you always have to know in the future who you as a user is.

196
00:16:41,440 --> 00:16:48,370
Now, we're not going to use that right now, but instead we're going to format our principal ID into

197
00:16:48,370 --> 00:16:53,170
a format that the method, balanceOf, will accept.

198
00:16:53,440 --> 00:16:59,800
So because it wants a principal data type, we can't just simply pass this in as text.

199
00:17:00,460 --> 00:17:03,580
In order to format this, we're going to use this command.

200
00:17:03,900 --> 00:17:05,560
I'm just going to walk you through what it does.

201
00:17:06,010 --> 00:17:10,540
We're going to create a new variable in the command line called the OWNER_PUBLIC_KEY.

202
00:17:11,230 --> 00:17:18,490
And it's going to be set to a string or a piece of text that starts out with the word principal, lowercase,

203
00:17:19,060 --> 00:17:26,859
a space, and then in between a set of double quotes, it's going to paste in whatever it is result

204
00:17:27,160 --> 00:17:33,400
of this command, which is dfx identity get -principle, which, as you know, generates this string.

205
00:17:33,850 --> 00:17:38,980
So let's give it a go. Let's copy that entirely and then paste it in here and hit enter.

206
00:17:39,550 --> 00:17:45,340
Now, you won't see much after that, but we can confirm that it worked by using the echo command,

207
00:17:45,640 --> 00:17:49,240
which will print out the value of any of our variables.

208
00:17:49,480 --> 00:17:53,290
And this is the variable that we just created, the OWNER_PUBLIC_KEY.

209
00:17:53,290 --> 00:18:01,390
So let's paste that line in here and you should see that we've got this formatting exactly as our method

210
00:18:01,390 --> 00:18:10,210
requires it, which is principal "the actual principal ID"

211
00:18:10,210 --> 00:18:10,810
at the end.

212
00:18:11,380 --> 00:18:16,090
So now we can use this to actually check the owner's balance.

213
00:18:16,090 --> 00:18:22,030
So we're going to call this token, which is our canister over here, our main.

214
00:18:22,030 --> 00:18:26,560
mo, we're going to call the method balanceOf, which is this one.

215
00:18:27,100 --> 00:18:34,690
And then inside the parentheses, we're going to pass in the who as the OWNER_PUBLIC_KEY, so our own

216
00:18:34,690 --> 00:18:35,410
public key.

217
00:18:36,070 --> 00:18:42,640
Again, copy this command in its entirety and then paste it into the terminal.

218
00:18:43,030 --> 00:18:47,050
And once you hit enter, it should give you the result.

219
00:18:47,050 --> 00:18:56,980
And it tells me that I've got 1 billion of these tokens that belong to my principal ID and it's also

220
00:18:56,980 --> 00:18:57,760
a natural number.

221
00:18:58,000 --> 00:18:59,320
So that's perfect.

222
00:18:59,650 --> 00:19:06,250
That means that everything we've done so far where we created our balances HashMap, and we gave the

223
00:19:06,250 --> 00:19:14,380
owner, ourselves, our own public key, the entire supply of tokens, and we're also able to use our balance

224
00:19:14,380 --> 00:19:16,330
Of method to query it.

225
00:19:17,050 --> 00:19:23,620
All that's left to do now is to hook up our backend with the frontend, which is our balance.jsx

226
00:19:23,980 --> 00:19:30,280
and to be able to do the same thing in our website using our front-end.

227
00:19:30,670 --> 00:19:33,790
So for all of that and more, I'll see you on the next lesson.

