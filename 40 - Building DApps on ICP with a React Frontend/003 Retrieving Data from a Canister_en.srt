1
00:00:00,150 --> 00:00:07,440
Now that we've managed to create a note and be able to add it to our back end, the next step is to

2
00:00:07,440 --> 00:00:13,930
be able to take these notes that we've stored and be able to serve it back up onto the front end.

3
00:00:13,950 --> 00:00:19,560
So there's a lot of this back and forth going on, but it's all done in order to be able to persist

4
00:00:19,560 --> 00:00:21,360
our data across time.

5
00:00:21,750 --> 00:00:28,380
So as I mentioned, at the moment, whenever we create a note and we refresh our front end, it disappears.

6
00:00:28,830 --> 00:00:32,970
But that actually does, in fact, get added into our back end.

7
00:00:32,970 --> 00:00:40,110
And you can see now our notes list contains a Note1 and also this mumbo jumbo that I just typed in

8
00:00:40,110 --> 00:00:40,740
just now.

9
00:00:41,250 --> 00:00:45,210
So how can we get that back out and to be able to display it in our app?

10
00:00:45,750 --> 00:00:51,030
Well, the first thing we're going to do is we're going to work on our back end and we're going to create

11
00:00:51,030 --> 00:00:52,440
a new function.

12
00:00:52,950 --> 00:00:55,290
Now, it's going to be a public function.

13
00:00:55,410 --> 00:01:02,520
But remember, when we're reading from the ICP blockchain, it's done a lot faster when we don't need

14
00:01:02,520 --> 00:01:04,230
to modify anything.

15
00:01:04,260 --> 00:01:11,190
And because all we're doing is just reading this list of notes, we can add that query keyword to

16
00:01:11,190 --> 00:01:13,200
speed the whole thing up a lot more.

17
00:01:13,800 --> 00:01:22,260
We're creating a public query function and I'm going to call it readNotes, and it's not going to accept

18
00:01:22,260 --> 00:01:30,090
any inputs, but it is going to return asynchronously and going to give us not a list of notes, but

19
00:01:30,090 --> 00:01:31,890
actually an array of notes.

20
00:01:32,160 --> 00:01:40,290
So an array is another object in Motoko code that we can use, and structurally it's a lot more similar

21
00:01:40,290 --> 00:01:42,450
to the arrays that we've got in JavaScript.

22
00:01:43,020 --> 00:01:48,600
If we return an array of notes, then we'll be able to work with it much more easily when we get hold

23
00:01:48,600 --> 00:01:49,980
of it in our JavaScript.

24
00:01:50,670 --> 00:01:53,390
Now, why are we storing it as a list, though?

25
00:01:53,400 --> 00:01:59,520
Because in a lot of the operations we're doing, when we're pushing notes onto it or when we're finding

26
00:01:59,520 --> 00:02:05,610
a note to delete later on, working with something that's an array which is serialized is not very efficient

27
00:02:05,610 --> 00:02:06,360
on the blockchain.

28
00:02:06,960 --> 00:02:09,990
So when we're reading it, we're going to get hold of our lists.

29
00:02:10,500 --> 00:02:17,250
So we're going to return our notes, but we're going to convert it into an array.

30
00:02:17,400 --> 00:02:25,380
So we're going to use a function from our list documentation that I found which is called toArray,

31
00:02:26,190 --> 00:02:29,040
and this will convert a list to an array.

32
00:02:29,790 --> 00:02:34,740
There was quite a lot of digging around in order to find these because as you can tell, going through

33
00:02:34,740 --> 00:02:40,680
the documentation, the Motoko programming language is still not yet fully featured,

34
00:02:40,680 --> 00:02:45,720
so it's not got as many utility functions as, say, JavaScript or Python.

35
00:02:46,080 --> 00:02:47,760
But we can make it work.

36
00:02:48,570 --> 00:02:49,500
That's what we're going to use.

37
00:02:49,500 --> 00:02:52,080
We're going to say list.toAarray.

38
00:02:52,380 --> 00:02:58,110
And this takes just one argument, which is the list that you want to convert, and it's going to return

39
00:02:58,110 --> 00:03:00,420
it in the format of an array.

40
00:03:01,140 --> 00:03:07,710
We're going to pass on notes into here and we're going to return that as an array of note objects.

41
00:03:07,980 --> 00:03:16,860
So the Motoko side is pretty simple, but now we have to address how do we get hold of it when our page

42
00:03:16,860 --> 00:03:17,640
loads up?

43
00:03:18,390 --> 00:03:28,260
Because when we add a new note, the set note method makes sure that this note's constant is updated.

44
00:03:28,770 --> 00:03:34,320
And because we're using the useState hook, that means whenever it's updated, it's going to re-render

45
00:03:34,320 --> 00:03:38,580
the screen and be able to draw on the new note that was created.

46
00:03:38,760 --> 00:03:43,530
But now how do we tap into the moment when the first render is done,

47
00:03:43,740 --> 00:03:46,050
when our website first loads up?

48
00:03:46,710 --> 00:03:50,460
Well, in order to do that, we have to use another React hook.

49
00:03:50,700 --> 00:03:52,890
And this is called the useEffect

50
00:03:52,890 --> 00:03:59,260
hook. useEffect is triggered every time the render function gets called in React.

51
00:03:59,280 --> 00:04:01,950
So every time the React component re-renders.

52
00:04:01,980 --> 00:04:04,170
So in this case, it's the app component.

53
00:04:04,530 --> 00:04:10,590
And of course that means the first time when the website is rendered to be displayed, it will also

54
00:04:10,590 --> 00:04:11,280
be triggered.

55
00:04:11,850 --> 00:04:18,089
So let's go ahead and add this to our code so that we can trigger a function whenever the app component

56
00:04:18,089 --> 00:04:19,350
is re-rendered.

57
00:04:20,130 --> 00:04:23,910
This function useEffect takes two parameters.

58
00:04:24,330 --> 00:04:30,260
The first parameter is the function that should be called whenever the re-rendering happens

59
00:04:30,270 --> 00:04:35,850
and I'm going to use the shorthand with my fat arrows that comes from ES6.

60
00:04:36,540 --> 00:04:42,120
And this function takes no inputs and no outputs, but it is going to do something.

61
00:04:42,120 --> 00:04:46,140
So first, just to assure ourselves that it's actually working,

62
00:04:46,470 --> 00:04:54,560
let's first console.log when the useEffect is triggered. And let's save it,

63
00:04:54,570 --> 00:04:59,070
let's go back to our Keeper app and open up our console.

64
00:05:00,240 --> 00:05:04,300
You can see that useEffect is triggered already because it's been reloaded.

65
00:05:04,320 --> 00:05:08,730
So if I reload this website you can see that line gets logged.

66
00:05:09,150 --> 00:05:16,440
So in that moment, it would be great if we could also pull out the array of notes from our Motoko code.

67
00:05:17,040 --> 00:05:18,490
Inside our useEffect,

68
00:05:18,540 --> 00:05:23,070
we're going to call a function that we're going to create, which is going to be called fetchData.

69
00:05:25,240 --> 00:05:30,850
And the reason why I'm splitting out this fetchData is because this fetchData has to be asynchronous

70
00:05:31,270 --> 00:05:35,980
and useEffect can't really be turned into an asynchronous function itself.

71
00:05:36,610 --> 00:05:39,160
Let's create this async function

72
00:05:43,300 --> 00:05:44,200
fetchData.

73
00:05:47,230 --> 00:05:53,110
And let's make it get hold of our data from our Motoko code.

74
00:05:53,230 --> 00:05:57,110
So we're going to tap into our dkeeper canister

75
00:05:57,610 --> 00:06:01,660
and we're going to call that method that we created here called readNotes.

76
00:06:03,770 --> 00:06:11,420
And this then should be able to return us that array which we can store in a local constant, which

77
00:06:11,420 --> 00:06:17,450
we can call the notes array. Because this is going to be returned asynchronously,

78
00:06:17,840 --> 00:06:19,100
we have to wait on it.

79
00:06:19,100 --> 00:06:24,890
So we have to add the await keyword in front of this method call so that we wait for this to come

80
00:06:24,890 --> 00:06:26,660
back before we continue.

81
00:06:26,840 --> 00:06:34,730
Now, whenever our window loads, it's going to trigger the console.log but also our fetchData.

82
00:06:35,270 --> 00:06:39,140
And then this method is going to wait until it gets that array back.

83
00:06:39,680 --> 00:06:47,390
And once it gets it though, we want to be able to update our notes using the update method setNotes.

84
00:06:48,020 --> 00:06:51,470
So just below this constant, I'm going to say setNotes.

85
00:06:52,100 --> 00:06:59,390
And inside I'm just going to say set everything to the new objects inside the notes array.

86
00:07:00,050 --> 00:07:04,730
And that is going to trigger a re-render because our state updated.

87
00:07:05,180 --> 00:07:10,310
So you can imagine that we could get ourselves very quickly into an infinite loop here,

88
00:07:10,320 --> 00:07:10,610
right?

89
00:07:10,730 --> 00:07:17,420
Because we have setNodes which is going to update the state of our nodes constant, which then is

90
00:07:17,420 --> 00:07:21,050
going to trigger a rerender of our app React component.

91
00:07:21,470 --> 00:07:27,800
And as we mention, every time the app component gets re-rendered, it triggers the useEffect.

92
00:07:28,310 --> 00:07:33,050
So this could go on forever and we can see this happening when we console.log.

93
00:07:33,530 --> 00:07:36,480
If we go ahead and run dfx deploy,

94
00:07:37,040 --> 00:07:41,870
you can see that useEffect is triggered many, many, many times.

95
00:07:42,790 --> 00:07:47,640
And when we want to add a newNote, you can see that it sort of works

96
00:07:47,680 --> 00:07:52,360
but useEffect is triggered so many times because it's in this endless loop.

97
00:07:52,780 --> 00:07:59,470
So what we need to know is that the useEffect hook actually has a second parameter, and the second

98
00:07:59,470 --> 00:08:08,170
parameter is an array where we can specify a particular prop or some sort of variable which it checks

99
00:08:08,170 --> 00:08:12,280
to see if it's changed before it triggers the function in useEffect.

100
00:08:12,580 --> 00:08:20,590
So we can use this second parameter to prevent the useEffect from triggering more than once by putting

101
00:08:20,590 --> 00:08:22,180
in an empty array.

102
00:08:22,210 --> 00:08:25,660
And this will ensure that useEffect will run only once.

103
00:08:26,020 --> 00:08:33,789
So after this first argument which is our function, we're going to add a comma and add an empty array

104
00:08:34,419 --> 00:08:39,970
so that it stops once this has completed once, which is all we want because we only want this to

105
00:08:39,970 --> 00:08:44,169
happen when the re-render or when the website reloads.

106
00:08:44,980 --> 00:08:46,270
So now let's hit save.

107
00:08:46,300 --> 00:08:50,460
Let's go back to our Keeper app and you can see that useEffect is triggered once.

108
00:08:51,130 --> 00:08:58,570
But if we go ahead and take a note and click add, you can see the note is added in there.

109
00:08:59,020 --> 00:09:07,090
But now because these notes are created on the front end and persisted on the back end, if we hit reload,

110
00:09:07,480 --> 00:09:13,570
they don't disappear because they're being read from our Motoku backend on the blockchain and they're

111
00:09:13,570 --> 00:09:16,420
being pulled out each time we reload.

112
00:09:18,230 --> 00:09:24,650
You can write as many notes as you want, and now they'll actually stay on the screen.

113
00:09:25,040 --> 00:09:29,330
Now, there's just one thing that you might have noticed, which is the order

114
00:09:29,330 --> 00:09:30,230
the notes go in.

115
00:09:30,740 --> 00:09:37,550
So if I go ahead and add note5 which will be the latest note, if I click add, you see it gets

116
00:09:37,550 --> 00:09:39,260
added at the end here.

117
00:09:39,800 --> 00:09:47,570
But then when I click refresh, because of the way our push function works by pre-pending a value,

118
00:09:47,570 --> 00:09:53,810
so the new value gets added to the beginning of the list, then it kind of messes up the order every

119
00:09:53,810 --> 00:09:54,890
time we refresh.

120
00:09:55,640 --> 00:09:57,320
So how can we fix this?

121
00:09:57,740 --> 00:10:03,140
Well, it's actually quite a nice thing that new notes get added to the front, I think, because that's

122
00:10:03,140 --> 00:10:05,540
how it normally works on Google Keep

123
00:10:05,540 --> 00:10:10,790
anyways. If you imagine you had a list of loads of these notes and it gets added somewhere at the bottom,

124
00:10:10,790 --> 00:10:11,690
you won't even see it.

125
00:10:11,960 --> 00:10:15,380
It should actually be in reverse chronological order in order to make sense.

126
00:10:16,130 --> 00:10:20,060
The only thing we have to change then is when we add it to the frontend,

127
00:10:20,420 --> 00:10:27,060
remember that it updates because setNotes triggers a update in the state.

128
00:10:27,710 --> 00:10:35,180
And here we're saying let's get hold of the previous notes and let's create this newNote and we're

129
00:10:35,180 --> 00:10:39,440
taking the newNote and adding it to the end of all of the previous notes.

130
00:10:39,740 --> 00:10:42,450
So if we just simply reverse this array,

131
00:10:42,500 --> 00:10:50,240
so we say, let's add the new note to the beginning, and then we'll add the previous notes at the end,

132
00:10:50,600 --> 00:10:52,890
then we're going to get a different order, right?

133
00:10:52,910 --> 00:11:01,540
So if we hit save, we go back and we add a new note, we'll call it note6 and click add,

134
00:11:01,550 --> 00:11:04,100
you can see it now gets added to the very beginning.

135
00:11:04,400 --> 00:11:07,340
And if we refresh our website, nothing happens.

136
00:11:07,340 --> 00:11:11,540
None of the orders change and it works as we would expect it to.

137
00:11:12,170 --> 00:11:13,290
So there you have it.

138
00:11:13,310 --> 00:11:21,620
In this lesson, we've not only been able to persist our code and be able to read from our backend

139
00:11:21,710 --> 00:11:29,240
using the ICP blockchain, we've also fixed our adding functionality so that the order that notes get

140
00:11:29,240 --> 00:11:31,250
added in is more logical.

141
00:11:31,820 --> 00:11:37,310
In the next lesson we've got the final thing we need to implement which is deleting these, because

142
00:11:37,310 --> 00:11:42,770
at the moment you can see that I can leave them on the frontend and it works because we're updating

143
00:11:43,010 --> 00:11:45,350
the state here using deleteNote,

144
00:11:45,680 --> 00:11:51,020
but as soon as I hit refresh and that re-render gets triggered, it's going to pull the notes from my

145
00:11:51,020 --> 00:11:55,040
backend and it's just going to reappear, which is not what we want.

146
00:11:55,550 --> 00:11:58,040
Let's see how we can persist that in the next lesson.

