1
00:00:00,290 --> 00:00:04,350
Hey guys, welcome to another lesson on APIs.

2
00:00:04,370 --> 00:00:09,890
In this lesson, we're going to be talking about how to format your API requests, and by the end of

3
00:00:09,890 --> 00:00:15,680
the lesson you will understand what are Endpoints, what are Path Parameters, what are Query Parameters

4
00:00:15,680 --> 00:00:20,510
and how you can format and change your API requests.

5
00:00:21,350 --> 00:00:27,710
What we've seen so far is we've built frontends for our websites and we've built backends for our

6
00:00:27,710 --> 00:00:33,590
websites and they can interact with each other through requests and responses.

7
00:00:33,740 --> 00:00:41,900
Our front end might make a GET request to our backend and in return, for example, you want to open

8
00:00:41,900 --> 00:00:43,280
a different web page.

9
00:00:43,280 --> 00:00:48,590
So then you would make a GET request and your server would send back some response with some code,

10
00:00:48,590 --> 00:00:49,790
with some data.

11
00:00:49,820 --> 00:00:54,260
Maybe that can go into your EJS file and be displayed to the user.

12
00:00:54,920 --> 00:01:00,870
This, if you think about it, is effectively hitting up a private API.

13
00:01:00,990 --> 00:01:06,960
Now the reason why it's private is because you don't document it for other people to use.

14
00:01:06,990 --> 00:01:14,850
Your server is exclusively serving your own frontend and not somebody else.

15
00:01:14,880 --> 00:01:22,380
However, if somebody else knew how your server was structured and tried to hit it up, that would be

16
00:01:22,380 --> 00:01:26,490
tapping into a private API and people do in fact do this

17
00:01:26,520 --> 00:01:29,250
if there is some sort of strong reason to do that.

18
00:01:29,580 --> 00:01:36,960
Now, normally, however, what you're interested in doing is getting your server to talk to somebody

19
00:01:36,960 --> 00:01:43,800
else's server and get some data or do something and interact with that server in some sort of way.

20
00:01:43,890 --> 00:01:53,070
And this is again done using requests and responses, but this time it's done via a public API and it's

21
00:01:53,070 --> 00:01:59,310
public because this particular server has allowed this kind of behavior.

22
00:01:59,310 --> 00:02:03,270
So they've probably documented how to use their public API,

23
00:02:03,300 --> 00:02:10,620
they've exposed certain parts of their server to anybody who wants to request it,

24
00:02:10,620 --> 00:02:16,770
and that is what we're learning all about in this module, "How to use public APIs."

25
00:02:17,160 --> 00:02:24,630
Now we've created an API for you, which is called the, bored-api, and it contains activities that you

26
00:02:24,630 --> 00:02:30,210
can do when you're bored and it's got a whole bunch of data on what you could do, how many participants

27
00:02:30,210 --> 00:02:33,690
it requires, if it's free or if it costs something.

28
00:02:33,690 --> 00:02:39,540
But you can take a look at the documentation by going to bored-api.appbrewery.com.

29
00:02:40,050 --> 00:02:47,640
And once you head over to the homepage of this API, you will see some documentation and it shows you

30
00:02:47,640 --> 00:02:51,570
all the things that you can do with this public API.

31
00:02:52,540 --> 00:02:59,020
The first thing I want to introduce you to when it comes to structuring your requests to these APIs

32
00:02:59,050 --> 00:03:01,870
is something called the API endpoint.

33
00:03:02,020 --> 00:03:09,550
Normally you will have a base URL, something something.com, and then you will have a forward slash (/)

34
00:03:09,550 --> 00:03:11,290
and an endpoint.

35
00:03:11,440 --> 00:03:15,320
This endpoint can be different for different purposes.

36
00:03:15,340 --> 00:03:23,110
For example, in our bored API, there is a forward /random endpoint where you can get hold of random

37
00:03:23,110 --> 00:03:24,730
activities when you're bored.

38
00:03:24,760 --> 00:03:31,570
There is a /filter endpoint when you want to filter the activities based on some sort of

39
00:03:31,570 --> 00:03:32,700
criteria.

40
00:03:32,710 --> 00:03:41,260
And the endpoint is basically a different route on the API provider server and in the documentation

41
00:03:41,260 --> 00:03:48,880
they will usually give you an example of which endpoints you can use and what is the purpose of that

42
00:03:48,880 --> 00:03:49,690
endpoint.

43
00:03:50,140 --> 00:03:53,480
Let's go ahead and try an exercise on Postman.

44
00:03:53,570 --> 00:04:01,970
I want you to hit up the random endpoint on the bored API and I want you to try and get hold of a random

45
00:04:01,970 --> 00:04:05,150
activity each time you make that GET request.

46
00:04:05,180 --> 00:04:06,110
Pause the video.

47
00:04:06,140 --> 00:04:12,410
Take a look at the documentation for the board API and see if you can get hold of a random activity

48
00:04:12,440 --> 00:04:13,400
through Postman.

49
00:04:16,690 --> 00:04:17,079
All right.

50
00:04:17,079 --> 00:04:21,529
So the first place to start with any API is reading through the documentation.

51
00:04:21,550 --> 00:04:28,420
We know that we're trying to get hold of a random activity and the documentation tells us this is what

52
00:04:28,420 --> 00:04:30,610
an example request would look like.

53
00:04:30,790 --> 00:04:34,870
It would be the full path of the API,

54
00:04:34,870 --> 00:04:36,910
and then there is the endpoint.

55
00:04:36,910 --> 00:04:44,020
It's /random. And it even tells us what we can expect to get back when we make that request.

56
00:04:44,320 --> 00:04:49,120
Let's open up Postman and create a new HTTP request.

57
00:04:49,150 --> 00:04:54,520
Now we want to make a GET request to match up with the method in the documentation,

58
00:04:54,520 --> 00:04:58,170
but also we know we're trying to get hold of a resource.

59
00:04:58,320 --> 00:05:01,730
Let's go ahead and copy the URL.

60
00:05:01,750 --> 00:05:09,430
This is the base URL and this is the endpoint and that's pretty much all we have to do in order to hit

61
00:05:09,430 --> 00:05:09,820
it up.

62
00:05:09,820 --> 00:05:13,900
Let's hit Send and send our request to the bored API.

63
00:05:14,470 --> 00:05:14,920
All right.

64
00:05:14,920 --> 00:05:19,620
So it tells us to, "watch a Khan Academy lecture on a subject of your choosing".

65
00:05:19,640 --> 00:05:24,950
This is an education type of activity, only requires one person,

66
00:05:24,950 --> 00:05:26,420
it's totally free to do,

67
00:05:26,420 --> 00:05:29,330
and there's even a link that's provided.

68
00:05:29,330 --> 00:05:30,530
So that's pretty cool.

69
00:05:30,530 --> 00:05:35,300
And you can keep sending requests to this API.

70
00:05:35,330 --> 00:05:41,870
But notice that with most public APIs that don't require authentication, there's usually some method

71
00:05:41,870 --> 00:05:44,930
to prevent people from abusing the resource.

72
00:05:44,930 --> 00:05:52,430
So in our case, we've added a rate limit so that you can only make 100 requests every 15 minutes,

73
00:05:52,430 --> 00:05:56,720
and after you've used up those requests, you'll have to wait for 15 minutes.

74
00:05:56,720 --> 00:06:01,970
So while you're testing the API, 100 should be more than enough to complete all the activities in this

75
00:06:01,970 --> 00:06:02,450
lesson,

76
00:06:02,450 --> 00:06:04,010
but just be aware of that,

77
00:06:04,010 --> 00:06:10,250
and if you see a response where it says you've made too many requests, you'll know what's happened

78
00:06:10,250 --> 00:06:12,500
and you'll know that you just have to wait a little bit.

79
00:06:13,310 --> 00:06:19,210
The next aspect of structuring a request is something called Query Parameters.

80
00:06:19,220 --> 00:06:24,410
We've already seen the endpoint comes at the end of the base URL.

81
00:06:24,410 --> 00:06:29,900
So this is the base URL, this is the endpoint

82
00:06:30,880 --> 00:06:39,610
and then afterwards we can add a little question mark (?) to say that we are adding a query now to the end

83
00:06:39,610 --> 00:06:41,290
of this request.

84
00:06:41,470 --> 00:06:47,350
You start off all the queries with a question mark and then it's basically just a key/value pair, where

85
00:06:47,350 --> 00:06:54,820
this is the name of the query and then you have an equal sign and then you provide the value for that

86
00:06:54,820 --> 00:06:55,660
query.

87
00:06:55,900 --> 00:07:02,230
And it's basically a way to put a key/value pair into the URL when you want to provide some additional

88
00:07:02,230 --> 00:07:06,160
information or some parameters to a request.

89
00:07:06,580 --> 00:07:12,340
Normally when you're hitting up an API, they're used for filtering, sorting, searching, and you

90
00:07:12,340 --> 00:07:20,290
can even have multiple query parameters by simply adding an ampersand (&) after the first query.

91
00:07:20,290 --> 00:07:26,920
So remember, very important thing is in order to begin your first query, you need a question mark

92
00:07:26,920 --> 00:07:29,290
and then you have your key: value pair,

93
00:07:29,290 --> 00:07:35,970
and then after the first pair, if you want to add more queries, you tag them on starting with an ampersand.

94
00:07:35,990 --> 00:07:41,780
S o for example, this is query Number 1, query and value. Query Number 2, query and value.

95
00:07:41,780 --> 00:07:48,260
If I wanted to add a third one, I would add another ampersand and then add my query 3 and then

96
00:07:48,260 --> 00:07:49,190
its value.

97
00:07:49,190 --> 00:07:52,850
And these all just get tagged on to the end of the URL.

98
00:07:53,270 --> 00:07:55,880
So let's try doing that in Postman.

99
00:07:56,540 --> 00:08:02,000
If you take a look at the bored API and you scroll down, there's a way for us to be able to filter

100
00:08:02,000 --> 00:08:07,960
activities based on the type activity or the number of participants.

101
00:08:07,970 --> 00:08:15,350
And as you can see, it describes to you that these are two optional parameters that we can provide

102
00:08:15,350 --> 00:08:24,350
to filter our activities by. There is a choice of these seven different types of activities.

103
00:08:24,350 --> 00:08:32,330
So you can pass these as values to this query, and you can also choose how many participants you want

104
00:08:32,330 --> 00:08:34,610
to include in your activity.

105
00:08:35,179 --> 00:08:41,419
Forward slash filter is the end point, and it even gives you an example of how you might structure

106
00:08:41,419 --> 00:08:45,020
this request. As a challenge,

107
00:08:45,020 --> 00:08:51,950
I want you to hit up this endpoint to filter activities, and I want you to filter through the activities

108
00:08:51,950 --> 00:08:57,800
to find all of the activities that are social for two people.

109
00:08:58,070 --> 00:09:03,020
Pause the video, open up postman, and see if you can complete this challenge.

110
00:09:06,270 --> 00:09:13,620
All right, let's open up a new tab and let's put in firstly the base URL and then we can add in our

111
00:09:13,620 --> 00:09:16,230
endpoint, which is /filter.

112
00:09:16,800 --> 00:09:22,860
Notice how Postman has a really handy section where you can actually add in your query parameters by

113
00:09:22,860 --> 00:09:26,880
key and value and they will format your URL for you.

114
00:09:26,910 --> 00:09:33,990
If we do the first one, which is the type of activity and we want to set it to social, you can see

115
00:09:33,990 --> 00:09:38,790
as I type my key value pairs, it's already formatting my URL for me.

116
00:09:38,820 --> 00:09:43,710
Now, however, if you're writing your backend code or if you have to write this yourself, you don't

117
00:09:43,710 --> 00:09:45,240
get this neat little feature.

118
00:09:45,240 --> 00:09:49,200
So we should practice how we can structure the URL by ourselves.

119
00:09:49,380 --> 00:09:57,660
As I mentioned before, the first query comes after the question mark and every subsequent query has

120
00:09:57,660 --> 00:10:01,860
to come after an ampersand (&) or the "and" symbol.

121
00:10:02,430 --> 00:10:07,060
Now the next one we want to do is called "participants".

122
00:10:07,090 --> 00:10:13,870
Notice the S, and as always, you have to study the documentation in order to know how to use the API.

123
00:10:13,900 --> 00:10:16,450
So this in our case is plural.

124
00:10:16,450 --> 00:10:18,490
So, participants=2.

125
00:10:18,490 --> 00:10:24,610
And now we've got our two queries both set up even though they're both optional,

126
00:10:24,610 --> 00:10:30,910
but once we go ahead and hit Send, hopefully, we'll get back all the activities that are both social

127
00:10:30,910 --> 00:10:33,400
and set up for two people.

128
00:10:34,400 --> 00:10:40,160
The very last structure that I want you to be familiar with is something called path parameters.

129
00:10:40,310 --> 00:10:50,000
So after the base URL normally comes the endpoint, but an endpoint is usually a fixed path, so it'll

130
00:10:50,030 --> 00:10:54,110
be /random and that endpoint is never going to change.

131
00:10:54,110 --> 00:10:57,860
It's always going to be forward slash random spelled in this way.

132
00:10:57,950 --> 00:11:05,660
But we can also have something called Path Parameters where after a forward slash we can add some sort

133
00:11:05,660 --> 00:11:13,580
of parameter that does change and this is usually to find some specific resource that exists.

134
00:11:13,580 --> 00:11:18,530
So it could be an ID, it could be a username.

135
00:11:18,530 --> 00:11:27,530
It's basically something that's very specific that can identify a resource in the API. Unlike query

136
00:11:27,530 --> 00:11:32,630
parameters, where it could be multiple things like, participants,

137
00:11:32,660 --> 00:11:39,080
well, there were lots of activities with different types of participants or we had the type.

138
00:11:39,080 --> 00:11:46,430
And so I want you to think about query parameters as more for filtering and searching and path parameters,

139
00:11:46,430 --> 00:11:51,350
more for identifying a resource by some specific parameter.

140
00:11:51,860 --> 00:11:55,670
And we can test this out in our last exercise.

141
00:11:56,030 --> 00:12:03,470
So notice that when we look at all the activities that we get back, they all have a unique key and

142
00:12:03,470 --> 00:12:09,620
there's usually some sort of ID or key for each resource where identifies it uniquely.

143
00:12:09,620 --> 00:12:18,020
So there is no other activity with this key or with this ID, and we can use the path parameter, the

144
00:12:18,020 --> 00:12:22,940
key in order to retrieve a specific activity.

145
00:12:22,970 --> 00:12:29,870
Now, for example, if on your website you know that you want to always display to the user the first

146
00:12:29,870 --> 00:12:38,370
activity as learn ExpressJS, then you can simply retrieve it by identifying its specific key.

147
00:12:38,400 --> 00:12:46,170
For example, I already know the key for hosting a movie marathon and it's 5914292.

148
00:12:46,200 --> 00:12:51,000
Let's provide this key as a path parameter to query for this specific activity.

149
00:12:51,390 --> 00:12:55,790
So let's open up a new tab and let's structure our request.

150
00:12:55,800 --> 00:12:58,890
So first part is the base URL.

151
00:12:59,130 --> 00:13:05,580
Next comes the endpoint, which in this case is /activity.

152
00:13:05,970 --> 00:13:09,270
So that's the route we're going to hit up using our get request.

153
00:13:09,300 --> 00:13:16,590
And then afterwards, after a forward slash, we can specify our unique path parameter.

154
00:13:16,710 --> 00:13:19,320
So that's going to go straight into the URL,

155
00:13:19,320 --> 00:13:22,290
and it was that number that I told you.

156
00:13:22,980 --> 00:13:29,280
So now when I hit send, it's going to look through the database of activities and try to match this

157
00:13:29,310 --> 00:13:31,590
key to a specific resource.

158
00:13:31,590 --> 00:13:36,690
And once it's found it, it pulls up the entire activity and sends it back to us.

159
00:13:36,840 --> 00:13:40,470
And so now we've identified this activity.

160
00:13:40,500 --> 00:13:46,560
We've used a GET request to get hold of it, and we use the path parameter to do this.

161
00:13:47,550 --> 00:13:52,830
So those are some of the different ways that we can structure our API requests.

162
00:13:52,860 --> 00:13:59,670
We've learned about endpoints, we've learned about query parameters, and we've also learned about

163
00:13:59,670 --> 00:14:01,200
path parameters.

164
00:14:01,290 --> 00:14:07,200
In the next lesson, we're going to learn a little bit more about the structure of the data that comes

165
00:14:07,200 --> 00:14:09,390
back from an API request.

166
00:14:09,390 --> 00:14:16,050
And when it comes to Web APIs, the format is usually a JSON, so we're going to learn all about that,

167
00:14:16,050 --> 00:14:19,170
what it is and how to use it in our code.

168
00:14:19,410 --> 00:14:22,110
So for all of that and more, I'll see you there.

