1
00:00:00,620 --> 00:00:01,070
All right.

2
00:00:01,070 --> 00:00:08,630
So now that we've seen how to authenticate ourselves with API providers and how to start making server

3
00:00:08,630 --> 00:00:16,219
side requests using Axios, let's interact with this rest API fully and see how we can make the whole

4
00:00:16,219 --> 00:00:20,510
range of requests, including post, put, patch and delete.

5
00:00:21,380 --> 00:00:30,020
We saw from previously that we can make get requests using Axios by putting it inside a try catch block

6
00:00:30,110 --> 00:00:40,820
and inside the try block we use the method Axios dot get and then we can pass in a URL and also some

7
00:00:40,820 --> 00:00:48,650
piece of config or data or headers or authentication, whatever it may be.

8
00:00:48,650 --> 00:00:56,300
There's a whole bunch of settings, and I know this because I've read the Axios documentation.

9
00:00:56,450 --> 00:01:02,820
If we take a look inside the example, you can see this is our get request.

10
00:01:02,910 --> 00:01:09,870
Now, as you can see from the documentation, there is an alternative way of calling Axios by chaining

11
00:01:09,900 --> 00:01:18,060
Dot then to the end of the Axios get method, we can also chain a catch and we can also chain a dot

12
00:01:18,060 --> 00:01:19,650
finally as well.

13
00:01:20,600 --> 00:01:25,760
If you remember from previously when we covered this in the JavaScript sections, what is the difference

14
00:01:25,760 --> 00:01:37,130
between using a method like this and then chaining the Dot then versus marking the method as async and

15
00:01:37,130 --> 00:01:43,340
then using the await keyword before we call something like Axios dot get.

16
00:01:44,500 --> 00:01:51,280
Both of these come from the JavaScript Promises API, but they work slightly differently.

17
00:01:51,310 --> 00:01:57,580
The Dot then method gets triggered once this promise gets resolved.

18
00:01:57,580 --> 00:02:03,970
So then it will wait until it's done and then it'll look at the dot then and inside the dot.

19
00:02:04,000 --> 00:02:10,840
Then we can have another promise based method and we can keep chaining these to happen in order.

20
00:02:11,350 --> 00:02:20,590
The alternative is the more modern syntax which was introduced in 2017 as a part of the iOS eight upgrade

21
00:02:20,590 --> 00:02:21,820
to JavaScript.

22
00:02:21,850 --> 00:02:26,410
And this is formed by the async and await keyword.

23
00:02:26,440 --> 00:02:34,270
What happens in this case is we have a particular function and this function is marked as asynchronous

24
00:02:34,270 --> 00:02:41,080
by having that async keyword before it, and then we can have the name of the function, for example,

25
00:02:41,080 --> 00:02:41,650
get.

26
00:02:41,650 --> 00:02:44,120
And then we have our curly braces.

27
00:02:44,120 --> 00:02:48,740
And then inside here we can have some sort of process that happens asynchronously.

28
00:02:48,740 --> 00:02:54,050
And all we have to do is mark it with the word await.

29
00:02:54,170 --> 00:03:02,150
What this says is wait until this process is done before continuing to the next line of code.

30
00:03:02,270 --> 00:03:11,840
And the nice thing about this style is that it kind of makes our code look as if it is synchronous code.

31
00:03:11,840 --> 00:03:13,970
It's run line by line only.

32
00:03:13,970 --> 00:03:18,440
Once this line of code is completed do we continue to the next line of code.

33
00:03:18,470 --> 00:03:25,040
Whereas with the dot then syntax, it can get a little bit hairy when you're trying to debug it, especially

34
00:03:25,040 --> 00:03:28,160
if you have lots of things chained on and you get confused.

35
00:03:28,160 --> 00:03:31,040
What is the order of things being called?

36
00:03:31,550 --> 00:03:37,430
Even though both of these methods are documented in the Axios documentation, I personally recommend

37
00:03:37,430 --> 00:03:46,280
using the more modern syntax as I have been showing you in the course of using async and await rather

38
00:03:46,280 --> 00:03:49,130
than using the dot then syntax.

39
00:03:49,130 --> 00:03:53,950
But you can do exactly the same thing with both types of syntax.

40
00:03:53,960 --> 00:03:55,940
Essentially it is just a choice.

41
00:03:55,940 --> 00:04:00,770
Maybe developers working with JavaScript for a long time already familiar with then and they don't want

42
00:04:00,770 --> 00:04:03,230
to learn something new or change their practice.

43
00:04:03,230 --> 00:04:09,800
But because we're learning this from scratch, I recommend using the modern syntax we've seen get,

44
00:04:09,800 --> 00:04:18,500
but we need to cover the rest of the Http protocols, including post, put, patch and delete because

45
00:04:18,500 --> 00:04:26,510
for a API to be fully restful it should be able to handle all of these different routes.

46
00:04:26,750 --> 00:04:35,270
So let's first take a look at how we can make a post request using Axios with the Axios dot get syntax.

47
00:04:35,420 --> 00:04:40,700
We have essentially only two optional parameters.

48
00:04:40,700 --> 00:04:48,830
When we write dot get, we have the URL as the first parameter and then we have the config object as

49
00:04:48,830 --> 00:04:50,180
the second parameter.

50
00:04:50,180 --> 00:04:58,550
But when it comes to the post, we have an extra one in the middle which is called data on the Axios

51
00:04:58,580 --> 00:05:04,370
documentation, but I'm calling it body because I think it makes a little bit more sense because that's

52
00:05:04,370 --> 00:05:05,510
essentially what it is.

53
00:05:05,540 --> 00:05:08,660
It's the body of your form data.

54
00:05:08,660 --> 00:05:14,030
So maybe you have something called username and you set it to some sort of value.

55
00:05:14,060 --> 00:05:18,890
You have another one called Password and you set it to some sort of value.

56
00:05:18,920 --> 00:05:27,680
This is the body of the URL encoded data that you normally get from your HTML form, and that is what

57
00:05:27,680 --> 00:05:35,480
you would put in here to be sent over when you're making the post request and similar to with get,

58
00:05:35,480 --> 00:05:43,490
you can also add different configs into this third optional parameter such as the headers.

59
00:05:43,490 --> 00:05:47,680
If you want to do authentic station using basic authentication.

60
00:05:47,680 --> 00:05:55,810
And as always, you can find all of that documentation in the request config part of the Axios website.

61
00:05:56,020 --> 00:06:03,400
Some of the parameters such as URL method, base URL, so you can also format your requests like this

62
00:06:03,430 --> 00:06:07,750
in the config instead of putting it at the beginning of the get method.

63
00:06:07,780 --> 00:06:12,100
You have things that we saw such as headers, such as the authorization header.

64
00:06:12,100 --> 00:06:19,180
When we're working with bearer tokens, you can pass parameters in the config, you can pass over the

65
00:06:19,180 --> 00:06:26,650
basic authentication as well as a number of other settings if you wanted to move on to put requests.

66
00:06:26,650 --> 00:06:34,120
So remember that a put request provides all of the data that we want to update in our backend.

67
00:06:34,120 --> 00:06:40,630
So for example, if you have some sort of data, you have to provide everything and it's going to replace

68
00:06:40,630 --> 00:06:43,750
your entire entry with whatever it is you.

69
00:06:43,820 --> 00:06:46,040
Pass over in the put request.

70
00:06:46,070 --> 00:06:51,830
The put method with Axios looks pretty much identical to post.

71
00:06:51,860 --> 00:06:55,130
Apart from the fact that it's Axios dot put.

72
00:06:55,490 --> 00:07:04,010
And similarly we also have our patch request, which means that you can provide any bit of the data

73
00:07:04,010 --> 00:07:08,390
you want to update and everything else in the resource stays as it is.

74
00:07:08,750 --> 00:07:16,820
And finally we have our delete method which notice in this time again only takes two parameters the

75
00:07:16,820 --> 00:07:24,890
URL endpoint and also any config that you want to pass over as a JavaScript object.

76
00:07:26,060 --> 00:07:34,760
This is the theory and you can explore more of it in detail by looking at the documentation.

77
00:07:34,790 --> 00:07:41,660
They've added some simple examples such as a post request or a get request, but they've also got all

78
00:07:41,660 --> 00:07:46,740
of the other aliases such as Axios Delete or Axios post.

79
00:07:46,770 --> 00:07:54,900
Axios put and notice here the parts which are optional to these methods are enclosed in these square

80
00:07:54,900 --> 00:07:55,600
brackets.

81
00:07:55,620 --> 00:08:00,810
For example, when you make a get request, you can simply just pass the URL, but optionally you can

82
00:08:00,810 --> 00:08:03,270
also pass a config object.

83
00:08:03,270 --> 00:08:11,340
But with the post request you actually have the URL, but also two different optional parameters the

84
00:08:11,340 --> 00:08:14,750
data you want to post and also the config object.

85
00:08:14,760 --> 00:08:17,940
So take a look at the documentation whenever you get stuck.

86
00:08:17,940 --> 00:08:23,670
And also take a look at the slides from this lesson in order to complete the exercise for this lesson,

87
00:08:23,670 --> 00:08:32,250
which is 5.5 rest APIs, download this from the current lesson, extract it and open it inside vs code.

88
00:08:32,280 --> 00:08:37,440
First things first install all of the node modules using NPM i.

89
00:08:37,770 --> 00:08:44,400
And once you've done that, the second thing that is really important to do is to go into the solution

90
00:08:44,400 --> 00:08:51,150
Dot JS and go ahead and replace this empty string where it says your bearer token with your very own

91
00:08:51,150 --> 00:08:56,460
barrier token that you obtained in the previous lesson where we covered this in detail.

92
00:08:56,460 --> 00:09:02,510
So if you skipped it, be sure you head back because this is important for everything else to work.

93
00:09:02,520 --> 00:09:08,460
And once you've pasted your own barrier token in there, then I want you to go ahead and start up the

94
00:09:08,460 --> 00:09:16,470
solution dot JS using nodemon and then you can go over to localhost 3000 and you'll see our very simple

95
00:09:16,470 --> 00:09:17,250
website.

96
00:09:17,400 --> 00:09:25,410
The idea of the website is we're able to get secrets from the Secrets API by typing in the ID of the

97
00:09:25,410 --> 00:09:32,250
secret so we can hit get and it will give us that secret with that particular ID, And the default secrets

98
00:09:32,280 --> 00:09:35,070
go all the way up to number 50.

99
00:09:35,310 --> 00:09:42,570
Now number 51 of course doesn't exist, but you can use the post route to create it.

100
00:09:42,570 --> 00:09:45,570
So let's add a secret of mine.

101
00:09:45,570 --> 00:09:49,500
Just by learning surfing for over two years, I'm still really bad at it.

102
00:09:49,500 --> 00:09:53,970
It is a little bit embarrassing, but apparently it's one of the hardest sports, so I'm not going to

103
00:09:53,970 --> 00:09:57,840
be too tough on myself If I go ahead and add the secret and the score.

104
00:09:57,840 --> 00:10:04,230
I don't need to add an ID because it will be automatically created in the post route as per the documentation.

105
00:10:04,230 --> 00:10:09,780
So let's go ahead and hit post and we get back the item that we just created.

106
00:10:09,780 --> 00:10:16,110
So now if we try that get route again and put in 51, you can see we now get back the secret that we

107
00:10:16,110 --> 00:10:17,520
just created.

108
00:10:17,520 --> 00:10:22,050
Let's say that we wanted to change this by making a put request.

109
00:10:22,080 --> 00:10:30,240
We can specify the ID of the secret that we want to change, and then we can change our secret or change

110
00:10:30,240 --> 00:10:30,990
our score.

111
00:10:30,990 --> 00:10:34,980
But remember, with put requests, we have to provide all of the data.

112
00:10:35,010 --> 00:10:37,080
Let's go ahead and just change the score.

113
00:10:37,080 --> 00:10:38,820
So I'm going to keep the same secret.

114
00:10:38,820 --> 00:10:41,520
I'm going to change the score from 3 to 8.

115
00:10:41,520 --> 00:10:44,550
Let's say I'm increasing the embarrassment level.

116
00:10:44,670 --> 00:10:46,770
Let's go ahead and make the put request.

117
00:10:46,770 --> 00:10:51,210
And you can see now what we get back is the changed secret.

118
00:10:51,210 --> 00:10:52,470
And the score has gone up.

119
00:10:52,470 --> 00:10:57,810
And we can verify this again by posting to the get route on ID 51.

120
00:10:57,900 --> 00:11:03,630
Now we can make a patch request which remember, you can simply just change one thing.

121
00:11:03,630 --> 00:11:05,610
You don't have to provide all of the data.

122
00:11:05,610 --> 00:11:11,640
So if I change the score back down to two and hit up the patch route, then you can see we're getting

123
00:11:11,640 --> 00:11:15,870
back the secret with ID 51 and the score is now changed to two.

124
00:11:15,870 --> 00:11:21,210
And if I check this again, you can see it's exactly how we would expect it to.

125
00:11:21,210 --> 00:11:25,140
And finally, I'm going to hit up the delete route to delete this item.

126
00:11:25,140 --> 00:11:31,140
So hit up ID 51, hit delete and hopefully we have it deleted successfully.

127
00:11:31,140 --> 00:11:36,630
And if we check the get route for that ID again, it is no longer found because it has been deleted

128
00:11:36,630 --> 00:11:37,860
from the server.

129
00:11:37,860 --> 00:11:43,470
So this is what we are building and you can of course test that by going to the solution.

130
00:11:43,890 --> 00:11:49,470
Adding your bearer token from the previous lesson, running it just as I have done, and then going

131
00:11:49,470 --> 00:11:51,360
into the index.js.

132
00:11:51,360 --> 00:11:54,600
And then again first adding your bearer token.

133
00:11:54,600 --> 00:11:57,030
Because without that nothing else can work.

134
00:11:57,030 --> 00:12:01,410
And then take a look at the first get root.

135
00:12:01,470 --> 00:12:09,000
I know that this is a post and that's because it's linked up to a button in the HTML, which is in a

136
00:12:09,000 --> 00:12:09,780
form.

137
00:12:09,780 --> 00:12:18,240
And so the way that this website works is we've got a content area which takes a variable in the form

138
00:12:18,240 --> 00:12:23,190
of content that injects anything that you pass it into this area using.

139
00:12:23,310 --> 00:12:24,090
JS.

140
00:12:24,240 --> 00:12:28,800
If you don't remember anything about JS, be sure to look back on the previous module where we covered

141
00:12:28,800 --> 00:12:30,600
this in more detail.

142
00:12:30,600 --> 00:12:37,270
And then we've got three inputs into our form the ID, the secret and the score.

143
00:12:37,290 --> 00:12:39,900
Some of these are optional for some of the different routes.

144
00:12:39,900 --> 00:12:47,710
And then we've got our five buttons, the get route is this first button which will submit the form.

145
00:12:47,800 --> 00:12:53,490
It will have a form action of hitting up this particular route.

146
00:12:53,500 --> 00:13:00,700
So previously in forms, you've noticed that we add our action up here and we have our method up here

147
00:13:00,700 --> 00:13:02,300
when we declare the form.

148
00:13:02,320 --> 00:13:09,670
Now one thing I wanted to show you is that you can also add the action in the submit button itself.

149
00:13:09,670 --> 00:13:15,550
So this way, even though we have five different buttons, the form is going to be submitted to different

150
00:13:15,550 --> 00:13:18,100
routes depending on the form action.

151
00:13:18,100 --> 00:13:25,630
So the first get button is going to hit up get secret, which if you take a look inside the index.js

152
00:13:25,660 --> 00:13:28,180
is this first post route.

153
00:13:28,180 --> 00:13:33,430
And then we've got all of our other ones post secret, put secret patch secret and delete secret.

154
00:13:33,430 --> 00:13:40,360
So we've got five different routes and even though it's all in the same form, it's all going to make

155
00:13:40,360 --> 00:13:46,990
a post request because we have to pass over certain pieces of data like the ID that the user wants to

156
00:13:46,990 --> 00:13:54,040
get hold of from the get route or the secret and score that they want to post into the post route.

157
00:13:54,070 --> 00:13:58,300
But they're all going to be hitting up different parts of our backend.

158
00:13:58,300 --> 00:14:05,230
And your job is to make sure that those back ends work exactly the same way as you saw when we ran the

159
00:14:05,230 --> 00:14:05,740
solution.

160
00:14:05,740 --> 00:14:08,980
Dot JS Take a look at the first get route.

161
00:14:08,980 --> 00:14:16,210
It's got a lot of the Axios code that we went through in our lesson today and see if you can use the

162
00:14:16,210 --> 00:14:22,660
Axios documentation as well as what you learned in the lesson today to make all of the rest of the routes

163
00:14:22,660 --> 00:14:23,460
work.

164
00:14:23,470 --> 00:14:28,630
Now some of this might require a little bit of tinkering, a little bit of thinking and probably a lot

165
00:14:28,630 --> 00:14:29,590
of things going wrong.

166
00:14:29,590 --> 00:14:32,410
But that is how programming works.

167
00:14:32,530 --> 00:14:38,560
Give someone a program, frustrate them for a day, teach someone to program and frustrate them for

168
00:14:38,560 --> 00:14:39,370
a lifetime.

169
00:14:40,870 --> 00:14:46,900
The frustration is all a part of the joy and you will feel so much better about yourself once you overcome

170
00:14:46,900 --> 00:14:48,570
all of those frustrations.

171
00:14:48,580 --> 00:14:51,280
Pause the video and give that challenge a go.

172
00:14:53,220 --> 00:14:55,980
All right, let's walk through the solution together.

173
00:14:56,160 --> 00:15:02,340
Making sure that you've used all of the documentation and everything that is at hand to help you.

174
00:15:02,370 --> 00:15:08,220
The first thing we're going to do is to paste in your bearer token, which you should have obtained

175
00:15:08,220 --> 00:15:09,960
from the previous lesson.

176
00:15:10,110 --> 00:15:16,890
Next, we've already got this get route that's sorted and it's a good place for us to be able to see

177
00:15:16,890 --> 00:15:20,130
and remember how to make our Axios requests.

178
00:15:20,130 --> 00:15:23,160
So remember putting it inside a try catch block.

179
00:15:23,190 --> 00:15:31,560
Once we get back the result, we can tap into the data through result dot data and we can turn it into

180
00:15:31,560 --> 00:15:39,660
a string using the Json module and then pass it over to the EJS under a variable name called content.

181
00:15:39,710 --> 00:15:45,300
Now, if there was an error, then instead we can send back the error dot response dot data, which

182
00:15:45,300 --> 00:15:54,460
is going to be the error message from the Secrets API and we'll be able to log that into the content

183
00:15:54,460 --> 00:15:59,980
area as well so that we can diagnose what's going on, but also tell the user if they're doing something

184
00:15:59,980 --> 00:16:01,060
incorrectly.

185
00:16:01,270 --> 00:16:05,050
The first thing we have to do is to get the post route to work.

186
00:16:05,050 --> 00:16:13,360
And as per the Axios documentation, it's as simple as simply writing Axios dot post.

187
00:16:13,750 --> 00:16:20,110
This uses the dot then chaining method, but you can also see a example where they actually use the

188
00:16:20,110 --> 00:16:28,210
Axios dot post and essentially it expects a possible three inputs.

189
00:16:28,240 --> 00:16:33,460
One is the URL, the next one is the actual form data.

190
00:16:33,460 --> 00:16:38,230
And finally, any configs such as headers for authentication.

191
00:16:38,470 --> 00:16:43,390
In our case, we've got again our three sections, we've got our URL.

192
00:16:43,420 --> 00:16:51,700
So we know this by checking the Secrets API documentation in order to post to this API.

193
00:16:51,730 --> 00:16:56,920
We hit up the forward slash secrets route and this is the example URL.

194
00:16:56,920 --> 00:17:00,640
So it's the base URL plus forward slash secrets.

195
00:17:00,940 --> 00:17:09,970
Our API URL is already listed up here and our config for authenticating ourselves is also formatted

196
00:17:09,970 --> 00:17:10,290
here.

197
00:17:10,300 --> 00:17:16,960
All you had to do was to add in your bearer token to be inserted here and we can use this as one of

198
00:17:16,960 --> 00:17:22,690
the config options to get access to authenticate with the secrets API.

199
00:17:22,960 --> 00:17:29,110
Now that we've formed our full URL which will end up looking like this.

200
00:17:29,230 --> 00:17:33,490
Alternatively, you could have just typed the whole thing in, but this is a little bit more concise.

201
00:17:33,520 --> 00:17:37,860
The next thing we pass over is the data we want to send.

202
00:17:37,870 --> 00:17:44,470
So in my case, I'm simply just tapping into the request dot body because what the request dot body

203
00:17:44,470 --> 00:17:49,210
is going to look like is it's going to be a JavaScript object.

204
00:17:49,540 --> 00:17:56,080
So curly braces and then it's going to be based on which of these inputs were filled in and what their

205
00:17:56,080 --> 00:17:58,120
names and values are.

206
00:17:58,150 --> 00:18:06,790
Now you'll notice that I've very helpfully made the names the same as the expected request body names.

207
00:18:06,790 --> 00:18:10,150
So we have a secret and we have a score.

208
00:18:10,150 --> 00:18:15,340
So the secret is obviously the text for your secret, and the score is your embarrassment score.

209
00:18:15,340 --> 00:18:18,850
And we get hold of those from our form.

210
00:18:18,850 --> 00:18:23,950
In this case, when the user is making a post request, they're going to fill in those pieces of data

211
00:18:23,950 --> 00:18:25,700
and our request dot body.

212
00:18:25,720 --> 00:18:29,910
You can also console log this, of course, as always, it's going to look something like this.

213
00:18:29,920 --> 00:18:32,140
The secret will be whatever they typed

214
00:18:34,390 --> 00:18:39,220
and the score will be again, whatever they put in there.

215
00:18:39,220 --> 00:18:46,060
So this is what request dot body will look like if they fill in both of these parts.

216
00:18:46,060 --> 00:18:51,760
And as always, it's a good idea to verify this yourself, but this is what it looks like.

217
00:18:51,760 --> 00:18:59,740
And then this object is what's going to be put into here as the data that's going to be posted.

218
00:18:59,860 --> 00:19:07,210
So now that we have our URL added, number one, we have our data added.

219
00:19:07,210 --> 00:19:14,290
Number two, the last part is simply the config, which is just the part of the code that we need in

220
00:19:14,290 --> 00:19:21,040
order to authenticate ourselves with the API because as the documentation describes, it requires bearer

221
00:19:21,040 --> 00:19:25,330
token authentication, which you know all about because you did the last lesson.

222
00:19:25,720 --> 00:19:29,680
Now we have our three parts to our Axios dot post.

223
00:19:29,710 --> 00:19:38,830
Then we use the await and async syntax to say that we should wait for this process to complete.

224
00:19:38,830 --> 00:19:40,120
So this is a promise.

225
00:19:40,120 --> 00:19:45,190
And once that promise is resolved, then do we go to the next line?

226
00:19:45,190 --> 00:19:51,130
Because at that point we will actually have a result and we'll be able to tap into the result data in

227
00:19:51,130 --> 00:19:52,780
order to send over to the.

228
00:19:52,820 --> 00:20:02,420
Content variable inside the index.js and this is what it would look like on our front end, adding our

229
00:20:02,420 --> 00:20:10,730
secret, adding our score, sending that over as the body to the secrets API and we get back the secret

230
00:20:10,730 --> 00:20:11,720
that was created.

231
00:20:11,720 --> 00:20:18,680
And you can see this when you look at the documentation for the API, this is what we need to send over

232
00:20:18,680 --> 00:20:21,680
as the data or the body of the request.

233
00:20:21,710 --> 00:20:29,030
This is the endpoint we need to hit up and this is an example response when everything went correctly

234
00:20:29,030 --> 00:20:35,750
and we simply put the response in as a string into this area through that content variable.

235
00:20:35,960 --> 00:20:41,810
Now let's look at the next two routes, the put and patch, because they are very similar.

236
00:20:41,810 --> 00:20:48,800
And one thing that I've added into the starting code to hopefully point you in the right direction is

237
00:20:48,800 --> 00:20:55,530
the fact that we need this ID that comes in through the request dot body ID because it is one of the

238
00:20:55,530 --> 00:20:58,080
inputs for our form.

239
00:20:58,080 --> 00:21:04,290
So when we submit the form, when we hit the submit button, we can tap into whatever the user typed

240
00:21:04,290 --> 00:21:10,800
into that input area and we need it because if we look at the documentation, you can see that we have

241
00:21:10,800 --> 00:21:17,580
to add the ID of the secret that we want to update as a part of the URL parameter.

242
00:21:17,610 --> 00:21:26,640
That way the API knows which secret you want to update and this is what the full URL would look like.

243
00:21:26,880 --> 00:21:35,550
In this case we are using Axios dot put and Axios dot patch which works pretty much the same as post.

244
00:21:35,550 --> 00:21:41,820
And we know to use this because firstly you took the lesson, but also if you look at the Axios documentation,

245
00:21:41,820 --> 00:21:48,990
you can see that they have the same requirements pretty much as the post method.

246
00:21:49,380 --> 00:21:57,360
So here we've got the request URL formed by the base URL plus four slash secrets forward slash, and

247
00:21:57,360 --> 00:22:05,610
then we insert the search ID, which is whatever the user typed into that field over inside here.

248
00:22:06,510 --> 00:22:12,690
In addition, we've got the request dot body, which is whatever it is the user wants to update, and

249
00:22:12,690 --> 00:22:16,050
that is whatever they typed inside here and here.

250
00:22:16,050 --> 00:22:20,490
And these will come over through the request dot body.

251
00:22:20,490 --> 00:22:27,420
And again, as previously they will be a JavaScript object which we can then pass to the API.

252
00:22:27,420 --> 00:22:34,110
And finally we have the config which contains our authorization headers and we can make this request

253
00:22:34,110 --> 00:22:40,920
and when we get back the result data, we turn it into a string and pass it over as the variable content

254
00:22:40,920 --> 00:22:43,020
into index.js.

255
00:22:43,020 --> 00:22:47,940
And also similarly, any errors from the API also gets shown on the front end.

256
00:22:47,940 --> 00:22:54,180
So that way if we try to update something with an ID of 52 which we know doesn't exist because we haven't

257
00:22:54,210 --> 00:22:59,640
created it, we get an error from the API telling us what went wrong.

258
00:23:01,070 --> 00:23:08,720
Finally we have the delete route, which is forward slash delete and we again provide the ID of the

259
00:23:08,720 --> 00:23:10,360
resource we want to delete.

260
00:23:10,370 --> 00:23:17,000
This time there is no body to pass and if you look at the Axios method, you'll also see this only takes

261
00:23:17,000 --> 00:23:19,760
two parameters the URL and the config.

262
00:23:19,820 --> 00:23:28,640
That is going to be the URL that is formed of the base URL, the forward slash secrets plus the ID that

263
00:23:28,640 --> 00:23:31,370
the user typed in to the input box.

264
00:23:31,400 --> 00:23:39,050
We add the config to authenticate and authorize this operation and we get back some result data if everything

265
00:23:39,050 --> 00:23:44,960
went right and an error dot response dot data if something went wrong, there you have it.

266
00:23:44,960 --> 00:23:54,290
Those are all the routes for a rest API and we've now managed to tap into each of them by looking at

267
00:23:54,290 --> 00:23:59,240
the documentation for Axios and also the documentation for the API.

268
00:23:59,420 --> 00:24:04,800
As I say, whenever you work with a new API, the documentation is your friend.

269
00:24:04,830 --> 00:24:11,370
You really want to read through it and understand what's going on, at least with the endpoints that

270
00:24:11,370 --> 00:24:13,290
you want to work with in that moment.

271
00:24:13,290 --> 00:24:20,940
Because if you don't and you don't understand what are the requirements or what you need to send over,

272
00:24:20,940 --> 00:24:26,610
what are the key values, what is the URL, what kind of response you get back then you might end up

273
00:24:26,610 --> 00:24:32,100
with weird errors that you have to try and debug down the line and it gets all a bit more hairy.

274
00:24:32,340 --> 00:24:39,060
So my great tip is whenever you work with an API, spend some time looking at the documentation, Don't

275
00:24:39,060 --> 00:24:45,720
just jump straight in, it will save you time down the line and hopefully there was sufficient frustration

276
00:24:45,720 --> 00:24:54,180
in this exercise to keep you engaged and also increase your skills and hopefully you manage to get everything

277
00:24:54,180 --> 00:24:59,700
working in the end, maybe with some help of the solution, which is totally fine.

278
00:24:59,730 --> 00:25:01,170
Don't be too hard on yourself.

279
00:25:01,170 --> 00:25:02,190
Everybody needs that.

280
00:25:02,190 --> 00:25:03,120
In the beginning.

281
00:25:03,570 --> 00:25:05,370
I hope you had fun with me in this lesson.

282
00:25:05,370 --> 00:25:10,980
In the next lesson, we've got our final project of the module where we're going to be building a app

283
00:25:10,980 --> 00:25:14,760
similar to the Whisper app using the Secrets API.

284
00:25:15,090 --> 00:25:17,250
For all of that and more, I'll see you there.

