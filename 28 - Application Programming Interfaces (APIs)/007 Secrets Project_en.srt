1
00:00:00,500 --> 00:00:00,890
All right.

2
00:00:00,890 --> 00:00:07,370
It's time for the final project of the module and we are going to be building a secrets project, which

3
00:00:07,370 --> 00:00:15,140
is going to be a client side website that uses the Secrets API in order to reveal the deepest, darkest

4
00:00:15,140 --> 00:00:17,960
secrets of people anonymously.

5
00:00:18,140 --> 00:00:26,030
This is inspired by a real app called Whisper that was pretty famous a few years back, and essentially

6
00:00:26,030 --> 00:00:33,830
it's people across the Internet sharing their secrets anonymously, and it's weirdly fascinating to

7
00:00:33,830 --> 00:00:40,130
read through people's secrets and what they reveal to us when they don't need to be identified.

8
00:00:40,130 --> 00:00:47,420
And in order to do this, we're going to be using the Secrets API and getting hold of random secrets

9
00:00:47,420 --> 00:00:53,720
using Axios so that we can put some of the different pieces of information that we've learned over the

10
00:00:53,720 --> 00:00:58,190
different modules together to create a real product.

11
00:00:58,700 --> 00:01:05,430
Go ahead and download the Secrets Project, zip file, extract it and open it inside vs code.

12
00:01:05,459 --> 00:01:14,010
As always, the first thing to do is to CD over to this location in the terminal, run the command in

13
00:01:14,010 --> 00:01:21,990
order to install all the node modules and then we can preview what this website looks like by using

14
00:01:21,990 --> 00:01:24,660
nodemon to run the solution.

15
00:01:24,690 --> 00:01:25,740
Dot js.

16
00:01:26,250 --> 00:01:30,330
Once you load up this website, it's not called whisper, it's called whisper.

17
00:01:31,110 --> 00:01:35,530
You will see that we've got some fancy styling done in CSS.

18
00:01:35,550 --> 00:01:43,620
We've got the username of the person who submitted this secret, and when we hover over the code, we

19
00:01:43,620 --> 00:01:45,990
see their secrets revealed.

20
00:01:46,500 --> 00:01:51,750
I'm keeping this project relatively simple because we've had a long module, and I just want you to

21
00:01:51,750 --> 00:01:57,780
be able to practice some of the previous things we learned using EJS and also using Express.

22
00:01:57,810 --> 00:02:02,820
We're just going to hit up the random endpoint for the Secrets API.

23
00:02:03,060 --> 00:02:11,550
And if you wanted to, you could refresh the website and it would load up a different random secret.

24
00:02:11,880 --> 00:02:19,590
So the first thing I want you to do is to take a look at the index.js and see the structure of the different

25
00:02:19,590 --> 00:02:22,170
variables that are being injected in here.

26
00:02:22,170 --> 00:02:28,770
So the user corresponds to this part, and the secret corresponds to the part that shows up.

27
00:02:28,890 --> 00:02:31,140
Don't worry about the styling.

28
00:02:31,140 --> 00:02:34,390
It's already created for you in the main.css.

29
00:02:34,440 --> 00:02:35,100
Of course.

30
00:02:35,100 --> 00:02:40,080
As always, if you wish, you can remove all the styling in here and create it yourself from scratch

31
00:02:40,080 --> 00:02:40,930
as well.

32
00:02:40,950 --> 00:02:49,470
You don't have to use anything that's provided, although I recommend it because we're focusing on skills

33
00:02:49,470 --> 00:02:56,730
that we want to practice, and there's always capstone projects for you to fully customize and create

34
00:02:56,730 --> 00:02:58,320
your own projects from scratch.

35
00:02:58,560 --> 00:03:04,320
In the index.js, I've got a number of hints for you and again, you could delete all of this and just

36
00:03:04,320 --> 00:03:07,430
go off the functionality that you see when you run Solution.

37
00:03:07,590 --> 00:03:15,000
JS But these hints show you all the steps you need to go through in order to make this work.

38
00:03:15,360 --> 00:03:17,460
Now we're not doing anything too fancy in here.

39
00:03:17,460 --> 00:03:21,780
We're not doing authentication, we're not using bearer tokens, we're not doing registration.

40
00:03:21,780 --> 00:03:26,490
I just wanted to keep this simple so that we focus on the things that we really care about, which is

41
00:03:26,490 --> 00:03:29,240
how do you work with an external API?

42
00:03:29,250 --> 00:03:35,460
How do you use the documentation of the API and how do you use Axios and Express to hit up that API

43
00:03:35,460 --> 00:03:43,740
and grab the necessary pieces of data to populate a client side website and consume data from that API?

44
00:03:43,770 --> 00:03:50,400
This is a really common skill and just wanted to give that one last bit of practice and create a project

45
00:03:50,400 --> 00:03:53,370
that's pretty cool that you can share with your friends and family.

46
00:03:54,000 --> 00:03:58,980
Once you're ready, go ahead, pause the video and give this project a go.

47
00:04:03,800 --> 00:04:05,850
All right, let's run through the solution together.

48
00:04:05,870 --> 00:04:06,770
First things first.

49
00:04:06,770 --> 00:04:13,820
Let's go ahead and import Express from the express module that we have already installed.

50
00:04:13,820 --> 00:04:18,529
And you can check that by going to package.json, looking at the dependencies.

51
00:04:18,529 --> 00:04:24,530
And then the next thing is we're going to also import the Axios module.

52
00:04:27,310 --> 00:04:29,470
And then we can move on to step two.

53
00:04:29,500 --> 00:04:39,400
We're going to create a new app from the Express module like this, and we can set our port to our normal

54
00:04:39,400 --> 00:04:41,650
port, which is 3000.

55
00:04:42,370 --> 00:04:45,790
In this step, we're saying use the public folder for static files.

56
00:04:45,790 --> 00:04:52,390
And if you don't remember why we're doing this, it's because we have images that are being used in

57
00:04:52,390 --> 00:04:53,710
the front end of the website.

58
00:04:53,710 --> 00:05:00,530
But more importantly, we've also got our stylesheets that live in a folder that we can keep static.

59
00:05:00,550 --> 00:05:06,970
And if you don't remember this, we did this when we first learned about using Express to create servers

60
00:05:06,970 --> 00:05:09,760
and this is an important middleware.

61
00:05:09,760 --> 00:05:12,370
So we do app dot use.

62
00:05:12,850 --> 00:05:19,900
And then in the Express package there is something called static, which is a built in middleware function

63
00:05:19,900 --> 00:05:28,970
and allows us to serve static files and allows us to specify which folder contains the static files,

64
00:05:28,970 --> 00:05:32,300
which in our case, as you can see, is called public.

65
00:05:33,020 --> 00:05:40,190
Now what this means is that any static files that are being used will be able to refer to public and

66
00:05:40,190 --> 00:05:44,900
then can add the relative path after that location.

67
00:05:44,900 --> 00:05:48,470
So it's public styles Main.css.

68
00:05:48,500 --> 00:05:54,950
Now, step four is when the user goes to the home page, it should render the index dot JS file.

69
00:05:54,950 --> 00:05:59,540
So this is our app dot get so when the user goes to the home page.

70
00:05:59,540 --> 00:06:05,180
So the forward slash, we're going to have our req and rez our anonymous function here.

71
00:06:05,180 --> 00:06:11,350
And inside this function we are going to return something by using res dot render.

72
00:06:11,360 --> 00:06:16,610
And what we want to render is index dot JS.

73
00:06:17,330 --> 00:06:24,440
And the next step is we should be able to use Axios inside this get route to get a random secret and

74
00:06:24,440 --> 00:06:27,250
pass it to EJS to display the secret.

75
00:06:27,250 --> 00:06:34,990
Here we're going to create our constant called result and it is going to be as a result of calling Axios

76
00:06:34,990 --> 00:06:36,070
dot get.

77
00:06:36,250 --> 00:06:42,850
Now we're going to provide the URL of the route that we want to hit up, which is the random route,

78
00:06:42,850 --> 00:06:49,300
and you can split this up to base URL, you can add it as a config, but in my case, I'm just going

79
00:06:49,300 --> 00:06:52,150
to add it in here straight up as it is.

80
00:06:52,240 --> 00:06:59,500
Remember, this method is asynchronous and you can see that when you hover over the dot get you can

81
00:06:59,500 --> 00:07:02,320
see that it returns a promise.

82
00:07:02,320 --> 00:07:07,720
That means in order to get hold of the result, we either have to get hold of it by chaining dot.

83
00:07:07,720 --> 00:07:15,910
Then at the end of this method call or we change this to an asynchronous function and use await before

84
00:07:15,910 --> 00:07:17,200
we call this method.

85
00:07:17,200 --> 00:07:22,780
So that means we're waiting for this to give us the results, to be able to put it into this constant

86
00:07:22,780 --> 00:07:25,450
before we continue to the next line.

87
00:07:25,450 --> 00:07:31,340
What's going to happen in the next line is we're going to pass over some data to our index.js and that

88
00:07:31,340 --> 00:07:33,920
data is going to come from the result.

89
00:07:33,920 --> 00:07:36,770
And we can take a look at what kind of result we get.

90
00:07:36,770 --> 00:07:44,450
So this is the response that we would get through result dot data and we can get hold of the ID, the

91
00:07:44,450 --> 00:07:46,580
secret, the score, the username.

92
00:07:46,580 --> 00:07:49,700
So in our case we only want the username and the secret.

93
00:07:49,700 --> 00:07:53,570
So let's remember what the keys for those pieces of data are.

94
00:07:53,570 --> 00:07:59,930
And then we're going to take a look inside index.js, see which variables we need to hit up.

95
00:07:59,930 --> 00:08:02,660
So there's one called Secret and one called user.

96
00:08:02,660 --> 00:08:04,580
So let's set that up.

97
00:08:04,580 --> 00:08:06,410
Secret colon.

98
00:08:06,410 --> 00:08:10,520
This is the first piece and then the other one is called User.

99
00:08:10,730 --> 00:08:16,160
But if we look at the keys that we get back from the API, the first one is indeed called secret, so

100
00:08:16,160 --> 00:08:19,760
it will be stored under result dot data.

101
00:08:19,760 --> 00:08:28,840
And then here is where we add that key dot secret and user will be result dot data dot user name.

102
00:08:28,840 --> 00:08:31,530
So that matches with what we get back here.

103
00:08:31,540 --> 00:08:37,960
Now you can of course simply just log result dot data in order to see what you get back and to be able

104
00:08:37,960 --> 00:08:39,250
to format this.

105
00:08:39,250 --> 00:08:45,010
And you can also through trial and error, hopefully see whether if these pieces of data are being passed

106
00:08:45,010 --> 00:08:48,640
to the correct parts of your HTML.

107
00:08:48,820 --> 00:08:51,700
But hopefully this will work.

108
00:08:51,700 --> 00:08:59,500
And if not, we will add a try and catch block in order to make sure that we catch any errors we put

109
00:08:59,500 --> 00:09:03,940
the part we want to try inside the try block and inside the catch block.

110
00:09:03,970 --> 00:09:12,820
We're going to send the status of 500 because something went wrong in our server and we are going to

111
00:09:12,820 --> 00:09:21,400
console log any errors by writing console log and we can grab hold of the error here.

112
00:09:21,700 --> 00:09:26,140
And it is error dot response dot data that can.

113
00:09:26,240 --> 00:09:33,940
Contains any messages from the API so that we as the developers can look into this and try to solve

114
00:09:33,940 --> 00:09:34,880
any problems.

115
00:09:34,900 --> 00:09:38,770
Now for the user who's looking at our website, they won't know what to do with that.

116
00:09:38,770 --> 00:09:44,980
So we're just going to show a error code that says something's wrong with the server, don't worry about

117
00:09:44,980 --> 00:09:49,750
it and we can debug this from our developer side.

118
00:09:50,050 --> 00:09:56,950
Finally, all we need to do is to run App.listen in order to listen on the port that we've specified.

119
00:09:56,950 --> 00:10:05,770
And as usual, we're going to add an anonymous function that console logs to the terminal that says

120
00:10:06,070 --> 00:10:15,040
server started on port and then the port is the port number that we put up here.

121
00:10:15,250 --> 00:10:17,320
That's all we need to do.

122
00:10:17,320 --> 00:10:24,760
And now if we go ahead and run this, so stop anything else that's running, use Nodemon to run the

123
00:10:24,760 --> 00:10:27,500
Index.js that you just created.

124
00:10:27,530 --> 00:10:33,890
Go over to localhost 3000 and hopefully you will see the username load up here.

125
00:10:33,920 --> 00:10:40,220
You will be able to see the secret when you hover over the card.

126
00:10:40,490 --> 00:10:42,140
Did you manage to get this to work?

127
00:10:42,170 --> 00:10:45,860
Did you manage to use what you've learned so far in the module?

128
00:10:46,280 --> 00:10:51,110
Feel free to modify this project as you wish or change it up.

129
00:10:51,110 --> 00:10:58,880
Do anything you like to extend its functionality, but just be aware that because it's resting on the

130
00:10:58,880 --> 00:11:07,640
Secrets API, which as we mentioned, is an API for students to learn and not something for a production

131
00:11:07,640 --> 00:11:15,140
app that all user submitted data including their registrations or their username, their password,

132
00:11:15,140 --> 00:11:21,530
any tokens, any bearer tokens, any usernames, any secrets are erased pretty much on a regular basis,

133
00:11:21,530 --> 00:11:23,660
like every 24 hours or 48 hours.

134
00:11:23,660 --> 00:11:30,850
So it's not going to be a real API that you can rely on to create a real product.

135
00:11:30,860 --> 00:11:38,930
But in the next module where we have a capstone project coming up, I'm going to show you lots of real

136
00:11:38,930 --> 00:11:47,000
world APIs that you can use to create your own project that are more robust and are suited for real

137
00:11:47,000 --> 00:11:54,140
world projects that you can build and add to your portfolio or even create a startup or a product for

138
00:11:54,140 --> 00:11:54,920
yourself.

139
00:11:55,340 --> 00:11:58,120
This could be the beginning of something wonderful.

140
00:11:58,130 --> 00:12:01,550
I hope you enjoyed this module with me and I'll see you in the next one.

