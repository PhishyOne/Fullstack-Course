1
00:00:00,590 --> 00:00:07,190
All right, so now that all we have left is the delete method, but I'm splitting it into two parts

2
00:00:07,190 --> 00:00:11,250
so that we can try out adding some basic authentication as well.

3
00:00:11,270 --> 00:00:17,390
We're going to be implementing the API for people to be able to delete jokes from the Jokes API.

4
00:00:18,500 --> 00:00:25,100
The first challenge is challenge number seven and we're going to hit up forward slash jokes, forward

5
00:00:25,100 --> 00:00:33,290
slash the ID parameter, and then this is going to hopefully delete the joke with that particular ID,

6
00:00:33,620 --> 00:00:40,850
So we're only deleting one joke in this case and we're passing the path variable of ID and giving it

7
00:00:40,880 --> 00:00:43,940
one that hopefully matches one of the jokes in the API.

8
00:00:43,970 --> 00:00:49,190
We hit send and this delete request will come back as okay with code 200.

9
00:00:49,220 --> 00:00:55,580
If everything went okay again, I give you the choice of trying to figure out how you can do this yourself,

10
00:00:55,580 --> 00:00:57,470
which can be a little bit tricky.

11
00:00:57,470 --> 00:01:00,780
Or let's go through everything together.

12
00:01:05,670 --> 00:01:15,420
We're using the delete method from Express and we add in our endpoint and in the callback we get hold

13
00:01:15,420 --> 00:01:18,960
of the ID that was added to the request.

14
00:01:18,960 --> 00:01:25,020
So again, we can either use pass int or we can replace this triple quote into double quote.

15
00:01:25,140 --> 00:01:27,180
Either of these options will work.

16
00:01:27,660 --> 00:01:34,590
I'm using find index again to find the index of the joke that matches the ID that was passed in this

17
00:01:34,590 --> 00:01:35,100
one.

18
00:01:35,430 --> 00:01:40,110
And then if the index is greater than minus one.

19
00:01:40,110 --> 00:01:47,910
So if it actually exists, then I'm going to go into the jokes array and use the splice method in order

20
00:01:47,910 --> 00:01:51,210
to remove the joke with that index.

21
00:01:51,210 --> 00:01:53,970
That's essentially what this line does.

22
00:01:54,000 --> 00:01:59,340
It takes the search index and then removes only one element from the array.

23
00:01:59,400 --> 00:02:02,540
And once that's all done, I send status 200.

24
00:02:02,550 --> 00:02:04,840
Everything is A-okay.

25
00:02:04,840 --> 00:02:10,990
But if there were any errors, then I send status 404 and tell them what the error was.

26
00:02:11,500 --> 00:02:15,340
That's all that's required to delete a single joke.

27
00:02:15,370 --> 00:02:19,720
And because it's just a single joke, we don't have any authentication in here.

28
00:02:19,990 --> 00:02:28,780
The next challenge, challenge number eight simulates a situation where you need an API key in order

29
00:02:28,780 --> 00:02:34,240
to be able to delete something, because in this case we're actually saying let's delete everything

30
00:02:34,240 --> 00:02:41,680
in our joke API, let's just wipe our database, which as you can imagine is a very dangerous thing

31
00:02:41,710 --> 00:02:43,150
to allow people to do.

32
00:02:43,300 --> 00:02:51,280
In this case, we're saying you need to have a master key, which is in the format of a multi letter

33
00:02:51,370 --> 00:02:59,470
code and that is going to be added as a query parameter under the key of key.

34
00:02:59,680 --> 00:03:06,970
And when you have access to that, then you can make a delete request to forward slash all and when

35
00:03:06,970 --> 00:03:12,190
you hit send it will delete everything in the database nuclear option basically.

36
00:03:12,490 --> 00:03:15,730
So the actual deleting part is very simple.

37
00:03:15,730 --> 00:03:18,460
We're just wiping the whole array clean.

38
00:03:18,460 --> 00:03:23,560
But how we do authentication is something that is a little bit new.

39
00:03:23,560 --> 00:03:24,460
In this case.

40
00:03:24,610 --> 00:03:27,790
Again, you can take a look at the starting code.

41
00:03:27,790 --> 00:03:36,550
If you scroll right to the top, you'll see a variable called master key, and that variable is going

42
00:03:36,550 --> 00:03:39,790
to be something that we're going to learn in later modules.

43
00:03:39,790 --> 00:03:44,890
When we learn about authentication, when we learn about how to generate unique uuids.

44
00:03:44,890 --> 00:03:52,720
But let's just assume that we somehow have access to a master password, which is called master key,

45
00:03:52,720 --> 00:03:54,700
and the user needs to enter it.

46
00:03:54,700 --> 00:04:01,660
When they make this API request, we check the value of master key against the value that was inputted

47
00:04:01,660 --> 00:04:09,160
by the user, and if they happen to match, then we say okay, we'll just go ahead and delete everything

48
00:04:09,160 --> 00:04:11,080
in that jokes array.

49
00:04:11,590 --> 00:04:18,550
So again, either you could have a think about it, try it out yourself, see it as a challenge, or

50
00:04:18,550 --> 00:04:21,790
we can walk through it together step by step.

51
00:04:25,700 --> 00:04:26,180
All right.

52
00:04:26,180 --> 00:04:33,560
So at the top of the file, we've got our master key, and this is the copy that we're keeping on our

53
00:04:33,560 --> 00:04:36,710
server to check against what the user sends in.

54
00:04:36,740 --> 00:04:44,540
Now, the user is going to use a query parameter in the URL, so it'll be forward slash all and then

55
00:04:44,540 --> 00:04:52,220
it will be query parameter which is called key, and they make it equal to whatever it is they decide

56
00:04:52,220 --> 00:04:53,260
to type in.

57
00:04:53,270 --> 00:04:57,530
And we have to check if the user key is equal to the master key.

58
00:04:57,530 --> 00:05:03,440
And in this case, all we're doing is just wiping the jokes array clean, setting it back to an empty

59
00:05:03,470 --> 00:05:04,100
array.

60
00:05:04,100 --> 00:05:07,090
And in this case we send status 200.

61
00:05:07,100 --> 00:05:09,890
Everything was implemented as you requested.

62
00:05:09,920 --> 00:05:17,000
Otherwise we say 404 and we say you're not authorized to perform this action because the Elf statement

63
00:05:17,000 --> 00:05:19,760
is on this check right here.

64
00:05:19,760 --> 00:05:22,340
If the user key is equal to the master key.

65
00:05:22,520 --> 00:05:30,810
So this is a very simplified way that we can implement API key authentication or username password authentication.

66
00:05:30,810 --> 00:05:36,330
And as I mentioned before, later on we properly look into authentication.

67
00:05:36,330 --> 00:05:44,190
We'll look into generating these unique IDs, we'll look into hashing passwords, storing passwords,

68
00:05:44,190 --> 00:05:48,570
we'll look into Bcrypt, we'll look into how to hack passwords and all of that.

69
00:05:48,570 --> 00:05:54,750
But for now, we can be satisfied that we're just doing a very, very basic password check.

70
00:05:54,750 --> 00:06:02,850
So the admin password against what's typed in in the request and that gets our API and makes sure that

71
00:06:02,850 --> 00:06:08,520
anything that is risky is not performed by just any user on our service.

72
00:06:09,780 --> 00:06:10,680
That's it.

73
00:06:10,680 --> 00:06:16,980
Check to make sure that your code matches what's in the solution or if it doesn't, make sure that your

74
00:06:16,980 --> 00:06:19,770
functionality behaves as you would expect to.

75
00:06:19,770 --> 00:06:22,590
And once you're ready, head over to the next lesson.

76
00:06:22,590 --> 00:06:29,430
We're going to put all of these skills that we've learned in this module to practice by building a blog

77
00:06:29,430 --> 00:06:30,120
API.

78
00:06:30,120 --> 00:06:32,730
So for all of that and more, I'll see you there.

