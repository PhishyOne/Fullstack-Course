1
00:00:00,290 --> 00:00:00,860
Hey guys.

2
00:00:00,860 --> 00:00:06,260
In the previous lessons, we learned all about application programming interfaces, otherwise known

3
00:00:06,260 --> 00:00:07,939
as APIs.

4
00:00:07,970 --> 00:00:15,290
In this module, we're going to learn how to build our own APIs from scratch so that you can get a good

5
00:00:15,290 --> 00:00:17,660
overview of the entire process.

6
00:00:17,690 --> 00:00:23,210
In the previous Capstone project, I showed you a list of public APIs.

7
00:00:23,210 --> 00:00:29,390
So these are APIs that anyone can access as long as you have signed up or you have the correct credentials.

8
00:00:29,390 --> 00:00:34,790
Some of them are paid and some of them are free, but they're available to anyone on the Internet.

9
00:00:35,030 --> 00:00:43,370
So this list encompasses pretty much every single topic, anywhere from health to pets to public infrastructure.

10
00:00:43,370 --> 00:00:48,290
And I'm sure you had a good look through it in order to choose the one you wanted to use for your capstone

11
00:00:48,290 --> 00:00:49,100
project.

12
00:00:49,640 --> 00:00:54,960
The reason why we use APIs is because they make development so much faster.

13
00:00:54,980 --> 00:01:03,000
Instead of building out everything from scratch and collecting data, cleaning data or building up services,

14
00:01:03,000 --> 00:01:08,910
you can leverage other people's existing data, their services or their algorithms in order to build

15
00:01:08,910 --> 00:01:11,940
a product on top of that existing API.

16
00:01:12,450 --> 00:01:18,210
So you could go from 0 to 1 in the space of minutes rather than years.

17
00:01:18,330 --> 00:01:22,200
Now a really good resource I recommend checking out is rapid API.

18
00:01:22,230 --> 00:01:31,980
They're a company that collates and allows people to host APIs that customers or clients can consume

19
00:01:31,980 --> 00:01:39,030
from being able to do that, being able to cut down your development time and to leverage other people's

20
00:01:39,030 --> 00:01:42,660
work or data is a really valuable service.

21
00:01:42,660 --> 00:01:45,210
So that's why people often charge for it.

22
00:01:45,210 --> 00:01:51,260
And this website, Rapid API, is kind of like the Amazon for these paid APIs.

23
00:01:51,270 --> 00:01:58,380
They have free APIs as well, but it's mostly APIs that are developed by developers like you.

24
00:01:58,380 --> 00:02:00,660
And then they hosted onto this website.

25
00:02:00,660 --> 00:02:06,420
And anyone who needs to use that website, for example, if you wanted to translate texts or get hold

26
00:02:06,420 --> 00:02:13,500
of basketball data, then they can use these APIs and pay according to how many requests they make.

27
00:02:13,890 --> 00:02:19,650
Now, rapid API also has free APIs that can be used for developers.

28
00:02:19,650 --> 00:02:26,430
So take a look and explore this website and see that if you were to create your own API hub, what it

29
00:02:26,430 --> 00:02:29,190
is that you could do on here.

30
00:02:29,400 --> 00:02:33,270
Now what is it that makes an API monetizable?

31
00:02:33,270 --> 00:02:39,750
What makes it valuable enough for you to be able to list on rapid API and for people to start paying

32
00:02:39,750 --> 00:02:41,730
you to use those APIs?

33
00:02:41,850 --> 00:02:45,380
I've kind of broadly thought about it in three categories.

34
00:02:45,390 --> 00:02:49,320
One is if you have a large and valuable data collection.

35
00:02:49,350 --> 00:02:56,070
Two is if you have a proprietary algorithm or a really useful service that people can tap into using

36
00:02:56,070 --> 00:02:56,990
your API.

37
00:02:57,000 --> 00:03:03,690
And three, if you simply just have a more simplified interface, a simplified API for people to be

38
00:03:03,690 --> 00:03:09,870
able to work with something else, be it a real world service or another API.

39
00:03:10,260 --> 00:03:11,850
What are some examples of that?

40
00:03:11,880 --> 00:03:19,050
Let's say you had a large collection, you had over a thousand recipes for pasta and your granny gave

41
00:03:19,050 --> 00:03:19,800
this to you.

42
00:03:19,800 --> 00:03:24,510
It's an heirloom and you've just kept it in a file all of this time.

43
00:03:24,510 --> 00:03:29,100
And today you decide to type it all up and make it available via an API.

44
00:03:29,400 --> 00:03:34,770
Well, that's probably valuable to somebody out there if they're building a recipe app or if they're

45
00:03:34,770 --> 00:03:39,210
building some sort of application that needs that data.

46
00:03:39,450 --> 00:03:47,190
Now, on a more complex level, maybe you have a weather station and you can give people access to live

47
00:03:47,190 --> 00:03:50,040
weather data in any location.

48
00:03:50,040 --> 00:03:57,870
Well, that is also pretty useful and that's probably a lot more valuable than past the recipes, but

49
00:03:57,870 --> 00:04:01,170
it again falls into the data collection category.

50
00:04:01,800 --> 00:04:04,710
Now the next one is an algorithm or a service.

51
00:04:04,710 --> 00:04:09,750
So for example, let's say that you worked out anywhere on the globe.

52
00:04:09,750 --> 00:04:20,070
If you were able to create a algorithm that looks at any two coordinates on the map and you would be

53
00:04:20,070 --> 00:04:25,770
able to work out the direct line distance between those two points, or maybe you could work out the

54
00:04:25,770 --> 00:04:30,600
distance that it takes a car to get there via the available roads.

55
00:04:30,600 --> 00:04:36,660
And you have some sort of very, very clever algorithm that uses other APIs or other things to work

56
00:04:36,660 --> 00:04:36,900
that out.

57
00:04:36,900 --> 00:04:44,580
Maybe the Google Maps API, maybe you have some sort of satellite API that you amalgamate into one algorithm

58
00:04:44,580 --> 00:04:51,660
or one service and that is probably reasonably easy to build and it's something that would save people

59
00:04:51,660 --> 00:04:58,170
a lot of time so that they don't have to build this themselves and hence it would make your API valuable.

60
00:04:58,650 --> 00:04:59,790
Now on a.

61
00:04:59,950 --> 00:05:06,820
More larger scale and more complex version of this would be something like ChatGPT.

62
00:05:07,120 --> 00:05:14,470
It took them years and years to be able to collect all of the data from the Internet, feed it into

63
00:05:14,470 --> 00:05:20,290
this large model, train it over years and years, which costs a ton of computing power and a ton of

64
00:05:20,290 --> 00:05:20,860
money.

65
00:05:20,860 --> 00:05:29,020
And by allowing you access to this service, then it makes sense that the developers who use this API

66
00:05:29,050 --> 00:05:32,800
would have to pay for it because there's a lot of value there.

67
00:05:33,400 --> 00:05:39,910
The final one is if we had a simplified interface as an API that you create.

68
00:05:40,000 --> 00:05:46,270
So let's say you wanted to be able to have an API that allows you to order a pizza, so you just give

69
00:05:46,270 --> 00:05:52,840
the API as input parameters, your location and your card details and then bam, you would have pizza

70
00:05:52,840 --> 00:05:54,510
arrive at your doorstep.

71
00:05:54,520 --> 00:06:00,590
Well that's a pretty valuable API and that essentially is taking a real world service that doesn't have

72
00:06:00,590 --> 00:06:04,490
any sort of Internet enabled capabilities.

73
00:06:04,490 --> 00:06:10,460
You know, the ability to order a pizza from Domino's, maybe they don't have an API, maybe they just

74
00:06:10,460 --> 00:06:17,060
have a simple web form and you use something like Python and you cobble a whole bunch of things together

75
00:06:17,060 --> 00:06:20,360
in order to enable this call for Pizza API.

76
00:06:20,840 --> 00:06:22,700
So that would be pretty useful.

77
00:06:22,700 --> 00:06:31,970
And on a more complex scale, you could maybe take some of the more large scale APIs like the Google

78
00:06:31,970 --> 00:06:38,450
Maps API or the Google Sheets API, and they're all kind of complicated because they allow you to do

79
00:06:38,450 --> 00:06:44,780
many, many things with that API, with Google Sheets or with Google Maps.

80
00:06:44,780 --> 00:06:52,370
But maybe you realize that in common situations people only want to do one, 2 or 3 things with it and

81
00:06:52,370 --> 00:06:59,900
you simplify it down for them so that any developer can access that API and simply log some data in

82
00:06:59,900 --> 00:07:05,030
a Google sheet with just a few lines of code instead of a few hundreds of lines of code.

83
00:07:05,030 --> 00:07:07,070
And that again, you're saving people time.

84
00:07:07,070 --> 00:07:12,620
You are making things easier for people, making things more accessible, and hence it also makes sense

85
00:07:12,620 --> 00:07:15,380
that it would be a monetized API.

86
00:07:16,460 --> 00:07:23,480
These are actually real world examples that actually is a developer who created an API called Domino's

87
00:07:23,480 --> 00:07:26,900
Pizza API and it is a NodeJS API.

88
00:07:26,900 --> 00:07:31,340
So that means you'll be able to look through the code and you should be able to understand some of the

89
00:07:31,340 --> 00:07:37,550
code to see how they actually created this API because it's open source on GitHub and all you have to

90
00:07:37,550 --> 00:07:44,060
do is search for Domino's Pizza API, plus the word GitHub and you'll be able to find this code base

91
00:07:44,060 --> 00:07:47,630
and see this API being built in real life.

92
00:07:47,630 --> 00:07:53,060
Now this is an open API, so it's free to use and open to the public.

93
00:07:53,060 --> 00:07:59,180
But equally likely this could have been an API that's hosted on rapid API, in which case we wouldn't

94
00:07:59,180 --> 00:08:04,550
be able to see the source code so that other people don't just simply clone your code and take what

95
00:08:04,550 --> 00:08:05,720
you've developed.

96
00:08:06,650 --> 00:08:09,920
Another category of APIs are internal APIs.

97
00:08:09,920 --> 00:08:17,120
We've talked a lot about external or rather public APIs, so these are available for anybody should

98
00:08:17,120 --> 00:08:22,670
they wish to pay or should they wish to sign up to use this API.

99
00:08:22,700 --> 00:08:26,660
But there is also another category of internal APIs.

100
00:08:26,690 --> 00:08:29,700
Let's say you work at a company, right?

101
00:08:29,720 --> 00:08:33,590
And you need to keep track of all of your inventory.

102
00:08:33,620 --> 00:08:35,770
You have a whole bunch of things.

103
00:08:35,780 --> 00:08:41,840
Let's say you are Amazon and you have all of these items in your warehouse and you need to be able to

104
00:08:41,840 --> 00:08:43,070
keep track of them.

105
00:08:43,400 --> 00:08:49,880
Or if you are a company selling encyclopedias door to door, then you would need to know, well, how

106
00:08:49,880 --> 00:08:55,400
many of these encyclopedias have been sold and how many do we have left to sell?

107
00:08:55,430 --> 00:09:02,330
This is pretty important in order for you to make sure that you never run out of encyclopedias, you

108
00:09:02,330 --> 00:09:08,390
might want to know well which addresses have been visited by your agents so you don't double up on sending

109
00:09:08,390 --> 00:09:15,350
agents to the same place you might want to submit which addresses actually bought an encyclopedia in

110
00:09:15,350 --> 00:09:18,410
order to be able to analyze your data.

111
00:09:18,560 --> 00:09:26,750
And we've been building internal APIs basically every single time we've built a backend because we haven't

112
00:09:26,750 --> 00:09:29,190
opened that up for anyone else to use.

113
00:09:29,210 --> 00:09:33,740
Now, as you realize, that doesn't mean that other people can't.

114
00:09:33,770 --> 00:09:38,570
It just means it's not documented and we haven't promised to support it.

115
00:09:38,690 --> 00:09:49,070
In many cases, a private or internal API is something that is not supported for external use.

116
00:09:49,070 --> 00:09:54,980
But unless you have security features in place, it doesn't mean that it can't be accessed.

117
00:09:54,980 --> 00:09:59,810
And in fact this is a huge category where people try to figure out what are the methods.

118
00:10:00,050 --> 00:10:04,310
In various companies, private APIs, which we won't go into right now.

119
00:10:04,310 --> 00:10:11,900
But this is something to be aware of, not only when you're building your own APIs, but also when you

120
00:10:11,900 --> 00:10:14,450
are trying to figure something out on the Internet.

121
00:10:15,530 --> 00:10:20,270
What we're going to be building in this module is a rest API.

122
00:10:20,690 --> 00:10:29,150
Unfortunately, it's not time to rest, but it is a time to build what's called a representational state

123
00:10:29,180 --> 00:10:31,400
transfer API.

124
00:10:31,670 --> 00:10:33,170
Don't sleep just yet.

125
00:10:33,200 --> 00:10:38,810
It's time to review what we need to do to follow the rest architecture.

126
00:10:38,810 --> 00:10:45,110
So it's essentially just a bunch of rules that describe how an API should be.

127
00:10:45,140 --> 00:10:46,010
Let's go.

128
00:10:46,010 --> 00:10:47,150
Let's take a look.

129
00:10:47,480 --> 00:10:52,580
The first rule, and this is one of those classic interview questions.

130
00:10:52,700 --> 00:10:56,450
Good to keep some notes on if you're thinking about applying for jobs.

131
00:10:56,480 --> 00:11:02,820
The question would be something like what makes a API restful?

132
00:11:02,820 --> 00:11:11,340
And the number one rule for making an API restful is that it uses standard Http methods.

133
00:11:11,340 --> 00:11:13,290
You're already pretty familiar with this.

134
00:11:13,320 --> 00:11:16,380
It's your get post put patch and delete.

135
00:11:16,380 --> 00:11:23,250
And these are the standard verbs that you use to interact with our restful API.

136
00:11:23,490 --> 00:11:30,850
So that means if you wanted to grab hold of something from the API, you would use the get method.

137
00:11:30,870 --> 00:11:34,080
If you want to delete something, you would use the delete method.

138
00:11:34,110 --> 00:11:36,060
So far pretty easy.

139
00:11:36,270 --> 00:11:45,330
The next rule is that it should probably have a standard data format that it responds with.

140
00:11:45,360 --> 00:11:53,970
That means something like the Json format, the JavaScript object notation or something like XML.

141
00:11:53,970 --> 00:12:04,020
And this is a response to calling the API and the response is given back to the client and restful APIs

142
00:12:04,020 --> 00:12:08,250
respond with something that is pretty standard like Json.

143
00:12:08,730 --> 00:12:14,250
This is the representation part of the representational state transfer.

144
00:12:14,310 --> 00:12:22,650
Resources are represented in a specific format like Json and that is sent in response to the client.

145
00:12:23,130 --> 00:12:26,340
Again, so far nothing too crazy.

146
00:12:26,640 --> 00:12:35,070
The next rule is that clients and servers in restful APIs are completely separate.

147
00:12:35,100 --> 00:12:44,370
They are not on the same system or in the same file and they're able to message each other over a network.

148
00:12:44,400 --> 00:12:49,410
In order to make requests and also to get back responses.

149
00:12:50,010 --> 00:12:58,320
And this part of the restful API architecture allows each side to be able to scale independently from

150
00:12:58,320 --> 00:13:04,660
each other and they can evolve and be completely built separately by different people, which means

151
00:13:04,660 --> 00:13:09,510
that the restful API allows the whole system to scale very easily.

152
00:13:09,540 --> 00:13:12,570
The next rule is statelessness.

153
00:13:12,600 --> 00:13:19,590
What this means is that each request from the client to the server should contain all the information

154
00:13:19,590 --> 00:13:22,880
that's needed to understand and process the request.

155
00:13:22,890 --> 00:13:30,740
So the server shouldn't be storing any sort of client side, state or client side data between the requests.

156
00:13:30,750 --> 00:13:39,510
So what this means is that each single request can be complete and each single response is also complete

157
00:13:39,510 --> 00:13:42,930
without need to know what happened previously.

158
00:13:43,200 --> 00:13:50,520
And this basically again allows better scalability of the API and it simplifies the server side implementation.

159
00:13:50,550 --> 00:14:00,090
So every single time the client makes a request to the server, it contains all of the information that

160
00:14:00,090 --> 00:14:08,390
the server needs in order to figure out what to respond back and the server doesn't need to check Oh,

161
00:14:08,430 --> 00:14:10,890
what did this person ask for previously?

162
00:14:10,890 --> 00:14:11,550
Or.

163
00:14:11,550 --> 00:14:15,870
Oh, uh, last time I sent them the fourth item.

164
00:14:15,870 --> 00:14:19,590
So if they're requesting now, they must want the fifth item.

165
00:14:19,590 --> 00:14:22,800
That means that you need to keep track of state.

166
00:14:22,800 --> 00:14:28,890
And it means that if you have multiple clients coming in, it can quickly reduce your efficiency and

167
00:14:28,890 --> 00:14:31,320
scalability of your API.

168
00:14:31,980 --> 00:14:38,520
This rule basically allows the server to serve many, many clients and many, many requests.

169
00:14:38,910 --> 00:14:50,010
Next is that your rest API is resource based, so it is an API that is centered around resources and

170
00:14:50,010 --> 00:14:57,780
uses a unique resource identifier, also known as a resource locator.

171
00:14:57,780 --> 00:14:59,790
So this is a Uri.

172
00:15:00,210 --> 00:15:02,280
Or a u.r.l.

173
00:15:02,310 --> 00:15:06,210
In order to locate specific resources.

174
00:15:06,420 --> 00:15:11,580
We all know what a URL is because you use it every single time you try to access a website.

175
00:15:11,580 --> 00:15:19,020
But know that a universal resource locator is simply just an address for a particular resource and it's

176
00:15:19,020 --> 00:15:22,090
a type of a universal resource identifier.

177
00:15:22,110 --> 00:15:25,800
It identifies that resource in the API.

178
00:15:26,670 --> 00:15:33,510
You might have seen all these five rules and thought to yourself, Hmm, this seems kind of familiar.

179
00:15:33,540 --> 00:15:37,560
A lot of this just seems like it's the internet.

180
00:15:37,590 --> 00:15:46,080
Well, if that is true, then you are very much on track because the Internet as you know it, the World

181
00:15:46,080 --> 00:15:53,970
Wide Web is considered one of the most successful implementations of restful architecture because we

182
00:15:53,970 --> 00:15:58,140
have our resources located in URLs.

183
00:15:58,140 --> 00:16:02,350
So this is how we can identify what it is we want to access.

184
00:16:02,380 --> 00:16:12,640
We work and interact with the server through an API using Http standard protocol, and the responses

185
00:16:12,640 --> 00:16:22,390
we get back are standard data formats such as Json or XML or JavaScript or HTML.

186
00:16:22,390 --> 00:16:28,300
And also we have a strict client server separation.

187
00:16:28,300 --> 00:16:34,360
So the client is the person who's using the browser and the server is the computer that holds all of

188
00:16:34,360 --> 00:16:39,700
the data that is needed to be served when somebody requests a particular web page.

189
00:16:39,970 --> 00:16:43,960
And finally, the Internet is pretty much stateless.

190
00:16:43,990 --> 00:16:50,560
Every single request to a web page contains all of the information that's required in order to determine

191
00:16:50,560 --> 00:16:52,600
what web page to send back.

192
00:16:52,630 --> 00:17:00,910
This is also why we're learning to create restful APIs, because it is a key concept in web development

193
00:17:00,910 --> 00:17:06,250
and because we're learning to become web developers, then it's pretty important that we get our heads

194
00:17:06,250 --> 00:17:09,430
around how to build restful APIs.

195
00:17:10,089 --> 00:17:13,990
The API that we're going to be building is a joke API.

196
00:17:14,380 --> 00:17:21,880
It's a restful API abiding by all of the rules that we talked about, and it serves up jokes to anyone

197
00:17:21,880 --> 00:17:23,859
who wants to access that API.

198
00:17:23,890 --> 00:17:28,870
Maybe you're a pretty good joke writer and you've written, let's say, a hundred good jokes and you've

199
00:17:28,870 --> 00:17:35,230
categorized them into different types, different categories, and you allow anybody to be able to tap

200
00:17:35,230 --> 00:17:38,440
into your API and get hold of some jokes.

201
00:17:38,830 --> 00:17:45,760
This is going to allow us to see how everything works in practice by building this API from scratch.

202
00:17:45,790 --> 00:17:48,190
Once you're ready, let's get started.

