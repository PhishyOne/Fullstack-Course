1
00:00:00,170 --> 00:00:07,970
Now as we're complying with restful best practices, we're going to be building our API using the Http

2
00:00:07,970 --> 00:00:11,290
verbs and we're going to start using the get method.

3
00:00:11,300 --> 00:00:15,050
So how can you get hold of jokes using our API?

4
00:00:16,640 --> 00:00:20,840
We're going to be building this step by step with a hands on approach.

5
00:00:21,230 --> 00:00:28,310
The first thing I want you to do is to go into the course resources for this current lesson and download

6
00:00:28,310 --> 00:00:32,600
the Postman collection dot Json file.

7
00:00:32,750 --> 00:00:37,790
Once you've done that, I want you to go ahead and open up Postman, which you should already have installed

8
00:00:37,790 --> 00:00:42,440
as we went into this in detail in our API section.

9
00:00:42,800 --> 00:00:46,880
Then I want you to go into workspaces, my workspace.

10
00:00:46,880 --> 00:00:53,960
And here if you go into the collections section, I want you to go ahead and click on Import.

11
00:00:54,770 --> 00:01:00,860
You're going to drag and drop that file that you just downloaded right into here.

12
00:01:00,890 --> 00:01:08,780
And once you've done that, it'll open up and give you access to this joke API postman collection that

13
00:01:08,780 --> 00:01:10,100
I've created for you.

14
00:01:10,250 --> 00:01:15,750
You can see in here we've got all of our familiar verbs, the get random joke.

15
00:01:15,780 --> 00:01:16,990
Get specific joke.

16
00:01:17,010 --> 00:01:19,660
Get a filter joke by joke type.

17
00:01:19,680 --> 00:01:21,180
We can post a new joke.

18
00:01:21,210 --> 00:01:26,520
Put a joke, patch a joke, delete a joke, and finally delete all jokes.

19
00:01:26,520 --> 00:01:30,600
So these are all of the endpoints that we're going to be building in this module.

20
00:01:30,600 --> 00:01:37,560
And we're going to start off with the simplest one, which is to be able to get hold of a random joke

21
00:01:38,070 --> 00:01:41,340
in order to see what our API should look like.

22
00:01:41,370 --> 00:01:47,850
You can take a look at the docs which gets automatically generated when you create a new postman collection

23
00:01:47,850 --> 00:01:51,600
such as the joke API collection that you just opened up.

24
00:01:51,750 --> 00:01:58,980
You can either scan this QR code using your phone or type in this long URL into your browser, but either

25
00:01:58,980 --> 00:02:05,670
way it will take you to the joke API documentation and this gets completely automatically created.

26
00:02:05,670 --> 00:02:12,000
All I had to do is to add in some text here and there and give it some requests.

27
00:02:12,030 --> 00:02:15,810
Run the request and save those requests in Postman.

28
00:02:15,840 --> 00:02:23,910
For example, if you were to create a new collection and you create a new Http request, a get request,

29
00:02:23,910 --> 00:02:27,930
you enter some sort of URL and then you go ahead and hit send.

30
00:02:27,960 --> 00:02:33,840
You'll be able to save this request to a collection and you'll be able to generate the documentation

31
00:02:33,840 --> 00:02:36,720
automatically in the same way that I have done.

32
00:02:37,650 --> 00:02:43,200
So let's go ahead and delete this and go back to our joke API here.

33
00:02:43,200 --> 00:02:48,930
You can also go to the documentation by clicking these three dots, viewing the documentation, and

34
00:02:48,930 --> 00:02:54,870
in my case, I've actually published it on to the web, which is why you can visit this URL and see

35
00:02:54,870 --> 00:02:59,970
what all of the requests should be and navigate to the one you want.

36
00:03:00,000 --> 00:03:08,580
The first job of ours is to be able to hit up forward, slash random as an endpoint here, and the request

37
00:03:08,610 --> 00:03:13,260
looks like something like this in the terminal, which is using curl or curl.

38
00:03:13,260 --> 00:03:19,440
And in our case, if it was using Axios, then it also gives you some example code as well, which is

39
00:03:19,440 --> 00:03:24,510
kind of neat, but let's leave it on the simplest form, which is what you'll see most APIs documented

40
00:03:24,510 --> 00:03:25,740
in, which is curl.

41
00:03:25,740 --> 00:03:31,590
And if you take a look at the example response, you'll see what kind of data we would expect back.

42
00:03:31,590 --> 00:03:37,620
So it's a Json format with an ID, with a joke text and a joke type.

43
00:03:37,620 --> 00:03:42,810
So this is our entire joke object that comes back as a Json.

44
00:03:42,900 --> 00:03:52,010
The first challenge is to get hold of a random joke, so hit up this URL endpoint localhost 3000 forward,

45
00:03:52,020 --> 00:03:56,550
slash random and get back a random joke from the collection.

46
00:03:56,550 --> 00:04:03,990
When you hit send, take a look in the course resources for this lesson and download the starting files

47
00:04:03,990 --> 00:04:07,530
in the 6.0 API zip file.

48
00:04:07,560 --> 00:04:13,050
Extract the zip file on your system and open it inside vs code.

49
00:04:13,080 --> 00:04:19,620
Once you're here, you'll see that you've got the Index.js file, which is where you're going to be

50
00:04:19,620 --> 00:04:21,690
writing all of your code.

51
00:04:21,720 --> 00:04:28,380
And you can see we've got all eight of the challenges listed out for you and we're starting out with

52
00:04:28,380 --> 00:04:29,160
this one.

53
00:04:29,160 --> 00:04:37,230
Number one, you can also run the solution dot JS file and you can do that by simply seeding to this

54
00:04:37,230 --> 00:04:43,500
repository, making sure that you've installed all of the node modules required by running NPM.

55
00:04:43,500 --> 00:04:43,800
I.

56
00:04:44,100 --> 00:04:50,130
So this is going to look inside the package.json and grab all of those dependencies that we've listed,

57
00:04:50,160 --> 00:04:58,770
EJS and Express, and once you've done that you can use Nodemon to run solution dot JS and once it's

58
00:04:58,770 --> 00:05:08,400
up and running at Port 3000, you should be able to go through each of these requests in the joke API

59
00:05:08,430 --> 00:05:15,270
and you should be able to send a request and you will see that it works now.

60
00:05:15,270 --> 00:05:21,510
I've set up everything, including the path variables for the specific jokes, the query parameters

61
00:05:21,510 --> 00:05:26,790
for the filter jokes, but we're going to go through them one by one, so don't worry too much about

62
00:05:26,790 --> 00:05:27,630
that right now.

63
00:05:27,660 --> 00:05:32,850
The first one we want to make functioning is to be able to get hold of a random joke.

64
00:05:32,850 --> 00:05:39,690
And you can see each time the joke changes and it's looping through the list of jokes that I've included

65
00:05:39,690 --> 00:05:41,490
in the starting file for you.

66
00:05:41,490 --> 00:05:46,010
So if you scroll down to the bottom, you can see there is this variable called jokes.

67
00:05:46,020 --> 00:05:54,450
There's all 100 of them in here I've created for you, and all you have to do is to use what you know

68
00:05:54,450 --> 00:06:03,030
about JavaScript Node Express in order to create your API route here that will return with a response

69
00:06:03,030 --> 00:06:05,850
that is a random joke.

70
00:06:06,000 --> 00:06:10,770
You can either do this as a challenge, which is a little bit difficult because we haven't really gone

71
00:06:10,770 --> 00:06:11,580
through it yet.

72
00:06:11,580 --> 00:06:17,970
Or you can continue and watch the slide deck with me to see how this is done.

73
00:06:22,710 --> 00:06:25,600
This end point will look something like this.

74
00:06:25,620 --> 00:06:33,730
We know it is a get request, so we're going to need to use the App.get, which comes from Express.

75
00:06:33,750 --> 00:06:36,210
This is where this method comes from.

76
00:06:37,200 --> 00:06:42,900
And then the first parameter we add into this method is the route.

77
00:06:43,320 --> 00:06:50,280
So it's the end point basically where we want people to be able to access this and you'll see this in

78
00:06:50,280 --> 00:06:54,510
the documentation also in the Postman collection.

79
00:06:54,510 --> 00:07:02,700
But the route that we want to create is forward slash random, and then the next part comes the callback.

80
00:07:02,700 --> 00:07:06,840
So what should happen when this request comes through?

81
00:07:07,260 --> 00:07:13,230
In our case, what we want to do is we want to tap into the request and the response object.

82
00:07:13,260 --> 00:07:22,660
We want to get hold of a random number by using math.random and multiply that number which will be naught

83
00:07:22,660 --> 00:07:24,010
point something.

84
00:07:24,010 --> 00:07:30,520
So 0.1, two, three, four, five, and then we multiply it by the length of the joke array, which

85
00:07:30,520 --> 00:07:37,600
is 100, and that will give us a random number between 0 and 100.

86
00:07:37,600 --> 00:07:41,470
And then finally we use Math.floor in order to round it down.

87
00:07:41,470 --> 00:07:49,000
And we can now use this random number to grab hold of a random joke from the jokes array and then we

88
00:07:49,000 --> 00:07:59,980
can send it back out as a response by using Res.json Rez is the response and Json is simply a way of

89
00:07:59,980 --> 00:08:08,770
converting our data here, which is in the format of a JavaScript object into a Json object and then

90
00:08:08,770 --> 00:08:11,680
returning that back out as the output.

91
00:08:12,160 --> 00:08:17,650
So this is all that it takes in order to complete this part of our API.

92
00:08:17,950 --> 00:08:20,470
So I want you to take a look at this code.

93
00:08:20,500 --> 00:08:24,490
Think about if you understand what each part of it does.

94
00:08:24,520 --> 00:08:30,400
If not, take a quick Google, use something like W3 schools or Google StackOverflow.

95
00:08:30,400 --> 00:08:36,370
Investigate each part of the code that you don't understand, fully understand it and then go ahead

96
00:08:36,370 --> 00:08:37,390
without looking.

97
00:08:37,419 --> 00:08:44,830
See if you can figure out how to implement it on your own in VS code right here under challenge number

98
00:08:44,830 --> 00:08:50,590
one, get a random joke, pause the video and complete that part of the challenge.

99
00:08:54,750 --> 00:08:55,140
All right.

100
00:08:55,140 --> 00:08:59,370
So now challenge two is still another get request.

101
00:08:59,370 --> 00:09:07,830
And in this get request, what we want to do is to hit up the forward slash jokes, forward slash colon

102
00:09:07,830 --> 00:09:08,370
ID.

103
00:09:08,760 --> 00:09:17,610
You might remember this, but this colon, something, something is a way for us to be able to tap into

104
00:09:17,610 --> 00:09:28,230
a URL or a path parameter so we can specify that in Postman by going to the params tab and then scrolling

105
00:09:28,230 --> 00:09:33,960
down to the path variables and then adding a key and a value.

106
00:09:34,770 --> 00:09:44,150
This is equivalent to hitting up http localhost 3000 for slash jokes forward slash two.

107
00:09:44,160 --> 00:09:48,600
That's basically how Postman is going to reformat this request.

108
00:09:48,720 --> 00:09:57,610
And once that gets received in our API server, then we should look for a joke that has the matching

109
00:09:57,610 --> 00:10:02,950
ID and then send back the joke object that corresponds to that ID.

110
00:10:03,370 --> 00:10:06,040
That is your challenge number two.

111
00:10:06,070 --> 00:10:12,070
Now again, you have two choices depending on what you want to do, you can either use what you've learned

112
00:10:12,070 --> 00:10:20,980
in the last challenge to try this out on your own, or you can follow along with me and continue watching

113
00:10:20,980 --> 00:10:23,050
while we go through how to do this.

114
00:10:27,490 --> 00:10:29,740
Similarly to previous.

115
00:10:29,770 --> 00:10:39,970
We need our app.get in order to address when we get a get request to our server and that get request

116
00:10:39,970 --> 00:10:44,770
matches this endpoint forward slash jokes, forward slash a particular ID.

117
00:10:45,070 --> 00:10:53,200
What we should do when we get hold of that ID when it comes in through the request dot params, dot

118
00:10:53,230 --> 00:11:00,940
id, this is how we access any of the URL or path parameters in express.

119
00:11:00,940 --> 00:11:09,520
So remember there is request dot query and there's request dot params params is in the endpoint url.

120
00:11:09,520 --> 00:11:15,970
So forward slash something or other and query comes after the question mark.

121
00:11:15,970 --> 00:11:19,450
So it could be query id equals to.

122
00:11:19,450 --> 00:11:24,190
But in this case we chose a path parameter so we're not using the query.

123
00:11:24,460 --> 00:11:29,120
What this comes in as is going to be a string.

124
00:11:29,390 --> 00:11:37,640
However, in our jokes object, the ID parameter is in the format of an integer.

125
00:11:37,850 --> 00:11:45,410
That means when we're doing this checking mechanism, if this is not an integer, then this check is

126
00:11:45,410 --> 00:11:47,810
going to come back as false.

127
00:11:48,260 --> 00:11:53,900
There are two options here and depending on which one you prefer, you can pick and choose.

128
00:11:54,110 --> 00:11:59,390
The first option is to use the JavaScript triple equals.

129
00:11:59,390 --> 00:12:04,280
And this operator says the left hand side must strictly equal.

130
00:12:04,280 --> 00:12:08,870
The right hand side, including their types must match.

131
00:12:08,900 --> 00:12:16,280
If the right hand side is a number data type and the left hand side is a string data type, even though

132
00:12:16,280 --> 00:12:23,480
they are both to this check, this triple equals does not pass.

133
00:12:24,050 --> 00:12:31,310
Alternatively, you can use the JavaScript double equals operator and this is a loose comparison.

134
00:12:31,310 --> 00:12:37,670
In this case the type doesn't matter and JavaScript will perform a type conversion if necessary.

135
00:12:37,880 --> 00:12:45,110
You can choose either of these two for clarity's sake and in my mind, just for me to actually know

136
00:12:45,110 --> 00:12:52,400
exactly what I'm working with, I like using the triple equals because it means I'm not assuming anything.

137
00:12:52,400 --> 00:12:54,500
I know exactly what's going on.

138
00:12:54,500 --> 00:13:00,290
But for that to work, we're going to have to convert this string into a number or in this case into

139
00:13:00,290 --> 00:13:01,160
an integer.

140
00:13:01,160 --> 00:13:07,670
And we do that using the native built in method pass int that will convert the string into an integer

141
00:13:07,670 --> 00:13:15,830
and store it inside ID and so we can check ID against joke ID and they are now the same type and hopefully

142
00:13:15,830 --> 00:13:19,130
the same number if we want to get hold of it.

143
00:13:19,250 --> 00:13:24,860
Now the other thing you'll notice here is that in order to find the joke, I'm using the JavaScript

144
00:13:24,860 --> 00:13:26,120
find method.

145
00:13:26,300 --> 00:13:31,880
This takes an array and then you use the dot find method.

146
00:13:31,880 --> 00:13:41,690
And then in the brackets of this method it expects a callback which should return true on a particular

147
00:13:41,690 --> 00:13:42,650
condition.

148
00:13:42,800 --> 00:13:48,710
This callback takes a object joke essentially behind the scenes.

149
00:13:48,710 --> 00:13:55,400
It's going to loop through this array, go through each of the items and you can call each of the items

150
00:13:55,400 --> 00:14:02,990
whatever you want, joke or a or whatever variable name you want to give it, and then it's going to

151
00:14:02,990 --> 00:14:08,300
check against a particular return condition is the ID of that item.

152
00:14:08,300 --> 00:14:13,520
We're currently looping through equal to the ID that we are checking against.

153
00:14:13,520 --> 00:14:18,980
And you've seen this in our JavaScript module, so hopefully this shouldn't be too crazy.

154
00:14:18,980 --> 00:14:25,460
And if you wanted to review some of these methods, such as for each or find or that's a good point.

155
00:14:25,460 --> 00:14:27,470
Actually, there's multiple ways of doing this.

156
00:14:27,530 --> 00:14:34,100
This is just one way that I find pretty efficient and pretty quick to do and also doesn't involve a

157
00:14:34,100 --> 00:14:35,390
lot of lines of code.

158
00:14:35,390 --> 00:14:41,540
But equally, you could use the standard for loop in JavaScript, you could use the for each, you could

159
00:14:41,540 --> 00:14:44,060
use anything that works.

160
00:14:44,060 --> 00:14:44,720
Essentially.

161
00:14:44,720 --> 00:14:49,940
It doesn't matter at the end of the day, as long as you fully understand what's going on.

162
00:14:50,480 --> 00:14:57,500
And once we grab hold of the joke that matches this criteria, that's a joke with the matching ID,

163
00:14:57,530 --> 00:15:01,700
and then we send it back as the response in a Json format.

164
00:15:02,360 --> 00:15:08,780
Now check to make sure that you understood everything in this code and then go ahead and implement it.

165
00:15:08,960 --> 00:15:13,640
The process that we're replicating here is less like a coding exercise.

166
00:15:13,640 --> 00:15:20,150
I'm not really expecting you to be able to come across each of these challenges, say write the API

167
00:15:20,210 --> 00:15:26,120
server code to be able to get hold of a specific joke just by looking at the criteria that.

168
00:15:26,250 --> 00:15:28,560
Listed in Postman Instead.

169
00:15:28,560 --> 00:15:34,950
It's kind of more akin to what happens when you're developing in real life and you look for a solution

170
00:15:34,950 --> 00:15:36,150
to a problem you have.

171
00:15:36,150 --> 00:15:38,820
You come across a solution on StackOverflow.

172
00:15:38,820 --> 00:15:44,970
But now the important part is you've got to figure out, well, what does all of this mean?

173
00:15:44,970 --> 00:15:45,420
Right?

174
00:15:45,450 --> 00:15:47,460
What does it actually mean?

175
00:15:47,460 --> 00:15:54,270
And before you move on, you understand all of the code and then you can replicate the code in your

176
00:15:54,270 --> 00:15:55,740
own solution.

177
00:15:56,780 --> 00:16:02,630
Go ahead and do that under number two to get a specific joke by ID.

178
00:16:03,140 --> 00:16:07,730
So pause the video and then once you've done that, we'll continue on to challenge three.

179
00:16:11,330 --> 00:16:11,660
All right.

180
00:16:11,660 --> 00:16:19,640
So the final get request challenge is to filter the jokes by a particular type.

181
00:16:19,790 --> 00:16:29,480
And in this case, we are specifying the type by using a query parameter in the params tab.

182
00:16:29,480 --> 00:16:36,920
If you go to query parameters, you can add a query with a key and value here and it will automatically

183
00:16:36,920 --> 00:16:39,800
format your query into the URL.

184
00:16:39,830 --> 00:16:42,890
So this is something that Postman does really well.

185
00:16:42,890 --> 00:16:49,940
You can add as many queries as you like and you can test them by hitting send on your solution dot JS

186
00:16:49,940 --> 00:16:57,650
And what it should do is it should pull back an array of jokes that all match a particular joke type.

187
00:16:57,650 --> 00:17:05,690
So if you look inside the joke variable in your code down here, you'll see that they have different

188
00:17:05,690 --> 00:17:06,440
joke types.

189
00:17:06,440 --> 00:17:10,770
Some are science based, some are pun, some are wordplay.

190
00:17:10,770 --> 00:17:11,430
ET cetera.

191
00:17:11,430 --> 00:17:11,910
ET cetera.

192
00:17:11,910 --> 00:17:18,869
And what you want to be able to do is to send a request to your joke API and specify a joke, type in

193
00:17:18,869 --> 00:17:25,260
the query parameter, and it pulls back all of the jokes that match that particular joke type that you

194
00:17:25,260 --> 00:17:26,250
requested.

195
00:17:26,369 --> 00:17:27,630
That's the goal.

196
00:17:28,230 --> 00:17:33,990
And again, I'm giving you the option of the extra hard challenge where you figure out how to do this

197
00:17:33,990 --> 00:17:36,720
all by yourself as a big challenge.

198
00:17:36,720 --> 00:17:41,070
Or we run through everything together and then you implement it.

199
00:17:41,160 --> 00:17:42,000
Pause the video.

200
00:17:42,000 --> 00:17:47,820
Now, if you want to do this all by yourself or you can give it a go and then come back and see us work

201
00:17:47,820 --> 00:17:49,080
through it together as well.

202
00:17:51,390 --> 00:17:58,500
The solution in this case is going to hit up the forward slash filter endpoint and the type that the

203
00:17:58,500 --> 00:18:02,580
client is requesting lives in the query parameter.

204
00:18:02,580 --> 00:18:08,490
And we get hold of that by tapping into request dot query and then whatever it is, the parameter they've

205
00:18:08,520 --> 00:18:09,360
typed in.

206
00:18:09,510 --> 00:18:16,740
This is where our documentation comes in handy because if we look at get filter joke by type, you can

207
00:18:16,740 --> 00:18:21,030
see that there should be a parameter called type.

208
00:18:21,030 --> 00:18:25,170
And this we are telling the world because we're building a public API, right?

209
00:18:25,170 --> 00:18:31,950
We're saying this is how you can filter a joke and you have to make sure that the query parameter is

210
00:18:31,950 --> 00:18:35,310
spelled this way in order to get it to work.

211
00:18:36,060 --> 00:18:40,290
That is how we've set up our query parameter.

212
00:18:40,320 --> 00:18:48,600
This is the name of the query and then I'm using the filter method on arrays in JavaScript in order

213
00:18:48,600 --> 00:18:57,370
to pass in a callback in here that looks through all of the jokes inside the jokes array go through

214
00:18:57,370 --> 00:19:07,210
each of them and we try to find a match where the joke joke type is equal to the type that is being

215
00:19:07,210 --> 00:19:09,190
requested right here.

216
00:19:09,940 --> 00:19:17,530
This filter method works pretty similar to the find method, and the end result is an array where every

217
00:19:17,530 --> 00:19:24,400
single one of the objects in the array match this criteria that we've specified, and then we take that

218
00:19:24,400 --> 00:19:31,690
array and give it back in the response as a Json, make sure that you understand everything before you

219
00:19:31,690 --> 00:19:32,230
proceed.

220
00:19:32,230 --> 00:19:37,620
If you haven't seen the filter method in JavaScript for a while, then go to search for it.

221
00:19:37,630 --> 00:19:43,600
Read through the documentation and make sure you understand before you type your code.

222
00:19:43,630 --> 00:19:45,940
There's nothing wrong with copy and pasting code.

223
00:19:45,940 --> 00:19:51,070
There's nothing wrong with getting solutions by googling or stackoverflow.

224
00:19:51,100 --> 00:19:56,860
No good senior developers will ever tell you off for this because this is the process that we've all

225
00:19:56,890 --> 00:19:58,870
gone through to become better developers.

226
00:19:58,870 --> 00:20:05,890
But and there is a but if you just copy and paste code without understanding what the code does, that

227
00:20:05,890 --> 00:20:11,170
is something that you should not do because then it means that you're not actually engaging your brain,

228
00:20:11,170 --> 00:20:12,880
you're not working as a developer.

229
00:20:12,910 --> 00:20:16,360
You are simply copy and pasting code which anyone can do.

230
00:20:16,390 --> 00:20:22,060
We are training ourselves to have the skills to be able to read and understand what the code does and

231
00:20:22,060 --> 00:20:23,560
to be able to implement it.

232
00:20:24,370 --> 00:20:31,630
Those are all three of the get requests and if you haven't already, make sure you use Nodemon to run

233
00:20:31,630 --> 00:20:40,360
your index.js and make sure that those parts in the joke API collection, all of the get requests still

234
00:20:40,360 --> 00:20:47,530
run and respond as you would expect with 200 and also getting back the items that you expected to get

235
00:20:47,530 --> 00:20:48,160
back.

236
00:20:48,460 --> 00:20:54,760
In the next lesson, we're going to look at making a post request in order to add new data to our API.

237
00:20:55,600 --> 00:20:57,760
So for all of that and more, I'll see you there.

