1
00:00:00,170 --> 00:00:00,740
Hey, guys.

2
00:00:00,740 --> 00:00:01,700
Welcome back.

3
00:00:01,730 --> 00:00:07,220
In the last video, we saw briefly how we can get started using EJS.

4
00:00:07,250 --> 00:00:14,120
In this video, we're going to dive a bit deeper into EJS syntax and see how we can use the different EJS tags

5
00:00:14,120 --> 00:00:17,930
in order to achieve what we want using this templating tool.

6
00:00:17,960 --> 00:00:23,360
There are quite a few EJS tags and these are some of the ones that you'll commonly see.

7
00:00:23,390 --> 00:00:28,190
Now the structure of an EJS tag, no matter which type it is, it's all pretty simple.

8
00:00:28,220 --> 00:00:35,450
We always start with an angle bracket and then a percentage sign (<%), and we usually always end with a percentage

9
00:00:35,450 --> 00:00:37,400
sign and an angle bracket (%>).

10
00:00:37,430 --> 00:00:41,290
Now the part that's different is usually in the opening tag.

11
00:00:41,300 --> 00:00:46,460
For example, we might have an equal sign (=), we might have a minus sign (-), we might have another percentage (%)

12
00:00:46,460 --> 00:00:48,630
or a pound sign (#), etcetera.

13
00:00:48,650 --> 00:00:51,590
Let's go through each of them and see how they're different.

14
00:00:52,010 --> 00:00:59,030
The first one you've already seen and used, which is the one with an equal sign (=), and this says that

15
00:00:59,030 --> 00:01:06,900
whatever goes in between the open and closing parts of the tag will be interpreted as JavaScript

16
00:01:06,900 --> 00:01:13,080
but in addition, there will be an output that's going to be put into that HTML or EJS file.

17
00:01:13,290 --> 00:01:19,020
For example, we can insert a variable and that variable could be a name, right?

18
00:01:19,020 --> 00:01:21,240
It could equal the string,

19
00:01:21,270 --> 00:01:29,070
"Angela." And that means that when this EJS tag is rendered in the browser, you will see that name show

20
00:01:29,070 --> 00:01:30,590
up on the website.

21
00:01:30,600 --> 00:01:34,440
So it's interpreted JavaScript with an output.

22
00:01:34,770 --> 00:01:42,750
If we take away that equal sign and we just have the pure EJS tag, no modifications to the opening tag,

23
00:01:42,750 --> 00:01:46,800
then this is executable JavaScript code. Inside here

24
00:01:46,800 --> 00:01:52,110
you could write any sort of JavaScript code and it will be just treated like JavaScript code, but it's

25
00:01:52,110 --> 00:01:54,690
interpreted inside an EJS file.

26
00:01:54,930 --> 00:01:58,410
Imagine you can write JavaScript inside HTML,

27
00:01:58,440 --> 00:02:02,220
that's essentially what this tag allows you to do.

28
00:02:02,250 --> 00:02:07,650
You could, for example, write a console.log and you will see in the console when that page is loaded

29
00:02:07,650 --> 00:02:09,780
up, whatever it is you want to log.

30
00:02:09,930 --> 00:02:14,820
But one thing to remember, though, is this does not give an output.

31
00:02:14,910 --> 00:02:20,820
So the code in here will be evaluated, but there will be nothing that shows up when it gets converted

32
00:02:20,820 --> 00:02:23,640
to HTML and displayed in the browser.

33
00:02:24,510 --> 00:02:30,810
The next EJS tag has a minus sign (-) after the opening tag,

34
00:02:30,810 --> 00:02:39,090
and what this says is whatever goes in between the opening and closing tags should be interpreted as

35
00:02:39,390 --> 00:02:40,050
HTML.

36
00:02:40,080 --> 00:02:47,970
That means you can actually write HTML or in our case, send the HTML to the EJS file and that will be rendered

37
00:02:47,970 --> 00:02:50,420
and interpreted as HTML.

38
00:02:50,430 --> 00:02:54,870
So it means that when this is displayed in the website it won't be, "h1"

39
00:02:54,900 --> 00:03:03,390
"Hello", closing tag "h1" it will actually just be hello in a big h1 font or whatever styling you chose

40
00:03:03,390 --> 00:03:04,620
for your website.

41
00:03:05,230 --> 00:03:10,750
Now the next one is even simpler, and this is probably something that you'll very rarely use.

42
00:03:10,780 --> 00:03:19,450
This is an escape EJS tag. By adding an extra percentage sign to the opening tag (<%%) or an extra percentage sign

43
00:03:19,450 --> 00:03:21,630
before the end of the closing tag (%%>),

44
00:03:21,640 --> 00:03:28,780
what we can do is we can escape the EJS tag, which means that you can actually show the tags.

45
00:03:28,810 --> 00:03:34,540
Let's say you're writing a website where you want to teach people about EJS tags and you want it to say,

46
00:03:34,540 --> 00:03:40,510
"Well, this is what an EJS tag looks like when you want to have an output."

47
00:03:40,540 --> 00:03:46,900
Well, if you actually wrote this in your EJS file, this part would all be interpreted as EJS and you

48
00:03:46,900 --> 00:03:49,130
would see nothing of it on the website.

49
00:03:49,150 --> 00:03:55,600
So if you wanted to actually show the angle bracket plus a percentage sign for it to not be interpreted

50
00:03:55,600 --> 00:04:01,630
as EJS, but just as plain text, then you can add a percentage sign after the opening tag or before

51
00:04:01,630 --> 00:04:02,710
the closing tag.

52
00:04:03,340 --> 00:04:10,490
Next is how you write EJS comments, just as we have the double slash (//) in JavaScript, where everything comes

53
00:04:10,490 --> 00:04:16,339
afterwards is not executed as HTML code or JavaScript code, in EJS

54
00:04:16,370 --> 00:04:22,730
you add a pound sign (#) or a hashtag if you will, after the opening bracket and then everything that goes

55
00:04:22,730 --> 00:04:29,510
inside will be interpreted as not code but as a comment in that code file.

56
00:04:29,510 --> 00:04:34,100
So none of it is executed or interpreted or rendered.

57
00:04:34,190 --> 00:04:37,520
Finally, we have the "include" in this syntax.

58
00:04:37,520 --> 00:04:45,200
We have a minus sign after the opening tag and then we have the keyword include and then we have a set

59
00:04:45,200 --> 00:04:51,110
of parentheses where inside the parentheses we add the name of an EJS file.

60
00:04:51,320 --> 00:05:00,260
What this allows us to do is to insert another EJS file into this current EJS file where this tag is and

61
00:05:00,260 --> 00:05:05,510
we're going to explore this in greater detail in later lessons where we learn about Layouts and Partials.

62
00:05:05,510 --> 00:05:12,140
But essentially what this allows us to do, is to create a website where we have the same, say, header

63
00:05:12,140 --> 00:05:18,740
and footer, which is just, you know, maybe the name of our website or maybe just some copyright text

64
00:05:18,740 --> 00:05:20,410
and some links, etcetera.

65
00:05:20,420 --> 00:05:28,310
Now these two parts are going to be the same in all of our website, but this part is where we're going

66
00:05:28,310 --> 00:05:29,750
to change each time.

67
00:05:29,750 --> 00:05:35,600
Instead of having to write these bits of header and footer code every single time in our EJS, what we

68
00:05:35,600 --> 00:05:43,430
can do is we can use "include" to simply insert a header.ejs and a footer.ejs and then all we have to do

69
00:05:43,430 --> 00:05:49,230
is concentrate on the part that does in fact change, which is the body of the website.

70
00:05:49,250 --> 00:05:53,900
Now hopefully you've seen some of the different examples of EJS tags,

71
00:05:53,900 --> 00:05:57,410
so what does this look like in actual code?

72
00:05:57,650 --> 00:06:04,190
Here I've got a variable in my index.js called bowl and in my fruit bowl there's apples, oranges and

73
00:06:04,190 --> 00:06:05,810
pears in an array.

74
00:06:05,960 --> 00:06:13,940
When I render my index.ejs, I pass along this array in the variable called fruits and that gets picked

75
00:06:13,940 --> 00:06:16,760
up in my index.ejs file.

76
00:06:16,970 --> 00:06:21,710
Now, using the special EJS brackets,

77
00:06:21,710 --> 00:06:24,590
so just the angle and percentage sign (<%),

78
00:06:24,590 --> 00:06:28,220
remember this is the only-code tag.

79
00:06:28,220 --> 00:06:31,520
So only runs the code doesn't render anything on screen.

80
00:06:31,550 --> 00:06:38,780
Then I can actually insert actual JavaScript code in my HTML or EJS file.

81
00:06:39,290 --> 00:06:46,280
I can loop through this array and I can render each of the fruits in there as a list item.

82
00:06:46,670 --> 00:06:53,270
And inside this list item, I'm using the other type of tag, which is the angle bracket percentage equal

83
00:06:53,270 --> 00:06:53,840
sign (<%=),

84
00:06:53,840 --> 00:07:05,510
and this remember is a type of output EJS tag, that means that something is actually going to be outputted

85
00:07:05,510 --> 00:07:09,890
into HTML to be displayed in my website.

86
00:07:09,890 --> 00:07:16,310
And in my case, that's exactly what I want because I want an unordered list with all of my fruits showing

87
00:07:16,310 --> 00:07:24,260
up one after the other in the order that they are created in the array. And this is what it would look

88
00:07:24,260 --> 00:07:24,800
like.

89
00:07:25,730 --> 00:07:32,210
Now let's try an exercise and test out your ability to use some of these different EJS tags.

90
00:07:32,390 --> 00:07:39,560
What I've got in the starting file is an index.js that has an app.get() already written,

91
00:07:39,560 --> 00:07:47,480
and in the app.get(), I've got this data object that's being sent over when we render our index.ejs.

92
00:07:47,480 --> 00:07:49,910
So I'm sending over some title text.

93
00:07:49,910 --> 00:07:54,470
I'm sending over the current number of seconds on the clock.

94
00:07:54,470 --> 00:08:03,890
So if we have a clock and currently it's 10:05:23 seconds, then this is the value (23) that I'm sending in

95
00:08:03,920 --> 00:08:04,910
to this

96
00:08:05,120 --> 00:08:11,750
seconds property. And I've also got an array and some HTML content.

97
00:08:11,990 --> 00:08:19,610
In addition, I've included a footer.ejs file which just contains a little bit of footer, some copyright

98
00:08:19,640 --> 00:08:20,120
text,

99
00:08:20,120 --> 00:08:31,460
and what I want you to do is to modify the index.ejs file so that you end up with two potential options.

100
00:08:31,460 --> 00:08:36,470
You end up with the title displayed in an h1,

101
00:08:36,500 --> 00:08:42,620
you end up with the current number of seconds displayed in this paragraph element, and if the current

102
00:08:42,650 --> 00:08:47,990
number of seconds on the clock is odd, then we're going to show no items,

103
00:08:47,990 --> 00:08:54,860
but if it's even, then we're going to display the items that we got from our server.

104
00:08:55,220 --> 00:09:01,700
And then finally we're going to render this HTML as actual HTML.

105
00:09:01,700 --> 00:09:07,380
So notice I've got the "em" tags around it and I want to show this as HTML.

106
00:09:07,380 --> 00:09:15,840
And finally, we're going to pull in this footer right here using the final type of EJS tag that we talked

107
00:09:15,840 --> 00:09:21,420
about, which is the angle bracket percentage minus includes,

108
00:09:21,420 --> 00:09:23,610
and then we add in the name of the file.

109
00:09:23,970 --> 00:09:26,100
This is the exercise for you.

110
00:09:26,100 --> 00:09:32,730
And as always, we're going to start off by cd'ing into the extracted folder.

111
00:09:32,730 --> 00:09:40,260
We're going to run npm i to install all of the required node modules, and then you can use Nodemon to run

112
00:09:40,260 --> 00:09:44,340
the solution.js to see what it should look like.

113
00:09:44,340 --> 00:09:50,490
Here's our title, here's our HTML being rendered, here's our list, here's the number of current seconds,

114
00:09:50,490 --> 00:09:51,840
look at how it's even,

115
00:09:51,840 --> 00:09:53,040
so we're getting our list.

116
00:09:53,040 --> 00:09:56,280
But if I refresh again, I get an odd number of seconds,

117
00:09:56,280 --> 00:09:58,530
it says, "No items to display."

118
00:09:58,530 --> 00:10:02,730
And then my copyright comes from my footer file right here.

119
00:10:02,730 --> 00:10:11,370
And what you have to do is look through this index.ejs file and see how you can get all of these different

120
00:10:11,370 --> 00:10:13,800
parts completed one by one.

121
00:10:13,800 --> 00:10:16,350
So pause the video now and give that a go.

122
00:10:18,950 --> 00:10:21,050
All right, let's run through the solution together.

123
00:10:21,080 --> 00:10:29,420
First, I'm going to split my pane so that I can see the index.js side by side with the Index.ejs, so

124
00:10:29,420 --> 00:10:37,020
I can see all of the things that are being sent over as variables over to my index.e js file.

125
00:10:37,040 --> 00:10:43,010
So the first one I'm sending over is the title and I can replace it here, but more importantly, I

126
00:10:43,010 --> 00:10:44,870
want it to go into the h1.

127
00:10:44,900 --> 00:10:53,380
Let's go ahead and add the EJS tag, which is the one with an equal sign because it gives us an output value

128
00:10:53,390 --> 00:10:56,870
and I'm going to write, title, in here.

129
00:10:56,990 --> 00:10:58,550
So now let's hit Save.

130
00:10:58,550 --> 00:11:04,190
And before we go any further, let's go ahead and actually run this project.

131
00:11:04,190 --> 00:11:11,510
So making sure that you've installed all the node modules, then using Nodemon to run Index.js and then

132
00:11:11,510 --> 00:11:18,660
we can open it up inside Chrome and you can see that the title is now being placed in here because it

133
00:11:18,660 --> 00:11:20,370
says, "EJS Tags".

134
00:11:20,820 --> 00:11:26,760
Next one is the current second, which comes from this property called seconds.

135
00:11:26,760 --> 00:11:34,650
So again, let's go ahead and add our output EJS tag and put in the word seconds so that it matches this

136
00:11:34,650 --> 00:11:35,160
one.

137
00:11:35,460 --> 00:11:38,030
Let's hit, Save and Refresh.

138
00:11:38,040 --> 00:11:45,660
You can see that now the current second in the time is now being shown right here.

139
00:11:46,320 --> 00:11:49,770
Next one is to write some actual code.

140
00:11:49,770 --> 00:11:54,120
So we've got an if-statement that's currently just being rendered on our website.

141
00:11:54,120 --> 00:11:55,200
That's not what we want,

142
00:11:55,230 --> 00:12:04,080
we want this to be actual code so that if the number of seconds modulo two is equal to zero (seconds % 2 === 0), which

143
00:12:04,080 --> 00:12:10,710
means that it's currently an even number of seconds, then we're going to show an unordered list,

144
00:12:10,740 --> 00:12:17,280
otherwise, we're going to show this paragraph element. Here because this is JavaScript code that we want

145
00:12:17,280 --> 00:12:18,660
to be evaluated,

146
00:12:18,660 --> 00:12:20,940
but no output is needed,

147
00:12:20,940 --> 00:12:31,560
we use the EJS tag that is simply just a normal no-output EJS tag. Let's put that there and then enclose

148
00:12:31,560 --> 00:12:36,480
each line of our JavaScript inside those angle brackets.

149
00:12:36,930 --> 00:12:43,170
We've got an open and close here and then we've got an open and close here.

150
00:12:43,170 --> 00:12:50,280
So notice how every single part of the JavaScript, all of these curly braces need to be enclosed in

151
00:12:50,400 --> 00:12:54,910
EJS tags, but the parts which are simply just HTML do not.

152
00:12:54,930 --> 00:12:56,400
So now let's hit Save.

153
00:12:56,400 --> 00:12:58,170
Let's go over here, Refresh.

154
00:12:58,170 --> 00:13:02,610
You can see right now it's an even number of seconds we get nothing showing up.

155
00:13:02,610 --> 00:13:09,660
If I refresh until I get to an odd number of seconds, that paragraph element now shows up on screen

156
00:13:09,660 --> 00:13:10,710
right here.

157
00:13:11,040 --> 00:13:16,530
But if it's not, then I get this empty unordered list element.

158
00:13:16,950 --> 00:13:26,910
Now, the thing to remember with EJS is every single line of JavaScript needs its EJS tag open and closed.

159
00:13:26,910 --> 00:13:34,320
That means you can't just put this around the entire section of EJS and then hope somehow this is going

160
00:13:34,320 --> 00:13:36,060
to take into account all of it,

161
00:13:36,060 --> 00:13:42,510
because remember there are bits of HTML in here like the ul and the p, and it's also important to remember

162
00:13:42,510 --> 00:13:49,170
not to forget these little things like the curly braces at the end also need EJS tags around them.

163
00:13:49,170 --> 00:13:51,870
But once you get used to it, then it gets a little bit simpler.

164
00:13:52,470 --> 00:13:55,980
So now the list goes in here

165
00:13:55,980 --> 00:14:02,790
if the current second is even, otherwise it should display, "No items to display."

166
00:14:02,790 --> 00:14:07,440
We've sorted this part out, but we now need to display our list.

167
00:14:07,590 --> 00:14:08,780
How do we display our list?

168
00:14:08,790 --> 00:14:10,770
Well, we have list items, right?

169
00:14:10,770 --> 00:14:14,370
And we're sending over the items right here.

170
00:14:14,370 --> 00:14:15,720
Apple, banana, cherry.

171
00:14:15,720 --> 00:14:20,790
And so we can pick up the items in here by using a for loop.

172
00:14:20,790 --> 00:14:28,110
And we can either use the traditional for loop, which involves the let i = 0 and so on and

173
00:14:28,110 --> 00:14:28,560
so forth,

174
00:14:28,560 --> 00:14:30,690
or we could use a for each.

175
00:14:30,690 --> 00:14:39,750
So we could say we get this variable called items and then we use for each to loop through each of the

176
00:14:39,750 --> 00:14:45,060
items in the array which I'll call fruit, for each fruit,

177
00:14:45,540 --> 00:14:47,940
let's go ahead and do something.

178
00:14:47,940 --> 00:14:52,020
And that something is to render it inside an li.

179
00:14:52,350 --> 00:14:55,380
This is where that fruit should go into.

180
00:14:55,470 --> 00:15:02,490
Now of course this is JavaScript code, so it requires the opening and closing EJS tags, and similarly down

181
00:15:02,490 --> 00:15:03,510
here as well.

182
00:15:04,170 --> 00:15:08,850
Now, when I go ahead and run this code, what do you think will happen?

183
00:15:08,880 --> 00:15:12,450
Do you think we're going to get the names of the fruits or something else?

184
00:15:12,450 --> 00:15:13,830
So let's hit Save.

185
00:15:14,340 --> 00:15:17,100
Let's go over here and Refresh.

186
00:15:17,100 --> 00:15:18,150
You can see I'm just getting the

187
00:15:18,210 --> 00:15:22,920
word fruit being printed many times in my list item.

188
00:15:22,920 --> 00:15:23,880
Why is that?

189
00:15:23,910 --> 00:15:32,910
Well, you might have already realized I need the EJS tag that gives me an output for this to actually show

190
00:15:32,910 --> 00:15:33,720
up correctly.

191
00:15:33,720 --> 00:15:35,010
So let's hit Save.

192
00:15:35,590 --> 00:15:37,570
Let's go ahead and Refresh.

193
00:15:37,990 --> 00:15:43,300
And when we get an even number of seconds, we get apple banana cherry being rendered.

194
00:15:43,450 --> 00:15:51,190
If you used the for loop where you have the i = 0; i++, i to the limit, that's totally

195
00:15:51,190 --> 00:15:51,840
fine as well.

196
00:15:51,850 --> 00:15:56,860
I thought I'd just show you a different way of doing this because I demoed the other one in the slide

197
00:15:56,860 --> 00:16:00,250
deck already, which for loop you use is totally up to you.

198
00:16:00,250 --> 00:16:06,910
But the fact that you can get each of the fruits rendered in the list is how you pass this part of the

199
00:16:06,910 --> 00:16:07,780
challenge.

200
00:16:07,870 --> 00:16:14,530
So now finally we add a little bit of HTML content which comes over as HTML content.

201
00:16:14,530 --> 00:16:20,860
So remember the tag for this is angle bracket percentage sign minus sign (<%-).

202
00:16:21,190 --> 00:16:23,560
And this is output escaped.

203
00:16:23,560 --> 00:16:29,770
So it means that we can actually put in our HTML content in here and it will be interpreted as HTML.

204
00:16:29,770 --> 00:16:36,640
So this is some strong text and that's because it's got these "strong" tags around it.

205
00:16:36,650 --> 00:16:44,450
Whereas if we change this minus sign to equal sign, then we will get the full variable as a text string.

206
00:16:44,450 --> 00:16:46,490
So that's not what we want.

207
00:16:46,760 --> 00:16:53,330
Finally, we have our footer, which is in this file, footer.ejs, and in order to render it we need angle

208
00:16:53,330 --> 00:17:00,470
bracket percentage sign minus and then the keyword include and then we add the name of the file, which

209
00:17:00,470 --> 00:17:02,090
is footer.ejs.

210
00:17:02,120 --> 00:17:03,980
Now for future references,

211
00:17:03,980 --> 00:17:10,310
remember that this file has to also be in the views folder along with the file that you're writing.

212
00:17:10,310 --> 00:17:13,710
This included. Structured kind of like this.

213
00:17:13,730 --> 00:17:15,349
Now let's hit Save.

214
00:17:15,349 --> 00:17:17,599
Let's go and refresh our web page.

215
00:17:17,599 --> 00:17:21,829
You can see our footer is now being rendered in here.

216
00:17:22,069 --> 00:17:23,440
So there you have it.

217
00:17:23,450 --> 00:17:25,490
Did you manage to get the challenge correct?

218
00:17:25,490 --> 00:17:32,420
Did you have any problems? If you did, take a look inside the solution.ejs and see how you can fix your

219
00:17:32,420 --> 00:17:33,290
problems.

220
00:17:33,290 --> 00:17:39,080
In the next lesson, we're going to talk more about passing data from our server to the client side

221
00:17:39,080 --> 00:17:41,510
and client side to server using EJS.

222
00:17:41,510 --> 00:17:43,940
So for all of that and more, I'll see you there.

