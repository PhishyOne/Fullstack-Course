1
00:00:00,440 --> 00:00:01,220
Hey, guys.

2
00:00:01,220 --> 00:00:08,270
In today's lesson, we're going to be talking about Express Middlewares, the man in the middle that

3
00:00:08,270 --> 00:00:13,700
you're going to see in a lot of node and express based applications.

4
00:00:14,150 --> 00:00:16,790
What exactly is a middleware?

5
00:00:16,790 --> 00:00:24,500
Well, it kind of is something that just sits in between the raw requests that come in.

6
00:00:24,500 --> 00:00:34,850
So when a request comes into the server and before it gets processed by all of the route handlers,

7
00:00:34,850 --> 00:00:42,320
such as our GET, POST, PUT, the functions that we've planned for how to deal with a particular request, there

8
00:00:42,320 --> 00:00:51,350
is something in between, namely the Middleware that can work with these requests before they get processed

9
00:00:51,350 --> 00:00:54,890
and reach their final destinations.

10
00:00:55,250 --> 00:00:58,790
Now, what kind of things can middleware do?

11
00:00:58,820 --> 00:01:02,880
Well, one option is to pre-process the requests.

12
00:01:02,880 --> 00:01:11,670
So when we know that a request is going to go to multiple handlers, maybe it could be processed by

13
00:01:11,670 --> 00:01:14,400
GET, POST or PUT requests,

14
00:01:14,430 --> 00:01:22,770
t his intermediate stage where we have our middleware can actually go ahead and change aspects of the

15
00:01:22,770 --> 00:01:29,790
request or perform various functions on that request before it goes to its final routing.

16
00:01:30,120 --> 00:01:34,590
Also, we can use middleware for Logging the requests.

17
00:01:34,590 --> 00:01:37,950
So how long does it take the request to come through?

18
00:01:37,980 --> 00:01:41,250
What type of request GET, PUT, POST, etcetera?

19
00:01:41,250 --> 00:01:44,940
What is the status of the request being handled?

20
00:01:44,970 --> 00:01:47,730
We can also use middleware for Authentication.

21
00:01:47,730 --> 00:01:54,690
So before we let the request through to our back-end handlers, we can see if that request is actually

22
00:01:54,690 --> 00:02:01,310
came from a client that is authorized to make that request, say, if somebody wants to go and change

23
00:02:01,310 --> 00:02:07,880
Facebook's databases to call it Handbook instead of Facebook, we have to make sure that that request

24
00:02:07,880 --> 00:02:10,639
is allowed by that user.

25
00:02:10,789 --> 00:02:14,420
And then finally, we can also process any errors in the requests.

26
00:02:14,420 --> 00:02:21,380
We can identify them and handle those errors before they go through to the handlers as well.

27
00:02:21,380 --> 00:02:29,360
So a number of functions can be performed basically before we allow the request through. A really commonly

28
00:02:29,360 --> 00:02:33,050
used middleware in Node and Express

29
00:02:33,050 --> 00:02:37,010
back-end engineering is something called Body Parser.

30
00:02:37,280 --> 00:02:41,920
Body Parser is, as it says, a body parsing middleware.

31
00:02:41,930 --> 00:02:42,770
What does that mean?

32
00:02:42,770 --> 00:02:50,000
Well, it can look at the request bodies before your handlers actually access them.

33
00:02:50,150 --> 00:02:55,160
This basically gives our request a new property called the body property.

34
00:02:55,160 --> 00:03:00,000
And very commonly this is used to handle form data.

35
00:03:00,000 --> 00:03:08,040
When you create a HTML form, such as when you have a login form and you want the user to put in their username

36
00:03:08,040 --> 00:03:15,390
and password, when you press that login button in order to get access to the data that was inputted

37
00:03:15,390 --> 00:03:22,350
in there, you might use something like body-parser to parse the body of that POST request.

38
00:03:23,160 --> 00:03:26,100
Here's a real life example using code.

39
00:03:26,130 --> 00:03:29,370
This is what a HTML form element looks like.

40
00:03:29,370 --> 00:03:37,050
It starts with a form tag, closes with a form tag, and the properties that you usually see are "action",

41
00:03:37,050 --> 00:03:44,750
which in most cases will refer to the route that you want your server to handle this request.

42
00:03:44,760 --> 00:03:51,540
And also you'll have a "method" which usually will describe how you want this data to be processed in

43
00:03:51,540 --> 00:03:52,140
your back-end.

44
00:03:52,170 --> 00:03:59,580
Is this a form for updating information on your server, or posting information, or deleting information?

45
00:03:59,580 --> 00:04:00,900
It could be a number of things,

46
00:04:00,900 --> 00:04:07,320
basically. The other parts of the form that you normally see is the "label" and "input" elements.

47
00:04:07,350 --> 00:04:13,860
The label is simply the place where we label the next input because an input is usually just a box.

48
00:04:13,860 --> 00:04:16,860
It doesn't really tell the user what you expect to go in there.

49
00:04:16,860 --> 00:04:22,050
So normally it's a pair where you have a label element followed by an input element.

50
00:04:22,260 --> 00:04:27,390
Now the input element usually has two properties that you'll see, "type",

51
00:04:27,390 --> 00:04:29,370
so what kind of input is this?

52
00:04:29,370 --> 00:04:36,270
And you can have things such as radio buttons, you can have things such as checkbox input, you can

53
00:04:36,270 --> 00:04:38,940
have a dropdown list inputs,

54
00:04:38,940 --> 00:04:43,560
but the most common one and the simplest is just a text field.

55
00:04:43,650 --> 00:04:51,390
And then we have something called "name", which is going to label the data that goes into this input.

56
00:04:51,390 --> 00:04:58,470
So if I put in something like my email, blah blah blah@blah blah blah, then that piece of data

57
00:04:58,470 --> 00:04:59,940
will have a key

58
00:05:00,100 --> 00:05:00,940
associated.

59
00:05:00,940 --> 00:05:02,230
So a key / value pair.

60
00:05:02,230 --> 00:05:06,490
And the key will be whatever it is you assign the name property to be.

61
00:05:06,700 --> 00:05:12,550
We can also add the "required" attribute, which means that this input cannot be submitted until there

62
00:05:12,550 --> 00:05:15,390
is a piece of data that's added into it.

63
00:05:15,400 --> 00:05:22,390
And finally, we have a type of input that is a "submit" type, which actually is a button, and you can

64
00:05:22,390 --> 00:05:23,920
tell what the button should say.

65
00:05:23,920 --> 00:05:29,830
It could say, okay, it could say submit in this case, but whatever it is you want the button to say,

66
00:05:29,830 --> 00:05:31,990
you would add it to the "value" attribute.

67
00:05:32,290 --> 00:05:38,230
If this HTML was displayed in a browser, then this is what you would see.

68
00:05:38,260 --> 00:05:42,550
This part is the first label in this form.

69
00:05:42,910 --> 00:05:46,810
This part is the first text input.

70
00:05:46,960 --> 00:05:54,490
This is the next label, and this is the next input.

71
00:05:54,640 --> 00:06:01,760
These are all text inputs and they will expect a value in there.

72
00:06:01,760 --> 00:06:10,040
And then finally we have our submit button, which is also an input, but it has the value of submit,

73
00:06:10,040 --> 00:06:12,650
which is what we assigned over here.

74
00:06:12,650 --> 00:06:17,600
So HTML forms are pretty simple and you'll get used to this format pretty soon.

75
00:06:17,600 --> 00:06:23,990
But the important thing is how do we incorporate this form into our backend?

76
00:06:23,990 --> 00:06:30,680
So I want you to go ahead and download the exercise 3.4 Middleware.zip from this current lesson,

77
00:06:30,680 --> 00:06:37,010
so in the course resources for this lesson. And then once you've downloaded and extracted it, you

78
00:06:37,010 --> 00:06:41,540
will see that it has a bunch of files already in there.

79
00:06:41,720 --> 00:06:49,520
As always, the first thing we're going to do is to cd over into this new folder and then run npm install

80
00:06:49,520 --> 00:06:54,920
so that everything that's inside the package.json or the dependencies gets installed.

81
00:06:54,950 --> 00:06:58,880
Now notice the difference in this particular project.

82
00:06:58,880 --> 00:07:05,180
I've actually got a public folder and the public folder usually is the place where we put our static

83
00:07:05,180 --> 00:07:13,580
files such as our HTML files, CSS files, images, things that don't really change and don't need to

84
00:07:13,580 --> 00:07:14,990
be acted upon.

85
00:07:15,230 --> 00:07:23,360
What we're going to do is we're going to try and render this index.html as the thing that we're going

86
00:07:23,360 --> 00:07:26,150
to return from our server.

87
00:07:26,270 --> 00:07:33,350
Previously, you've seen res.send, but in this case, I'm actually using a different express method which

88
00:07:33,350 --> 00:07:36,170
is called res.sendFile.

89
00:07:36,260 --> 00:07:44,180
Now res.sendFile requires an exact path in order to know which file to send back.

90
00:07:44,180 --> 00:07:50,180
Now of course, the file that we want to send back over to the client is our index.html.

91
00:07:50,690 --> 00:07:57,980
In order to get the full path of that particular file, we need to do a little bit more.

92
00:07:58,520 --> 00:08:05,690
When your server is hosted on a cloud computer, when it's no longer locally hosted, as is the case

93
00:08:05,690 --> 00:08:13,040
for most servers, then in order to figure out this directory name where the file lives in, it takes

94
00:08:13,040 --> 00:08:14,360
a little bit of work.

95
00:08:14,360 --> 00:08:18,350
And these are the lines of code that are required for this.

96
00:08:18,350 --> 00:08:23,870
So firstly, we're going to import something called dirname directory name from the "path" module that's

97
00:08:23,870 --> 00:08:30,260
bundled with Node, and then we're going to do a little bit of conversion in order to eventually end

98
00:08:30,260 --> 00:08:36,919
up with this constant called directory name, which basically is all of the path up until the path that

99
00:08:36,919 --> 00:08:38,150
we want to access.

100
00:08:38,179 --> 00:08:47,300
In my case, it could be my Mac, and then it would be my username, and then it would be the Web Development

101
00:08:47,300 --> 00:08:49,760
folder and so on and so forth.

102
00:08:49,760 --> 00:08:56,120
And it's going to be able to figure all of that out just by using these three lines of code.

103
00:08:56,120 --> 00:09:00,320
And this also means that you don't have to type out the exact path, right?

104
00:09:00,350 --> 00:09:06,440
Because when it is true for local development, such as the path at the moment, once we've actually

105
00:09:06,440 --> 00:09:12,950
put our server up into the cloud and host it somewhere, then that's no longer going to be the file

106
00:09:12,950 --> 00:09:13,370
path.

107
00:09:13,370 --> 00:09:18,560
So we need to figure it out dynamically and this is probably one of the best ways to do it using Node

108
00:09:18,560 --> 00:09:22,970
and Express. If I go ahead and console log this,

109
00:09:25,040 --> 00:09:28,680
directory name, plus the location of my file,

110
00:09:28,700 --> 00:09:36,080
you'll see that if we go ahead and use nodemon and then run index1.js,

111
00:09:36,110 --> 00:09:43,700
you can see that if I hit up the GET route, so I'm just going to use Postman to do that, to hit up localhost:

112
00:09:43,700 --> 00:09:44,690
3000.

113
00:09:44,720 --> 00:09:46,660
You can see it's going into

114
00:09:46,700 --> 00:09:54,470
Users/angelayu/ Web Development Projects, but this entire directory path was generated using these three lines of code and

115
00:09:54,470 --> 00:10:00,260
your path will of course be different depending on whether if you're on Windows or Linux or Mac.

116
00:10:00,260 --> 00:10:09,230
And once your project is hosted somewhere online, then that will be relative to the computer that it's

117
00:10:09,230 --> 00:10:10,160
hosted on.

118
00:10:10,340 --> 00:10:17,060
Now that we've seen that, let's go ahead and delete this and let's test this out to see if we can actually

119
00:10:17,090 --> 00:10:24,480
see that index.html page being sent over when we make a GET request to the home page. In order to do

120
00:10:24,480 --> 00:10:30,240
that, let's make sure first that our server is up and running, which it is, "Listening on port 3000".

121
00:10:30,480 --> 00:10:40,800
And then let's go ahead to our localhost:3000 and you can see that this HTML page is coming from over

122
00:10:40,800 --> 00:10:41,580
here,

123
00:10:41,610 --> 00:10:43,470
h1 Band Name Generator.

124
00:10:43,500 --> 00:10:48,390
There's a form with a label for street name, a label for pet name,

125
00:10:48,390 --> 00:10:52,170
and this is basically the exercise that we're going to compete by the end of this lesson.

126
00:10:52,170 --> 00:11:00,450
But you can see that in this case, I'm not just sending over a little bit of HTML when I do the res.send,

127
00:11:00,480 --> 00:11:05,160
instead, I'm sending over an entire file that I've linked to.

128
00:11:05,640 --> 00:11:11,490
So now that we've figured out the first part, let's go ahead into the main topic of today's lesson,

129
00:11:11,490 --> 00:11:14,560
which is how to use middleware, right?

130
00:11:14,580 --> 00:11:19,470
And the middleware that I want you to use, which is something that you will use again and again and

131
00:11:19,470 --> 00:11:21,720
again, is called Body Parser.

132
00:11:21,750 --> 00:11:27,750
We're going to go ahead and install body-parser and then we're going to use body-parser in order to

133
00:11:27,750 --> 00:11:34,500
parse the information that's coming in through the form on our website.

134
00:11:34,500 --> 00:11:43,440
So remember, this is our index.html page and when this "submit" button is pressed, what's going to happen

135
00:11:43,440 --> 00:11:50,460
is that form is going to make that POST request to the path that we specified, which is

136
00:11:50,460 --> 00:11:51,420
/submit.

137
00:11:51,420 --> 00:11:59,280
So what we need to do is to have a route handler that is able to handle a POST request to that particular

138
00:11:59,280 --> 00:11:59,940
path.

139
00:11:59,940 --> 00:12:06,450
And then we're going to use body-parser, which we're going to install very soon, and then we're going

140
00:12:06,450 --> 00:12:14,190
to use it as a piece of middleware in order to parse the information that comes in from the form.

141
00:12:14,190 --> 00:12:16,560
So from this HTML form.

142
00:12:16,560 --> 00:12:22,800
And then we're going to add that data to the request object so that we can actually console log it under

143
00:12:22,800 --> 00:12:24,660
req.body.

144
00:12:25,500 --> 00:12:30,330
This is the goal and this is the code that's required to do it.

145
00:12:30,450 --> 00:12:37,890
If you look inside the index1.js file, that is basically our starting point for adding this

146
00:12:37,890 --> 00:12:39,420
body-parser middleware.

147
00:12:39,660 --> 00:12:43,500
I want you to go ahead and use the code that you see here.

148
00:12:43,500 --> 00:12:50,550
So pause this video at this point and I want you to implement this code so that it actually works live

149
00:12:50,550 --> 00:12:51,450
on your end.

150
00:12:51,450 --> 00:12:58,770
So you should be able to go to localhost and type something into the street and pet fields and hit submit

151
00:12:58,770 --> 00:13:02,430
and then see what you typed into the form in your console log.

152
00:13:02,760 --> 00:13:04,950
Pause the video and give this a go.

153
00:13:07,930 --> 00:13:10,200
All right, so let's run through this together.

154
00:13:10,210 --> 00:13:15,580
So firstly, making sure that we're inside index1.js because there are many sub-parts to this

155
00:13:15,580 --> 00:13:16,750
coding exercise

156
00:13:16,750 --> 00:13:25,600
in this lesson. We're going to go ahead and stop our server to npm install the body-parser module.

157
00:13:25,960 --> 00:13:31,900
Now this is just so that you know where that body-parser comes from because of course if you look inside

158
00:13:31,900 --> 00:13:38,020
the package.json, I've actually already got it set as a dependency, but when you're creating this

159
00:13:38,020 --> 00:13:41,560
from scratch, you will need to install the body-parser module.

160
00:13:41,800 --> 00:13:49,840
Once we've done that, let's go ahead and import body-parser into our index1.js. So now we can

161
00:13:49,840 --> 00:13:57,040
use it and we're going to add this as a middleware by using the use method.

162
00:13:57,370 --> 00:14:01,570
This method gets called before any of the route handlers.

163
00:14:01,840 --> 00:14:08,000
Once we've got the use method, then we can add in our middleware function, which in our case is called

164
00:14:08,000 --> 00:14:09,110
body-parser.

165
00:14:09,260 --> 00:14:15,920
Now in order to use body-parser, we need to tell it what kind of data we want to parse.

166
00:14:15,920 --> 00:14:23,330
And in our case, because we're dealing with a HTML form, we want to choose the URL encoded method.

167
00:14:23,570 --> 00:14:24,740
Inside here,

168
00:14:24,740 --> 00:14:31,580
there is one obligatory option that we have to set, which is this option called "extended", and you

169
00:14:31,580 --> 00:14:34,730
can set that as true or you can set that as false,

170
00:14:34,730 --> 00:14:41,060
and it basically just determines what is being used behind the scenes to parse the data that's coming

171
00:14:41,060 --> 00:14:41,510
in.

172
00:14:41,510 --> 00:14:46,790
And in pretty much 100% of the times, this is a line of code that you're going to write.

173
00:14:46,790 --> 00:14:53,060
And once you've done that, then we get an extra power using this middleware in the sense that every

174
00:14:53,060 --> 00:14:56,540
single request object now has a body.

175
00:14:56,570 --> 00:15:01,820
Whereas before, without this, if you try to tap into req.body, you'll get undefined.

176
00:15:01,850 --> 00:15:03,080
There's just nothing there.

177
00:15:03,080 --> 00:15:09,380
But now with this body-parser parsing information coming in, we can in fact access it.

178
00:15:09,560 --> 00:15:15,290
Now the place we want to access it is not going to be in the GET because the GET handler is just meant

179
00:15:15,290 --> 00:15:18,320
to send back a resource that the user wants.

180
00:15:18,350 --> 00:15:22,070
It's not meant to really deal with things coming in.

181
00:15:22,070 --> 00:15:30,260
So instead we're going to create an app.post() method and we're going to hit up the route that the

182
00:15:30,260 --> 00:15:35,660
form is going to send and act on, which is /submit.

183
00:15:35,660 --> 00:15:43,040
So let's make sure that those two bits match in terms of capitalizing and also the whole spelling and

184
00:15:43,040 --> 00:15:43,820
everything.

185
00:15:44,030 --> 00:15:52,640
And then next we've got our request, response (req, res) and then our anonymous function, and we're going to go ahead

186
00:15:52,640 --> 00:15:57,430
and console log the req.body object.

187
00:15:57,440 --> 00:16:06,290
So now that we have req.body, we can send something to our server and see what information

188
00:16:06,290 --> 00:16:06,830
we get.

189
00:16:06,830 --> 00:16:17,330
So I'm going to use Nodemon and hit up our index1.js, and now we can go into Postman and go into

190
00:16:17,330 --> 00:16:25,940
the localhost:3000/submit as our route. Making sure it's selected as POST and then under

191
00:16:25,940 --> 00:16:30,020
this tab called body, this is where we can simulate a form.

192
00:16:30,020 --> 00:16:37,580
So make sure the x-www-form-urlencoded option is selected because that's what we are handling.

193
00:16:37,580 --> 00:16:44,360
And then go ahead and add in some pieces of data and you can add whichever key value pairs you want.

194
00:16:44,480 --> 00:16:52,430
Once I go ahead and hit Send, you'll see that console log being enacted upon because we hit up the

195
00:16:52,430 --> 00:16:57,740
POST route and I'm getting those key / value pairs being printed in here.

196
00:16:57,740 --> 00:17:04,339
Now, if I go ahead and stop using body-parser as my middleware and I try that again, then you can

197
00:17:04,339 --> 00:17:06,050
see that I'm getting undefined.

198
00:17:06,079 --> 00:17:08,710
There is no body to my request.

199
00:17:08,720 --> 00:17:10,819
So let's enable that once more.

200
00:17:10,819 --> 00:17:16,430
And this time we're going to hit up the POST request from our HTML form here.

201
00:17:16,910 --> 00:17:23,240
Our Band Name Generator is a very simple website that takes the street name that you grew up on, which

202
00:17:23,270 --> 00:17:32,090
in my case was Aberdeen Road, and then your pet name, which in my case was a rabbit that I very creatively

203
00:17:32,090 --> 00:17:33,170
called rabbit.

204
00:17:33,890 --> 00:17:42,140
And then once I hit submit, it's actually going to make that request, which is the POST request to

205
00:17:42,140 --> 00:17:44,480
the route that's /submit.

206
00:17:44,480 --> 00:17:51,920
And when we take a look down here, you can see it has encoded this first part, which corresponds to

207
00:17:51,920 --> 00:17:54,500
the name of that input.

208
00:17:54,500 --> 00:18:02,540
And the second part is the value that was placed inside that input, which I wrote as "Aberdeen".

209
00:18:03,870 --> 00:18:07,440
And it's the same for the next input as well.

210
00:18:07,710 --> 00:18:12,780
That's the superpower that we managed to gain using the body-parser middleware.

211
00:18:13,140 --> 00:18:18,600
In the next lesson, we'll learn to use another popular middleware package as well as learn how to write

212
00:18:18,630 --> 00:18:22,150
our own custom middleware with Express.js.

213
00:18:22,170 --> 00:18:25,530
So for all of that and more, I'll see you on the next lesson.

