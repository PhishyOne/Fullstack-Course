1
00:00:00,500 --> 00:00:07,880
Hey, guys, in this lesson, we're going to be building our very own express server using Express and

2
00:00:07,880 --> 00:00:08,930
Node.js.

3
00:00:09,080 --> 00:00:16,250
If you need a little bit of reminding what the backend is, again, remember that we said the server

4
00:00:16,250 --> 00:00:26,510
is just simply any computer and in most cases a server is a big and powerful computer that's on 24/7

5
00:00:26,510 --> 00:00:34,220
and it's always listening for any requests, looking for a particular resource, like an HTML

6
00:00:34,220 --> 00:00:38,690
file of a website, or the CSS or the JavaScript, etcetera.

7
00:00:38,840 --> 00:00:47,000
Now, in addition to the server, the back end also consists of an application that is written using

8
00:00:47,000 --> 00:00:52,550
some sort of code, and that application is running on the server computer.

9
00:00:52,580 --> 00:00:58,790
This could just be an index.js file that is on this server computer.

10
00:00:58,970 --> 00:01:05,489
In addition, usually the backend also has a database, but this is usually in the case where you have

11
00:01:05,489 --> 00:01:12,960
a more complex backend, a more complex website where you have maybe user data or company data, etcetera.

12
00:01:12,960 --> 00:01:21,240
But a very simple backend can just consist of an application running on a server computer.

13
00:01:21,690 --> 00:01:29,790
All of these things together are what we would usually think of when we think of a website back end.

14
00:01:29,970 --> 00:01:36,870
Now when a client, which in most cases will just be a particular user trying to access your website,

15
00:01:36,900 --> 00:01:45,750
they'll go via the internet to reach your server computer and they're going to make the request for

16
00:01:45,750 --> 00:01:48,060
the website they're interested in looking at.

17
00:01:48,090 --> 00:01:51,900
Let's say they type in google.com,

18
00:01:51,920 --> 00:01:58,890
then this request goes through the internet to Google's servers somewhere in the world

19
00:01:58,890 --> 00:02:06,360
and on this server computer, there is an application that's running listening for this particular request.

20
00:02:06,360 --> 00:02:10,830
And once it finds it, it's going to send back that home page,

21
00:02:10,830 --> 00:02:16,710
maybe in this case it could be an index.html, or it could have the CSS, or the JavaScript,

22
00:02:16,710 --> 00:02:22,890
but all of this goes back over to the client and that is what our server is trying to do.

23
00:02:23,040 --> 00:02:31,830
Now, in most cases, you'll hear people refer to the Client-Side as the front-end facing side.

24
00:02:31,830 --> 00:02:38,130
So this is the side which your user is going to access and interact with your website.

25
00:02:38,130 --> 00:02:42,480
But in addition, you'll also hear this term called the Server-Side.

26
00:02:42,480 --> 00:02:46,890
And the server-side refers to everything that's on our back-end.

27
00:02:46,890 --> 00:02:54,090
And sometimes you'll hear people referring to all of this instead of the backend, as the server.

28
00:02:54,510 --> 00:02:57,660
This is what we're going to try and build today.

29
00:02:57,660 --> 00:03:01,830
We're going to try and build our server using Express.js.

30
00:03:02,010 --> 00:03:09,570
Now what that means is that we're going to be creating an application in JavaScript using Express and

31
00:03:09,570 --> 00:03:10,380
Node.

32
00:03:10,650 --> 00:03:16,860
Now Express is the one that's going to use Node so we don't have to explicitly interact with the cumbersome

33
00:03:16,860 --> 00:03:23,160
code that is inside Node, and we're going to use our local computer as the server.

34
00:03:23,160 --> 00:03:30,330
So as I mentioned, servers are usually 24/7, but in this case, our computer is just on for

35
00:03:30,330 --> 00:03:37,140
the time being when we want to test and when we want to make the request to the server side to retrieve

36
00:03:37,140 --> 00:03:43,320
any website data. So it doesn't actually have to be 24/7, but it just has to be there listening

37
00:03:43,320 --> 00:03:45,420
for any requests when it comes through.

38
00:03:45,930 --> 00:03:49,230
There are six steps to creating an Express Server.

39
00:03:49,620 --> 00:03:54,990
First, we have to create a directory, so a folder where we're going to have all our project files.

40
00:03:54,990 --> 00:04:00,630
In that folder, we're going to create a JavaScript file, the Index.js, and then we're going to initialize

41
00:04:00,660 --> 00:04:07,980
NPM to be able to install the Express package into this directory that we created in step one

42
00:04:07,980 --> 00:04:15,630
and then we'll be able to use the Express package to write an application using JavaScript inside our

43
00:04:15,630 --> 00:04:16,920
index.js.

44
00:04:16,950 --> 00:04:25,080
Finally, we can start our server and see what happens when we try to send a request to our server.

45
00:04:25,380 --> 00:04:32,550
Let's go through these steps together step by step and create our first Express Server.

46
00:04:33,520 --> 00:04:37,450
Step one is to create a new directory for our project.

47
00:04:37,570 --> 00:04:43,130
I want you to open up VS Code and if you got your Web Development Project folder up, then that's great,

48
00:04:43,150 --> 00:04:50,710
if not, go ahead and open it up by going to File, Open folder, and then find your Web Development Project

49
00:04:50,710 --> 00:04:52,330
folder to open up.

50
00:04:52,780 --> 00:04:56,050
Now, once you're there, you can create your new directory.

51
00:04:56,080 --> 00:05:02,890
Now, in my case, I've got a Backend folder for everything that we've created so far in the Backend

52
00:05:02,920 --> 00:05:03,460
Section.

53
00:05:03,460 --> 00:05:07,510
So using Node, native modules in Node, NPM, etcetera.

54
00:05:07,510 --> 00:05:12,750
And I want to create my Express Server project inside this folder.

55
00:05:12,760 --> 00:05:15,430
So what I'm going to do is I'm going to go to the terminal,

56
00:05:15,430 --> 00:05:19,360
remember, you can go to that by going to View, Terminal,

57
00:05:19,420 --> 00:05:24,700
and then in the terminal, we're going to use the cd command in order to change directory.

58
00:05:24,730 --> 00:05:30,610
Now, if you skipped the command line module in this course and you don't know what I'm talking about

59
00:05:30,610 --> 00:05:37,400
at all when I say cd or mkdir, then it's really important that you go back and actually take those

60
00:05:37,400 --> 00:05:42,710
lessons, because in the coming lessons we're going to be leaning heavily on the terminal and we're

61
00:05:42,710 --> 00:05:47,960
going to be using all these commands, and I'm not going to explain through them each time because I'll

62
00:05:47,960 --> 00:05:51,050
assume that you have taken those lessons.

63
00:05:51,140 --> 00:05:54,800
So we're going to cd into the Backend folder.

64
00:05:54,800 --> 00:05:58,610
So we're going to drag this Backend folder over here, hit Enter,

65
00:05:58,610 --> 00:06:01,600
and now our location is set as the Backend.

66
00:06:01,610 --> 00:06:07,460
So inside this folder is where we're going to create our new project directory.

67
00:06:07,460 --> 00:06:17,420
So we're going to use the mkdir command and we're going to write, "3.1 Express Server".

68
00:06:17,750 --> 00:06:23,990
Now with the command line, it really doesn't like having gaps in between words because it sees each

69
00:06:23,990 --> 00:06:26,090
of them as a separate command,

70
00:06:26,090 --> 00:06:34,330
so in order to fix this, we're going to go and add some double quotes around the name of our new directory.

71
00:06:34,330 --> 00:06:40,180
And now when I hit Enter, you'll see that brand new directory gets created right here.

72
00:06:40,720 --> 00:06:44,800
Now, we have to cd into that particular directory.

73
00:06:44,800 --> 00:06:50,770
So I'm going to write 3 and hit the Tab key and hopefully, it will enter everything else for me.

74
00:06:50,770 --> 00:06:56,320
And just to check, make sure that on your final line you actually see the name of your directory to

75
00:06:56,320 --> 00:06:58,480
know that you're inside the right location.

76
00:06:58,480 --> 00:07:03,220
And here is where we're going to continue in our steps.

77
00:07:03,250 --> 00:07:05,830
We've created our directory.

78
00:07:05,860 --> 00:07:09,100
Now we need to create our index.js file.

79
00:07:10,020 --> 00:07:17,430
We create new files using the touch keyword and we're going to write, "touch index.js", making sure that

80
00:07:17,430 --> 00:07:21,000
we're creating that file in the right location and then hit Enter.

81
00:07:21,000 --> 00:07:26,130
And now if we expand this folder, you should see our brand new Index.js file.

82
00:07:27,600 --> 00:07:29,280
Step one, step two complete.

83
00:07:29,310 --> 00:07:33,990
Now we need to initialize NPM and install the Express package.

84
00:07:34,710 --> 00:07:39,990
Now remember that whenever we tackle a new technology, you can always find information about it by

85
00:07:39,990 --> 00:07:42,390
searching for its documentation.

86
00:07:42,390 --> 00:07:46,530
And the Express documentation is that expressjs.com,

87
00:07:46,530 --> 00:07:52,800
and here under the Getting started, Installing Section, you'll see that they've already completed some

88
00:07:52,800 --> 00:07:58,410
of the steps that we want to do, which is to create the directory and figure out the location where

89
00:07:58,410 --> 00:08:00,870
you want to create your Express files,

90
00:08:00,870 --> 00:08:06,090
and then we're going to continue by initializing NPM and installing Express.

91
00:08:07,240 --> 00:08:13,900
We're going to use "npm init" and then we're going to use the "-y" flag so that we don't actually have

92
00:08:13,900 --> 00:08:19,480
to go step by step and add each of these things like the name and the version, etcetera.

93
00:08:19,690 --> 00:08:25,710
The thing that's quite important though is that the main is set as index.js.

94
00:08:25,720 --> 00:08:32,590
So if you name this file, something else like app.js or your name.js or whatever, that's not going

95
00:08:32,590 --> 00:08:38,200
to work because the NPM is set to look for a file called index.js.

96
00:08:38,200 --> 00:08:45,850
So make sure you have that file created in your directory and that your package.json and your index.js

97
00:08:45,880 --> 00:08:51,730
are all inside the correct folder, which is your Express Server project that you just created.

98
00:08:51,820 --> 00:08:55,900
So now we're going to install the Express package.

99
00:08:55,900 --> 00:08:57,100
So that's "npm

100
00:08:57,100 --> 00:09:02,010
i" short for install and then it's "express" with two s's.

101
00:09:02,020 --> 00:09:05,320
Make sure you don't make any typos and then hit Enter.

102
00:09:06,840 --> 00:09:13,620
Now, once that's done, it should have installed some packages and created this node_modules folder.

103
00:09:13,770 --> 00:09:19,110
Inside the node_modules, there are a whole bunch of dependencies which is required for us to be able

104
00:09:19,110 --> 00:09:26,640
to use express and if we check inside our package.json, not the package-lock but the package.json,

105
00:09:26,640 --> 00:09:31,050
you can see the express as a dependency.

106
00:09:31,080 --> 00:09:36,750
Now don't worry if your number doesn't match mine, you're in the future and I'm recording in the past.

107
00:09:36,750 --> 00:09:41,700
So this version might be 4.19, 5.1, etcetera.

108
00:09:41,700 --> 00:09:42,510
It doesn't matter.

109
00:09:42,510 --> 00:09:43,980
It's all going to work the same.

110
00:09:44,220 --> 00:09:50,910
The other thing we have to do is we're going to upgrade our project to change the type of project to

111
00:09:50,910 --> 00:09:54,270
use the ES6 latest syntax.

112
00:09:54,270 --> 00:09:57,210
So we're going to add this line ("type": "module") as usual.

113
00:09:57,210 --> 00:10:05,310
Now let's hit Save and let's go back to our Index.js where we're going to write our server application.

114
00:10:06,420 --> 00:10:11,100
Now the code looks something like this, and it's pretty simple.

115
00:10:11,100 --> 00:10:16,740
It's just a few lines to create our first server and I want to talk you through each of them.

116
00:10:16,740 --> 00:10:19,350
So this first line is very simple.

117
00:10:19,350 --> 00:10:25,200
We're using module based JavaScript, the latest version JavaScript, so we can import express from

118
00:10:25,230 --> 00:10:28,380
that express module that we installed just now.

119
00:10:28,500 --> 00:10:34,590
And then the next line we're going to create an app using this express object.

120
00:10:35,190 --> 00:10:41,790
And then once we've created the app, there's a method on that app called "listen", and we get to specify

121
00:10:41,790 --> 00:10:42,870
two things.

122
00:10:42,870 --> 00:10:51,450
The first part is the port, and the port is the location of our server where we're going to be listening

123
00:10:51,450 --> 00:10:53,610
for requests from the client-side.

124
00:10:53,790 --> 00:10:57,780
Now the second part here is the callback.

125
00:10:57,810 --> 00:11:04,230
This is the callback function that is going to be triggered when our server is set up.

126
00:11:04,230 --> 00:11:11,290
So as soon as our app is listening on Port 3000 and everything is done, then it's going to trigger

127
00:11:11,290 --> 00:11:12,670
this callback function.

128
00:11:12,670 --> 00:11:16,960
And in the callback function all we want to do is to console log,

129
00:11:17,050 --> 00:11:21,880
our server is running, and tell ourselves or remind ourselves where it is running.

130
00:11:21,880 --> 00:11:23,410
So Port 3000.

131
00:11:24,160 --> 00:11:27,550
Let's write our code in our index.js right now.

132
00:11:27,550 --> 00:11:36,130
So let's import express with a lowercase E from the express module that we just created,

133
00:11:36,250 --> 00:11:43,150
and then we're going to create a new constant called app that is going to be created from express.

134
00:11:43,300 --> 00:11:51,310
Now, once we've got hold of our app, we can use the listen method and specify firstly the port and

135
00:11:51,310 --> 00:11:57,910
then secondly, the callback for what should happen when our server is ready to go.

136
00:11:57,940 --> 00:12:04,150
We're going to put in an anonymous function in here as our callback and all we want to do is just

137
00:12:04,150 --> 00:12:11,200
console.log("Server running on port 3000.")

138
00:12:11,940 --> 00:12:20,520
Now, we can specify the port like this where we say the port should be 3000 and we hard code it into app.listen(),

139
00:12:20,520 --> 00:12:26,190
but another format, which is the one that I prefer, is to actually create a constant at the very top

140
00:12:26,190 --> 00:12:35,040
level and specify that port as 3000 and then use this constant in all the places where we need it.

141
00:12:35,040 --> 00:12:44,220
So let me just change this to a backtick so that I can insert that port variable inside here.

142
00:12:46,360 --> 00:12:47,140
There we go.

143
00:12:47,140 --> 00:12:56,410
So the code is pretty simple and all we're doing right now is we're setting up a server using Express,

144
00:12:56,410 --> 00:13:02,410
and that server is going to listen on our port, which is 3000.

145
00:13:02,410 --> 00:13:08,800
And once the server is set up, we'll notify ourselves in the console that it is running.

146
00:13:09,100 --> 00:13:15,620
Now all we have left to do is to actually go ahead and start our server.

147
00:13:15,640 --> 00:13:23,340
We've completed all five steps and in order to start our server, we're going to use the node command

148
00:13:23,350 --> 00:13:26,590
in order to run our index.js.

149
00:13:26,620 --> 00:13:33,520
You've seen us do this many, many times and we are in fact creating a node server even though we don't

150
00:13:33,520 --> 00:13:36,280
see Node anywhere in our index.js,

151
00:13:36,310 --> 00:13:42,760
that's because Express is dealing with all the heavy-lifting and simplifying things for us so that our

152
00:13:42,760 --> 00:13:44,800
code is clean and easy to read.

153
00:13:45,790 --> 00:13:52,300
In our terminal, let's go ahead and type the node command and then the name of our file.

154
00:13:52,300 --> 00:13:58,600
As usual, I always use Tab just to check that I'm in the right location and then once we hit Enter,

155
00:13:58,600 --> 00:14:03,550
you'll see that our server is now running on Port 3000.

156
00:14:03,580 --> 00:14:06,820
Now that line of course comes from our own code.

157
00:14:06,820 --> 00:14:13,660
So it means that this whole process was successful, but how do we actually reach our server? So we know

158
00:14:13,660 --> 00:14:18,250
our server is running, and we know it's on Port 3000, but how do we get to it?

159
00:14:18,640 --> 00:14:27,760
Well, let's go ahead and open up our browser and we're going to go to the URL localhost colon (:) 3000

160
00:14:27,760 --> 00:14:29,680
and then we're going to hit Enter.

161
00:14:29,680 --> 00:14:33,280
And this is the location of our server.

162
00:14:33,700 --> 00:14:39,940
And once we've reached this, you can see we've actually got some sort of response being sent back from

163
00:14:39,940 --> 00:14:40,900
our server.

164
00:14:41,080 --> 00:14:46,220
But first, let's try and understand what exactly is localhost.

165
00:14:46,460 --> 00:14:55,760
Localhost is simply when we don't have a server on the internet and instead, we want to host our server

166
00:14:55,760 --> 00:14:56,750
locally,

167
00:14:56,750 --> 00:15:05,660
so making our own computer, the server of our website's backend. And that is the local part of our

168
00:15:05,660 --> 00:15:06,530
hosting.

169
00:15:06,890 --> 00:15:14,510
So when we type into the URL, the longer version, which is https://localhost,

170
00:15:14,510 --> 00:15:24,620
then we're tapping into our own computer and then we add the colon symbol and afterwards

171
00:15:24,620 --> 00:15:31,430
we can specify the port where we want to try and reach into our computer.

172
00:15:31,730 --> 00:15:39,560
The port is kind of equivalent to a bunch of doors on our server computer, and each of these doors

173
00:15:39,560 --> 00:15:40,700
have an address.

174
00:15:40,700 --> 00:15:45,020
So you might imagine, you know, you have a door, one door to door three.

175
00:15:45,050 --> 00:15:49,760
Well, there's loads and loads of doors and in fact thousands or hundreds of thousands of doors that

176
00:15:49,760 --> 00:15:53,090
you could potentially create to access your computer.

177
00:15:53,090 --> 00:16:01,070
And in our case, when we set up our server, we specified that the door or the port we want to be listening

178
00:16:01,070 --> 00:16:03,560
on is port 3000.

179
00:16:03,740 --> 00:16:12,140
Once we've set up our server to be listening on that particular door, then when we try and access localhost:

180
00:16:12,170 --> 00:16:21,230
3000, then it's going to look onto our own computer and it's going to try and find the door that is

181
00:16:21,230 --> 00:16:23,030
Number 3000,

182
00:16:23,030 --> 00:16:30,560
and then through that door, it can reach inside to our computer and it can find the application that's

183
00:16:30,560 --> 00:16:37,490
listening and ready to respond to any requests, such as sending over some HTML, CSS or JavaScript

184
00:16:37,490 --> 00:16:41,300
files in order to serve up our website.

185
00:16:42,110 --> 00:16:50,330
Now, the reason why there are many doors on our computer is because it has to be able to listen for

186
00:16:50,330 --> 00:16:52,970
different incoming requests.

187
00:16:52,970 --> 00:16:58,100
So, for example, your printer might have a particular door that it gets to use,

188
00:16:58,100 --> 00:17:03,200
and in this case, I'm using Keynote to present this slide deck,

189
00:17:03,200 --> 00:17:06,650
and with Keynote you have a remote function.

190
00:17:06,650 --> 00:17:11,420
So I could use my phone as a remote in order to navigate through the slides,

191
00:17:11,420 --> 00:17:17,060
and that remote is also accessing my computer through a specific port.

192
00:17:17,089 --> 00:17:24,680
And because each port is identified by a unique number, then different services or different applications

193
00:17:24,680 --> 00:17:28,850
or different hardware can tap into a particular port

194
00:17:28,850 --> 00:17:35,270
and this way we can have multiple services running through the same computer without them interfering

195
00:17:35,270 --> 00:17:41,870
with each other so that each one can be listening on a particular port.

196
00:17:42,350 --> 00:17:45,530
Now we can actually check which ports on our computer are currently

197
00:17:45,570 --> 00:17:49,110
listening for interactions from the outside.

198
00:17:49,320 --> 00:17:54,110
And we can do that by typing these commands into the terminal.

199
00:17:54,120 --> 00:17:59,970
So if you're on Windows, it's using the netstat command and all of these additional options,

200
00:17:59,970 --> 00:18:08,040
and if you're on Mac, then it's using the Lsof function and we need to use sudo in order to give it

201
00:18:08,040 --> 00:18:09,360
admin access.

202
00:18:10,110 --> 00:18:14,380
You can actually type these commands in your terminal to see which ports are open.

203
00:18:14,400 --> 00:18:21,420
As a note here, this line (|) which you might not be familiar with, is called the pipe symbol and you

204
00:18:21,420 --> 00:18:23,670
can find that on your computer.

205
00:18:23,670 --> 00:18:29,370
It's not an i, it's not a capital I, it's not an l, It's actually a very separate symbol.

206
00:18:29,370 --> 00:18:36,000
If you can't find the pipe symbol on your computer, you can also search for it in Chrome and you can

207
00:18:36,000 --> 00:18:38,820
paste this into your command line as well.

208
00:18:38,820 --> 00:18:41,610
But everyone has it on their keyboard,

209
00:18:41,610 --> 00:18:46,870
it's just a matter of mashing through all the different keys in order to find it. On my computer.

210
00:18:46,870 --> 00:18:50,560
It's actually the very top left key just below the Escape key.

211
00:18:51,310 --> 00:18:57,850
If we go back to VS Code, you'll notice that my terminal that I set up previously does not have the

212
00:18:57,850 --> 00:19:06,400
usual prompt which has my name and my computer and then the location of where I am and then either the

213
00:19:06,400 --> 00:19:11,740
percentage sign or the dollar sign as the prompt where I can enter any commands

214
00:19:11,740 --> 00:19:17,350
and this is because our server is currently running and is occupying this terminal.

215
00:19:17,530 --> 00:19:25,180
If we wanted to stop our server from running, we can use the control key on our keyboard and then C (Ctrl +C)

216
00:19:25,210 --> 00:19:28,600
in order to exit that process, that's running.

217
00:19:28,600 --> 00:19:34,990
But if you didn't want to exit, then you can also just simply create a new terminal by pressing the

218
00:19:34,990 --> 00:19:35,950
add (+) button.

219
00:19:36,370 --> 00:19:41,620
In this new terminal is where I'm going to type this command.

220
00:19:41,620 --> 00:19:45,430
So in my case on Mac, it's 

221
00:19:45,430 --> 00:19:53,860
sudo lsof -i -P -n | grep LISTEN

222
00:19:54,280 --> 00:19:59,890
and because I'm using superuser access I need to type

223
00:20:01,650 --> 00:20:08,250
my password to my Mac, which is the one that you use to log in. On Windows,

224
00:20:08,250 --> 00:20:13,740
the command is,

225
00:20:13,740 --> 00:20:18,990
netstat -ano | findstr "LISTENING"

226
00:20:19,620 --> 00:20:26,730
Now, once you've done that, you should be able to see all the ports that are actually currently actively

227
00:20:26,730 --> 00:20:29,030
listening for outside interaction.

228
00:20:29,040 --> 00:20:34,200
As I mentioned, Keynote has its own port on 54476.

229
00:20:34,200 --> 00:20:40,710
That's the door it's going to use to access my computer to try and change the slides.

230
00:20:40,830 --> 00:20:49,140
And then for Port 3000, you can see it's Node that's currently running in the other terminal that's

231
00:20:49,140 --> 00:20:55,770
hosting my server and it's listening for any requests coming to that particular port.

232
00:20:57,060 --> 00:21:01,260
Coming back to our actual website though localhost 3000.

233
00:21:01,290 --> 00:21:07,920
You can see we're getting an error here and it's saying we cannot get the forward-slash (Cannot GET /).

234
00:21:07,920 --> 00:21:09,320
So what does this mean?

235
00:21:09,330 --> 00:21:13,470
It means it can't get our index page, our home page.

236
00:21:13,470 --> 00:21:18,150
And in the next lesson we're going to be talking about what this means.

237
00:21:18,150 --> 00:21:24,030
Why is it that we can't get and what does getting even mean?

238
00:21:24,060 --> 00:21:31,290
How to make requests and how to make sure that our server does not respond with a 404?

239
00:21:31,290 --> 00:21:34,070
So for all of that and more, stay tuned.

240
00:21:34,080 --> 00:21:35,480
I'll see you in the next lesson.

