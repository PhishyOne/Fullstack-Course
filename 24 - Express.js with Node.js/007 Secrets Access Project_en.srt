1
00:00:00,140 --> 00:00:00,530
All right.

2
00:00:00,530 --> 00:00:07,580
It's time to put all of your knowledge together in using Node and Express and create the final project

3
00:00:07,580 --> 00:00:11,870
for this section, which is a website full of secrets.

4
00:00:12,110 --> 00:00:18,980
So in this video lesson, go ahead and download the course resources for this lesson, which will be

5
00:00:18,980 --> 00:00:21,080
a zipped file called Secrets Project.

6
00:00:21,110 --> 00:00:27,230
Once you've downloaded and extracted it, you should be able to open it and take a look at the structure

7
00:00:27,230 --> 00:00:28,940
of the files that you have.

8
00:00:28,970 --> 00:00:31,610
So there's an index.js, which is completely blank.

9
00:00:31,640 --> 00:00:36,770
You're going to write all of your code in there, but there is a public folder that contains all of

10
00:00:36,770 --> 00:00:38,750
the pre-built HTML code.

11
00:00:38,750 --> 00:00:41,180
So there's two pages in this website.

12
00:00:41,210 --> 00:00:44,810
One is the home page, which looks like this.

13
00:00:44,840 --> 00:00:47,040
It has a h1 and a form.

14
00:00:47,060 --> 00:00:53,330
Be careful and look at the different aspects of the form so that when you're writing your code you know

15
00:00:53,330 --> 00:00:54,470
what's going on.

16
00:00:54,620 --> 00:01:02,960
And then there's also a website called secrets.html, and this is the website that we're going to display

17
00:01:02,960 --> 00:01:06,230
once the user type-in the correct password.

18
00:01:06,260 --> 00:01:13,370
In order to know how you should build this project, I want you to exit out of any servers you're running.

19
00:01:13,370 --> 00:01:21,290
Go ahead and cd over to this project and then you can use Node to run the solution.js and if

20
00:01:21,290 --> 00:01:27,950
you get ERR_MODULE_NOT_FOUND, then make sure that you've run npm i to install all of the packages

21
00:01:27,950 --> 00:01:33,770
that are in the list of dependencies here, which is just body-parser and Express.

22
00:01:34,550 --> 00:01:41,960
So now if we hit up and run our solution.js it should be listening on port 3000 and if we go over

23
00:01:41,960 --> 00:01:46,670
to the localhost:3000, you should see a website like this.

24
00:01:46,760 --> 00:01:56,660
The password for this website in the solution is "ILoveProgramming" and it's spelt exactly like this.

25
00:01:56,660 --> 00:02:01,110
So zoom in, take a look, make sure you got it right and then click submit.

26
00:02:01,110 --> 00:02:07,110
It will let you through and give you some secrets, like when making chocolate desserts always add a

27
00:02:07,110 --> 00:02:08,100
little bit of salt.

28
00:02:08,130 --> 00:02:09,990
It makes the chocolate flavor more intense.

29
00:02:09,990 --> 00:02:17,610
This is actually my own personal secret, and it is now yours because you too love programming.

30
00:02:17,610 --> 00:02:22,350
Now, what happens if I type in something that's not the right password?

31
00:02:22,830 --> 00:02:30,900
Then in this case, when I hit submit, you will see it goes back to the initial homepage, the index.html.

32
00:02:30,900 --> 00:02:34,530
It doesn't let me through to the secrets.

33
00:02:34,860 --> 00:02:41,430
That's the goal that you're trying to achieve and you should now have all of the information in your

34
00:02:41,430 --> 00:02:42,030
brain, but

35
00:02:42,030 --> 00:02:46,830
you might need to review some of the previous lessons in order to complete this challenge, but this

36
00:02:46,830 --> 00:02:48,900
is essentially what we're going to do.

37
00:02:48,900 --> 00:02:52,410
So pause the video and try to complete this challenge.

38
00:02:56,250 --> 00:02:56,640
All right.

39
00:02:56,640 --> 00:02:59,430
So let's take a look through the solution code together.

40
00:02:59,430 --> 00:03:06,000
Hopefully you've actually given this a go because as I always say, it's the doing in programming that's

41
00:03:06,030 --> 00:03:07,200
actually going to teach you,

42
00:03:07,200 --> 00:03:08,490
it's not listening to me.

43
00:03:08,520 --> 00:03:14,190
You're not going to learn anything by just listening to me, watching the videos or typing out the code

44
00:03:14,190 --> 00:03:15,030
that I've already typed.

45
00:03:15,030 --> 00:03:21,720
It's actually the thinking and the struggling and the hating yourself and the finally getting it right

46
00:03:21,720 --> 00:03:26,220
and having the right solution and things working and getting these epiphanies,

47
00:03:26,220 --> 00:03:29,070
that is how you learn programming.

48
00:03:29,070 --> 00:03:29,940
But enough of that.

49
00:03:29,940 --> 00:03:32,010
Let's walk through the solution together.

50
00:03:32,190 --> 00:03:37,830
So firstly, I've imported Express and body-parser, the two modules that I'm going to need.

51
00:03:37,860 --> 00:03:46,230
I've also imported from path and url to get this directory name, and I fully expect you to just simply

52
00:03:46,230 --> 00:03:48,560
copy and paste this from your previous projects.

53
00:03:48,570 --> 00:03:52,560
You don't need to memorize this, so I'll just say that one more time.

54
00:03:52,560 --> 00:03:57,670
Programming is not about memorization, it's about figuring out solutions to problems and knowing where

55
00:03:57,670 --> 00:04:00,010
to look for those solutions.

56
00:04:00,310 --> 00:04:01,030
Next,

57
00:04:01,030 --> 00:04:08,590
I've created my app and set my port, and then I've created this variable called userIsAuthorized,

58
00:04:08,590 --> 00:04:10,690
which by default they are not.

59
00:04:10,990 --> 00:04:13,750
Then I'm going to use my body-parser middleware,

60
00:04:13,750 --> 00:04:16,149
so again, this should be a copy and paste job.

61
00:04:16,149 --> 00:04:21,490
You're pretty much going to use the same thing every time you want to get hold of information from an

62
00:04:21,670 --> 00:04:22,510
HTML form.

63
00:04:22,720 --> 00:04:30,220
And then I've got my own middleware that I created, which you can or you don't have to.

64
00:04:30,220 --> 00:04:37,000
But in this case it's kind of a middleware because we're effectively authorizing the request before

65
00:04:37,000 --> 00:04:38,200
it gets handled.

66
00:04:38,200 --> 00:04:45,490
So while it's acceptable to put this inside the app.post, I think it's actually better in this case

67
00:04:45,490 --> 00:04:46,870
to have it as a middleware.

68
00:04:46,870 --> 00:04:54,340
So I've created a middleware called passwordCheck, which takes the value that the user inputted into

69
00:04:54,340 --> 00:04:59,860
the password field and the reason why I know it's going into the password field is one I console logged

70
00:04:59,860 --> 00:05:07,630
the req.body, but also I looked inside the index.html and I saw that the input for the password

71
00:05:07,630 --> 00:05:10,510
field has this particular name.

72
00:05:10,990 --> 00:05:14,110
So that is what I needed to put right here.

73
00:05:14,530 --> 00:05:20,380
I'm going to check if the password is equal to ILoveProgramming, or whatever password it is you want

74
00:05:20,380 --> 00:05:21,040
to set,

75
00:05:21,040 --> 00:05:25,720
and if that is the case, I'm going to set the user to authenticated.

76
00:05:25,720 --> 00:05:32,680
And that all-important next() method is what allows my flow to continue through to the handlers.

77
00:05:32,680 --> 00:05:38,590
So this middleware gets used first and then we have our two routes.

78
00:05:38,650 --> 00:05:44,920
Our GET route to the home page sends the file that is our index.html.

79
00:05:44,920 --> 00:05:53,560
So this particular HTML page and then the user can type something in here and then when they hit Submit,

80
00:05:53,590 --> 00:06:02,170
that form is going to be submitted to the /check route using the POST method.

81
00:06:02,170 --> 00:06:07,480
So I have to handle that in my server if I want anything to happen.

82
00:06:07,480 --> 00:06:12,910
So I've got an app.post() with this route and when it comes through I'm going to check,

83
00:06:12,910 --> 00:06:17,530
well, was that request coming from a user that's authenticated?

84
00:06:17,530 --> 00:06:21,940
If so, let's send them the secret.html page,

85
00:06:21,970 --> 00:06:26,110
otherwise let's send them back to the home page.

86
00:06:26,110 --> 00:06:32,950
Now we haven't really talked about res.redirect, so this is how I expect you to have sent the user

87
00:06:32,950 --> 00:06:36,280
back to the home page if they got the password wrong.

88
00:06:36,280 --> 00:06:44,830
But there is also another method called res.redirect and you can simply put in the URL where you want

89
00:06:44,830 --> 00:06:50,830
them to redirect to, which in our case is to go straight back to the home page so you don't have to

90
00:06:50,830 --> 00:06:53,710
write out all of those lines of code if you wish.

91
00:06:53,710 --> 00:06:59,800
But this is equally valid code and this is the form that I expected you to figure out.

92
00:07:00,280 --> 00:07:07,840
Another thing to mention here is body-parser is now incorporated as a part of Express, so if you don't

93
00:07:07,840 --> 00:07:14,050
want to install yet another module, you don't want to put in import body-parser, you can simply replace

94
00:07:14,050 --> 00:07:20,200
it with express because it now has all of the functionality of body-parser included because it's such

95
00:07:20,200 --> 00:07:25,690
a commonly needed functionality, but it does need to be added in as a middleware.

96
00:07:25,720 --> 00:07:31,450
Now for me, when I'm actually going through my code, I actually prefer looking at it like this because

97
00:07:31,450 --> 00:07:36,400
then I know what this middleware is doing and this is also most of the code that you're going to come

98
00:07:36,400 --> 00:07:37,810
across on the Internet.

99
00:07:37,810 --> 00:07:43,300
So I prefer this version, but I just wanted to let you know that there is an alternative as well.

100
00:07:43,540 --> 00:07:49,960
Hopefully, you managed to get this project to work from your own steam and hopefully, you struggled a ton

101
00:07:49,960 --> 00:07:50,530
with it.

102
00:07:50,530 --> 00:07:52,450
That does not mean that you're not smart,

103
00:07:52,450 --> 00:07:54,460
it means that you're super smart because you tried

104
00:07:54,480 --> 00:07:55,350
really, really hard

105
00:07:55,350 --> 00:07:58,050
and that's how you're going to get ahead of everyone.

106
00:07:58,200 --> 00:08:02,630
But if something didn't work or you need to review the code, it's totally fine,

107
00:08:02,640 --> 00:08:06,450
make sure that you go back and fix it and your project works.

108
00:08:06,750 --> 00:08:11,200
Hopefully, you had fun with me in this module, learning all about Express.

109
00:08:11,220 --> 00:08:15,150
In the next module we're going to learn about EJS.

110
00:08:15,150 --> 00:08:16,650
So what is that?

111
00:08:16,650 --> 00:08:21,810
Well, you have to find out in the next module. For all of that and more, I'll see you there.

