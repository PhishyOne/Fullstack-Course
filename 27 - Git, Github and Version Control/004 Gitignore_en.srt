1
00:00:00,830 --> 00:00:05,900
All right, guys, in this lesson, we're going to be talking all about the .gitignore and how you can

2
00:00:05,900 --> 00:00:12,470
set rules to prevent committing certain files to your local and remote Git repositories.

3
00:00:12,470 --> 00:00:15,680
So first things first, let's bring up Terminal.

4
00:00:15,680 --> 00:00:21,290
And what we're going to do is we're going to cd into our Desktop and we're going to create a new directory

5
00:00:21,290 --> 00:00:22,880
here called Project.

6
00:00:22,880 --> 00:00:30,710
Just say that we have this brand new project and now if we go into our Project and we create a whole

7
00:00:30,710 --> 00:00:36,380
bunch of files to simulate this example project.

8
00:00:36,650 --> 00:00:44,150
So let's say we've got something called file1.txt and we've got a whole bunch of other ones,

9
00:00:44,150 --> 00:00:51,800
file2, file3, and we've also got something called, secrets file.

10
00:00:52,370 --> 00:00:54,290
So we've now got four files.

11
00:00:54,290 --> 00:01:02,100
And just to illustrate the use cases of when we might want to have a gitignore file, so say if you

12
00:01:02,100 --> 00:01:10,410
have this file that has some, you know, secret passwords or API Keys, basically stuff that you don't

13
00:01:10,410 --> 00:01:17,730
want to be committed, especially you don't want it to be hosted on an open platform like GitHub.

14
00:01:17,760 --> 00:01:25,950
There have been horror stories of people having their Amazon AWS secret keys in their projects and that

15
00:01:25,950 --> 00:01:34,380
getting pushed to their remote on GitHub and within seconds their entire AWS account has been basically

16
00:01:34,380 --> 00:01:35,970
used up and wiped clean.

17
00:01:35,970 --> 00:01:43,020
So it's really, really important to think about some of these things and to be aware of what you're

18
00:01:43,020 --> 00:01:46,380
putting onto this public platform.

19
00:01:46,590 --> 00:01:52,860
Another type of file that you might want to add into a gitignore or you might want to not upload to

20
00:01:52,890 --> 00:01:58,650
GitHub are files that are to do with your local settings or your user preferences.

21
00:01:58,650 --> 00:02:05,010
And there's a whole bunch of these types of utility files that you don't really want another person

22
00:02:05,010 --> 00:02:11,940
to have to download and copy into their project folder if they're cloning or if they're forking your

23
00:02:11,940 --> 00:02:12,810
projects.

24
00:02:12,810 --> 00:02:19,680
So a really common example that people tend to add to their gitignore files are what are I called DS_Store

25
00:02:19,680 --> 00:02:20,310
files.

26
00:02:20,350 --> 00:02:26,790
DS_Store files are basically a settings file that saves certain things like, you know, how you like your

27
00:02:26,790 --> 00:02:29,970
icons to be arranged in a particular project folder.

28
00:02:29,970 --> 00:02:36,450
So let's say if we go in here and we just have a look at arrange by, "Arrange by none"and then I'm going

29
00:02:36,450 --> 00:02:42,240
to move my files around and let's say that this is just my preference for how I want my files to be

30
00:02:42,240 --> 00:02:45,150
shown inside this project folder.

31
00:02:45,150 --> 00:02:51,630
Now, the DS_Store file is a hidden file, so you won't be able to see it inside your finder.

32
00:02:51,630 --> 00:02:59,940
But of course, we as command line experts know that we can simply do an ls -a, to see all of the hidden

33
00:02:59,940 --> 00:03:02,910
files that are inside our project folder.

34
00:03:02,910 --> 00:03:05,310
And you can see there it is, DS_Store.

35
00:03:05,310 --> 00:03:09,060
So that's not something that's going to be of any use to anybody else,

36
00:03:09,060 --> 00:03:15,960
and we don't want to have to clutter our GitHub remote repository or anybody else's computer with that

37
00:03:15,960 --> 00:03:16,410
file,

38
00:03:16,410 --> 00:03:19,140
so we're going to add that to our gitignore as well.

39
00:03:19,470 --> 00:03:25,020
Getting on to the point of creating and using a gitignore file, the first thing you have to do is

40
00:03:25,020 --> 00:03:26,790
to make it, right?

41
00:03:27,210 --> 00:03:31,830
And to do that, we're just going to create a hidden file.

42
00:03:31,830 --> 00:03:36,900
So using the dot (.) in front of the file name and it's going to be called .gitignore.

43
00:03:36,930 --> 00:03:43,470
Now the case and the wording matters a huge deal because we're using Git and it's looking for this specific

44
00:03:43,470 --> 00:03:43,950
file.

45
00:03:43,950 --> 00:03:47,820
So make sure that when you're using it, it looks exactly like this.

46
00:03:47,970 --> 00:03:49,350
Let's create that file.

47
00:03:49,350 --> 00:03:55,710
And of course, it doesn't appear because it's a hidden file, but we can see it using ls -a, and we can

48
00:03:55,710 --> 00:03:58,170
also open it inside VS Code like this.

49
00:03:58,960 --> 00:04:04,360
Here is where we add the files that should be ignored when we commit our project to Git.

50
00:04:04,450 --> 00:04:09,480
Let me first show you what happens when we don't have anything inside our gitignore.

51
00:04:09,490 --> 00:04:14,670
And I'm going to go through the normal process of setting up Git and committing it. First,

52
00:04:14,680 --> 00:04:22,600
if you remember, I have to use "git init" to initialize an empty Git repository inside my Project's directory.

53
00:04:22,600 --> 00:04:29,710
And then I'm going to use "git add ." to add all the files that are currently inside this directory

54
00:04:29,710 --> 00:04:31,660
to the Git Staging area.

55
00:04:31,660 --> 00:04:39,580
So hit enter and we can have a look at what's been added by using "git status" and you can see that all

56
00:04:39,580 --> 00:04:47,110
of these files are added into the Staging area and they're going to be committed if I go ahead and do

57
00:04:47,140 --> 00:04:48,250
git commit.

58
00:04:48,250 --> 00:04:54,730
So that's not what we want and instead I don't want to commit the DS_Store and I also don't want to commit

59
00:04:54,730 --> 00:04:55,600
my secrets.txt

60
00:04:55,600 --> 00:04:56,980
file.

61
00:04:57,130 --> 00:04:58,150
First things first.

62
00:04:58,150 --> 00:05:01,070
I'm going to basically undo what I've just done.

63
00:05:01,070 --> 00:05:08,660
So I'm going to remove all of these files from my Staging area and then I'm going to add them later

64
00:05:08,660 --> 00:05:11,810
on once I've got my gitignore setup.

65
00:05:11,930 --> 00:05:14,510
Basically, we're just undoing the last step.

66
00:05:14,540 --> 00:05:23,030
To do that, I'm going to write "git rm --cached" and I'm going to use the "-r" flag for recursive

67
00:05:23,030 --> 00:05:28,220
and I'm going to use a "." (dot)  to say that everything inside the current directory should be removed from

68
00:05:28,220 --> 00:05:29,210
the Staging area.

69
00:05:29,210 --> 00:05:35,600
So now if I hit enter, you can see that all of these things have been removed from the Git Staging

70
00:05:35,600 --> 00:05:35,870
area.

71
00:05:35,870 --> 00:05:42,260
And if I do a "git status" again, you can see that all of these files are no longer tracked to be committed.

72
00:05:42,260 --> 00:05:47,450
So now this is the point where we're going to use that gitignore file and we're going to add the file

73
00:05:47,450 --> 00:05:52,220
names that we want to be ignored when we're adding and committing to Git.

74
00:05:52,340 --> 00:05:59,180
In order to add individual files, you can simply specify the file name on each and every new line.

75
00:05:59,180 --> 00:06:04,160
So, for example, if we want to ignore the DS_Store, we can simply write, ".DS_Store".

76
00:06:04,160 --> 00:06:09,080
So exactly the same upper and lower casing as the name of the file.

77
00:06:09,080 --> 00:06:17,780
And if we wanted to ignore the secrets.txt file, then all we have to do is just to specify it

78
00:06:17,780 --> 00:06:19,960
in here on a new line.

79
00:06:19,970 --> 00:06:22,970
Now with gitignore it has certain rules.

80
00:06:22,970 --> 00:06:27,860
So for example you can use the pound sign (#) to comment.

81
00:06:28,070 --> 00:06:34,190
So for example, you can say, you know, "#Log files," right? To be ignored.

82
00:06:34,280 --> 00:06:37,160
Another thing you can do is use wildcards.

83
00:06:37,160 --> 00:06:43,220
So if you use the asterisks (*) and you say *.txt, that means that when you commit your

84
00:06:43,220 --> 00:06:48,290
project, all of the files that have a .txt extension will be ignored.

85
00:06:48,830 --> 00:06:49,310
All right.

86
00:06:49,310 --> 00:06:55,940
So I'm going to get rid of that because I do want to commit the file1 and file2 and file3

87
00:06:55,970 --> 00:07:01,820
to Git, but I want it to ignore the DS_Store and the secrets.txt files.

88
00:07:02,720 --> 00:07:06,830
Now we're ready to add our files to our Staging area.

89
00:07:06,830 --> 00:07:14,990
So let's again use "git add ." and use "git status" to see what's been added so you can see that the only

90
00:07:14,990 --> 00:07:16,580
files that are added are the

91
00:07:16,580 --> 00:07:24,710
gitignore, the file 1,2,3, but the DS_Store, as well as, the secrets.txt are ignored as per the specifications

92
00:07:24,710 --> 00:07:26,540
in our gitignore file.

93
00:07:26,780 --> 00:07:36,830
Now, if I go ahead and commit this as my "Initial Commit," then the only files that are going to be put

94
00:07:36,830 --> 00:07:40,400
onto my Local commit are going to be these four.

95
00:07:40,400 --> 00:07:46,400
And similarly, if I push this to GitHub, it will also be only these four files.

96
00:07:47,410 --> 00:07:56,380
Now let's open a new Node project and let me show you how you would add a gitignore file for your

97
00:07:56,410 --> 00:07:57,340
Node projects.

98
00:07:57,340 --> 00:08:03,340
So let's just call this test and I'm going to put it inside my desktop.

99
00:08:04,750 --> 00:08:08,140
And now let's install the Node modules using npm.

100
00:08:11,120 --> 00:08:15,380
And I'm going to create a gitignore file.

101
00:08:16,280 --> 00:08:18,740
Then we're going to open our gitignore.

102
00:08:19,340 --> 00:08:26,480
And in here I'm going to add some of the files that will be ignored for our Node project.

103
00:08:26,510 --> 00:08:33,289
If you go to github.com/github, so this is a repository owned by the GitHub team.

104
00:08:33,299 --> 00:08:40,820
They have a repository called gitgnore, and it's basically a pre-made collection of useful gitignore

105
00:08:40,820 --> 00:08:41,570
templates.

106
00:08:41,570 --> 00:08:48,560
And if you have a search in here, you can find that you've got Node and you can see that this is a

107
00:08:48,560 --> 00:08:56,150
pre-built template for some of the files that you probably won't want to upload to GitHub or any other

108
00:08:56,150 --> 00:08:57,440
remote repository.

109
00:08:57,440 --> 00:09:04,850
So these have the file extensions for things that are node modules or environment settings and it's

110
00:09:04,850 --> 00:09:06,950
basically all pre-made for you.

111
00:09:06,950 --> 00:09:16,550
So you can simply just copy all of this and put it into your gitignore file that you created earlier

112
00:09:16,550 --> 00:09:16,820
on.

113
00:09:16,820 --> 00:09:18,830
So just straight up paste.

114
00:09:18,830 --> 00:09:23,870
And if you remember from earlier on, we said that the lines that start off with a pound sign are the

115
00:09:23,870 --> 00:09:27,740
comments, and these ones are extensions that you're going to ignore.

116
00:09:27,740 --> 00:09:31,520
And you might want to add things like DS_Store into here as well.

117
00:09:31,520 --> 00:09:34,700
So you can have something like, "#Project-wide".

118
00:09:34,700 --> 00:09:42,470
So for example, the .DS_Store that we mentioned earlier on, and if you hit Save. Now, if we go into Terminal

119
00:09:42,470 --> 00:09:53,750
and we're inside our Test folder, so we're going to do a "git init, git add ., git status" to see what's

120
00:09:53,750 --> 00:09:55,130
going to be committed.

121
00:09:56,210 --> 00:10:02,330
And then we're going to say, "git commit, -m 'Initial commit'."

122
00:10:03,350 --> 00:10:04,340
There we go.

123
00:10:04,820 --> 00:10:11,540
And now once you're ready to commit and add all of this to your remote, then it will ignore all of

124
00:10:11,540 --> 00:10:18,590
these common user related files that are not going to be useful to your collaborators or anybody who

125
00:10:18,590 --> 00:10:20,420
wants to contribute on GitHub.

126
00:10:20,660 --> 00:10:26,930
That was just a quick tidbit about using gitignore, and I know that some of you guys have been asking

127
00:10:26,930 --> 00:10:32,420
about, you know, where should you put your API Keys, where should you put your sensitive data?

128
00:10:32,420 --> 00:10:38,750
And you have to make sure that when you're uploading your projects with these secret keys and passwords

129
00:10:38,750 --> 00:10:43,400
to make sure that you set up a gitignore file and to include those things in there.

130
00:10:44,360 --> 00:10:44,810
All right.

131
00:10:44,810 --> 00:10:47,180
So that's all for this lesson.

132
00:10:47,180 --> 00:10:53,960
In the next lesson, I want to talk about Git Clone and how to clone various repositories to your local

133
00:10:53,960 --> 00:10:54,740
system.

134
00:10:54,740 --> 00:10:57,690
So for all of that and more in the next lesson.

135
00:10:57,690 --> 00:10:58,770
So I'll see you there.

