1
00:00:00,170 --> 00:00:05,780
In the last few lessons, we looked at implementing source control locally, using the command line

2
00:00:05,780 --> 00:00:08,560
and also remotely using GitHub.

3
00:00:08,570 --> 00:00:15,530
So now I want to take you a little bit further and I want to talk about collaboration using remote repositories

4
00:00:15,530 --> 00:00:23,960
and GitHub because this is one of the best ways to start working in a team of programmers and to contribute

5
00:00:23,960 --> 00:00:26,540
your skills to open source projects.

6
00:00:26,540 --> 00:00:32,270
So we've seen all of these four areas the Working Directory, the Staging area, the Local Repository

7
00:00:32,270 --> 00:00:34,220
as well as the Remote Repository,

8
00:00:34,220 --> 00:00:38,060
and you should be pretty familiar with all four of these areas by now.

9
00:00:38,090 --> 00:00:45,620
Now in the next scenario, let's shift over to just look at the Local and Remote Repository that you

10
00:00:45,620 --> 00:00:46,220
own.

11
00:00:46,250 --> 00:00:47,750
Let's say that,

12
00:00:47,750 --> 00:00:51,200
Angela, so myself, I own this repository.

13
00:00:51,200 --> 00:00:56,270
I created it locally and then I pushed it to my remote repository on GitHub.

14
00:00:56,360 --> 00:01:02,340
Now let's say that I have an evil twin who's called, I don't know,

15
00:01:02,610 --> 00:01:04,739
Bangela. That's a terrible name.

16
00:01:05,519 --> 00:01:10,010
Let's say that she also wanted to make changes to my repository.

17
00:01:10,020 --> 00:01:16,020
She's looking at my code base and you know, she wants to add some features or fix some bugs or do something.

18
00:01:16,650 --> 00:01:20,850
Because I own this remote repository over here.

19
00:01:20,850 --> 00:01:28,050
In order for her to work on it, she could make a copy of it that exists on her GitHub account.

20
00:01:28,080 --> 00:01:30,620
Remember, this is different from "git clone".

21
00:01:30,630 --> 00:01:38,610
Git clone is just grabbing at the entirety of the repository and then cloning it to your local work

22
00:01:38,610 --> 00:01:39,360
environment.

23
00:01:39,390 --> 00:01:45,300
Now, in this case, we're basically just copying a repository that's hosted on GitHub and we're keeping

24
00:01:45,300 --> 00:01:49,740
the copy under our own GitHub account where we can make changes to it.

25
00:01:49,740 --> 00:01:53,850
So this in terms of GitHub lingo is called Forking.

26
00:01:53,850 --> 00:01:58,590
Now once you've forked a remote repository, then you now own it.

27
00:01:58,590 --> 00:02:05,160
You have full permissions to do whatever it is that you like with this copy of the repository, because

28
00:02:05,160 --> 00:02:12,300
as you can imagine, it would be pretty crazy if everybody could modify your source code on all of your

29
00:02:12,300 --> 00:02:18,090
open source repositories because, you know, it would lead to maybe amateurs changing all sorts of

30
00:02:18,090 --> 00:02:24,450
things that you don't want them to or, you know, people making features that are incompatible with

31
00:02:24,450 --> 00:02:25,830
what you've got already.

32
00:02:25,830 --> 00:02:30,600
Basically, you would only give people who you have a trusting relationship with, write

33
00:02:30,600 --> 00:02:32,700
access, to your remote repository.

34
00:02:32,700 --> 00:02:39,060
So say if you worked within a team and you're all working on a product, then everybody in the team

35
00:02:39,060 --> 00:02:45,390
probably has both read and write permissions on a single remote repository and that way they can "git

36
00:02:45,390 --> 00:02:51,420
clone" and work on it locally and then push it and resolve any sort of conflicts that way,

37
00:02:51,420 --> 00:02:55,890
but you don't want anybody on the Internet having those kind of permissions.

38
00:02:55,890 --> 00:03:00,000
So how do you implement this kind of open source collaboration then?

39
00:03:00,000 --> 00:03:03,480
Well, it's through Forking and making Pull requests.

40
00:03:04,470 --> 00:03:09,510
So now let's say that evil Angela, Bangela has forked my repository.

41
00:03:09,510 --> 00:03:17,940
So on her GitHub account, she now owns a copy of my repository and from this point she can then clone

42
00:03:17,940 --> 00:03:20,910
that repository to work on it locally.

43
00:03:20,910 --> 00:03:27,420
And if she decides to add some features to it, maybe, you know, improve the code base or add some

44
00:03:27,420 --> 00:03:33,390
more code or do something crazy or whatever it is that she wants, then after she's happy with that

45
00:03:33,390 --> 00:03:39,090
and she's committed those changes, then she can push it to her remote repository.

46
00:03:39,090 --> 00:03:46,680
And then if she wants me or good Angela to incorporate those changes that she made, then her only option

47
00:03:46,680 --> 00:03:49,140
is to make a "Pull request",

48
00:03:49,140 --> 00:03:55,560
if she is not within that trusted pool of people who all have read and write access to my remote repository.

49
00:03:55,560 --> 00:04:00,900
So say if she only has read access, then she would have to make a Pull request.

50
00:04:00,900 --> 00:04:03,270
And it's almost like making a suggestion.

51
00:04:03,270 --> 00:04:06,450
Here are some suggested changes that I've been working on.

52
00:04:06,450 --> 00:04:07,740
What do you think about it?

53
00:04:07,740 --> 00:04:13,080
If you okay it, then please, you know, merge it to your remote repository.

54
00:04:13,110 --> 00:04:19,470
The reason why it's called a Pull request and not a push request is because the person who has the write

55
00:04:19,470 --> 00:04:21,149
permission to the repository,

56
00:04:21,149 --> 00:04:29,100
so I have write permission to my own remote repository, which has been forked and duplicated by, you

57
00:04:29,100 --> 00:04:30,600
know, my evil twin.

58
00:04:30,600 --> 00:04:37,170
If she wants to incorporate those changes, then I have the deciding vote so I can review those changes

59
00:04:37,170 --> 00:04:40,980
and I can pull the changes over.

60
00:04:40,980 --> 00:04:47,520
So it's not a push because you don't own the rights to the remote repository that you're trying to push

61
00:04:47,520 --> 00:04:48,150
to.

62
00:04:48,710 --> 00:04:54,680
In this case, if I decide after a code review that actually those features that she added were pretty

63
00:04:54,680 --> 00:05:00,980
great and it seems compatible with my code so far and doesn't break anything, then I would approve

64
00:05:00,980 --> 00:05:11,060
the pull request and merge her repository with my own, so the changes will be reflected in a new commit.

65
00:05:11,060 --> 00:05:13,400
So let's take a look at this in action.

66
00:05:14,880 --> 00:05:18,630
So here we've got our original Story repository.

67
00:05:18,630 --> 00:05:24,990
So this is a remote repository, remember, because it's hosted online on GitHub and we've got a number

68
00:05:24,990 --> 00:05:31,880
of commits and we've been doing some modifications and writing to write our storyline.

69
00:05:31,890 --> 00:05:35,160
Now I'm going to log out of my account.

70
00:05:35,160 --> 00:05:42,210
So that was the account that created the Story and then I'm going to sign in using a different account.

71
00:05:42,210 --> 00:05:46,080
So right now I'm signed in to a different GitHub account.

72
00:05:46,350 --> 00:05:53,310
This account is named "gilfoyleismyothername", and now I'm going to search for that repository.

73
00:05:53,340 --> 00:05:57,600
So I found the Story repository by the user angelabauer.

74
00:05:57,600 --> 00:05:59,850
So that was the one that we saw earlier on.

75
00:05:59,850 --> 00:06:06,060
So I'm going to go into this repository and you can see that all of these lines and files are publicly

76
00:06:06,060 --> 00:06:12,510
visible and you can read through all of it, even though you are now not signed in to the account that

77
00:06:12,510 --> 00:06:19,300
created this repository from here, what I'm going to do is I'm going to Fork this repository.

78
00:06:20,200 --> 00:06:28,510
As we mentioned before, forking is simply making a copy or a duplicate of a remote repository and putting

79
00:06:28,510 --> 00:06:31,450
it under your own GitHub account.

80
00:06:31,480 --> 00:06:39,400
You can see this user that I've created is called gilfoyleismyothername, and now I have this repository

81
00:06:39,400 --> 00:06:46,120
under my own username, so I've made a copy of it and you can see it's exactly the same as before.

82
00:06:46,120 --> 00:06:50,590
Everything's been copied over, including all of the previous commits that were made.

83
00:06:50,860 --> 00:06:54,220
So from here I'm going to make some changes.

84
00:06:54,220 --> 00:06:58,720
So let's maybe change one of these storylines.

85
00:06:59,410 --> 00:07:01,690
So let's change chapter 4.

86
00:07:04,470 --> 00:07:11,580
So let's say that this other user, this other person has some suggested improvements to my code, or

87
00:07:11,580 --> 00:07:13,330
in this case, to my writing.

88
00:07:13,350 --> 00:07:19,740
They're still keeping the spirit of the original repository alive because we are now converting into

89
00:07:19,740 --> 00:07:22,530
a space-theme or an alien-theme.

90
00:07:22,680 --> 00:07:29,610
So I've made my changes to chapter4, and I'm going to commit those changes saying, "Add more space-

91
00:07:29,610 --> 00:07:34,090
theme to chapter 4."

92
00:07:34,110 --> 00:07:37,230
So that's what I did, and I'm going to commit to the master branch.

93
00:07:37,230 --> 00:07:43,440
So this is the master branch of my own forked copy of the Story repository.

94
00:07:43,440 --> 00:07:50,820
So once I commit those changes, then we can view what it currently looks like under the Graphs.

95
00:07:50,920 --> 00:07:54,060
If we have a look at the Network,

96
00:07:55,020 --> 00:08:03,720
you can see that this is the point where I forked the story repository and that commit was created by

97
00:08:03,720 --> 00:08:08,140
Angela Yu, which basically merged this branch to the master branch.

98
00:08:08,140 --> 00:08:09,220
So we did that

99
00:08:09,220 --> 00:08:10,090
two lessons back,

100
00:08:10,090 --> 00:08:11,050
if you remember.

101
00:08:11,470 --> 00:08:15,580
The latest commit though, is made by this current user,

102
00:08:15,610 --> 00:08:23,290
gilfoyleismyothername, and you can see that I've added it to the master branch of my forked copy

103
00:08:23,290 --> 00:08:24,700
of that repository.

104
00:08:24,840 --> 00:08:34,570
Say, if I now open up a incognito window and I log back in to the Angela account and go over to that

105
00:08:34,570 --> 00:08:43,330
Story repository, you can see that if I have a look inside my Graphs go into Network that that latest

106
00:08:43,330 --> 00:08:46,720
change, it's not reflected on my master branch.

107
00:08:46,750 --> 00:08:54,790
It's showing up as a separate branch made by gilfoylismyothername and you can see the members

108
00:08:54,790 --> 00:08:56,800
who have forked your repository.

109
00:08:57,080 --> 00:09:03,910
This is a great way of collaborating because you can have contributors, make edits or add new features

110
00:09:03,910 --> 00:09:07,990
to your pre-existing code base or repository.

111
00:09:08,200 --> 00:09:14,050
And now what I can do if I head back to the Gilfoyle account,

112
00:09:14,710 --> 00:09:20,530
so I'm just going to flip through these two so that you can see, right now I'm inside the Gilfoyle account,

113
00:09:20,530 --> 00:09:23,890
and this is the angelabauer account.

114
00:09:24,190 --> 00:09:29,830
Now, under the Gilfoyle account, what I can do is I can make a Pull request.

115
00:09:29,860 --> 00:09:31,630
We can do that here

116
00:09:31,660 --> 00:09:34,180
and you can see that it's able to merge.

117
00:09:34,390 --> 00:09:36,550
And these are the changes.

118
00:09:36,550 --> 00:09:40,360
So swapping that word for that word, swapping that word for that phrase.

119
00:09:40,750 --> 00:09:49,270
Now, all I have to do is hit, Create Pull request and tell the original author, which is Angela

120
00:09:49,270 --> 00:09:58,600
Bauer, what I've done, why I think my modifications or my features are worthy to be merged with the

121
00:09:58,600 --> 00:10:00,190
original repository.

122
00:10:00,190 --> 00:10:01,090
And you know,

123
00:10:01,090 --> 00:10:02,080
any other notes, right?

124
00:10:02,080 --> 00:10:04,030
Any other comments that I have.

125
00:10:04,540 --> 00:10:06,100
Let's just say...

126
00:10:09,480 --> 00:10:10,860
Always helps to be complimentary.

127
00:10:10,890 --> 00:10:14,580
Now, let's go ahead and create a Pull request.

128
00:10:17,130 --> 00:10:18,900
The pull request is done,

129
00:10:18,900 --> 00:10:27,600
but if we have a look back into the Story repository, you can see that those changes are not made right?

130
00:10:27,600 --> 00:10:30,180
It's because I don't own this repository.

131
00:10:30,180 --> 00:10:36,420
I don't have write access, only have read access as a member of the general public and not a member

132
00:10:36,420 --> 00:10:38,950
of the trusted inner circle.

133
00:10:38,970 --> 00:10:42,690
So I can only suggest my changes.

134
00:10:43,110 --> 00:10:48,870
If we head over back to the angelabauer account who owns this repository.

135
00:10:49,620 --> 00:10:56,120
Now, if I have a look under Pull requests, I've got a brand new Pull request, right?

136
00:10:56,130 --> 00:11:01,920
So it previously was 0, but now I have 1 and it's showing as 1 Open Pull request.

137
00:11:01,920 --> 00:11:04,800
And this is added a minute ago by

138
00:11:04,800 --> 00:11:12,390
Gilfoyle and if I look at it, I can see why he thinks that this modification is necessary and what

139
00:11:12,390 --> 00:11:14,040
were his commit message.

140
00:11:14,040 --> 00:11:21,250
And I can also take a look at the commits that he made and compare the differences.

141
00:11:21,250 --> 00:11:24,040
So review those changes.

142
00:11:24,720 --> 00:11:27,870
So I could say something like, great job,

143
00:11:28,470 --> 00:11:31,740
Gilfoyle. And I can submit this feedback to

144
00:11:31,740 --> 00:11:35,700
Gilfoyle and approve merging these changes.

145
00:11:37,880 --> 00:11:50,030
Now all I have to do is hit Merge, Pull request and maybe add a, "Merged from Gilfoyle's modifications

146
00:11:50,030 --> 00:11:52,310
to chapter 4."

147
00:11:52,850 --> 00:11:56,420
Okay, so let's go ahead and confirm the merge.

148
00:11:57,350 --> 00:12:03,290
And now you can see that that commit is added to angelabauer, master.

149
00:12:03,320 --> 00:12:06,800
So if I have a look inside my Graphs now,

150
00:12:09,230 --> 00:12:15,110
you can see that the latest commit was my merge and you can see where it came from.

151
00:12:15,110 --> 00:12:21,230
It came from a fork made by Gilfoyle, which shows up as a separate branch, and then it got merged

152
00:12:21,230 --> 00:12:24,230
back into the main branch of the main repository.

153
00:12:24,440 --> 00:12:31,340
So some people use GitHub purely as version control for their own projects and use some of the features

154
00:12:31,340 --> 00:12:33,560
that we discussed in previous lessons,

155
00:12:33,560 --> 00:12:43,610
but there's also a huge community of awesome coders on here who have created really brilliant projects

156
00:12:43,610 --> 00:12:51,200
and if you can see ways of improving it or contributing to it, then it's a great way of starting to

157
00:12:51,200 --> 00:12:57,590
learn how to work in a team of programmers, which is a really essential skill when you're working for

158
00:12:57,590 --> 00:12:59,180
a startup or for a company.

159
00:12:59,780 --> 00:13:08,180
So, for example, if we have a look at the Alamofire repository, if you have a look at the contributions,

160
00:13:08,180 --> 00:13:15,090
you can see that there have been loads and loads of other users who have looked at the code and done

161
00:13:15,090 --> 00:13:22,110
things, you know, or made suggestions, and to steadily improve this framework that, you know, everybody

162
00:13:22,110 --> 00:13:24,000
else is benefiting off, right?

163
00:13:24,000 --> 00:13:32,130
You can see that a total of 4300 forks have been made and there's currently four open pull requests,

164
00:13:32,130 --> 00:13:35,580
but 559 pull requests were closed.

165
00:13:35,580 --> 00:13:37,020
So let's have a look.

166
00:13:37,020 --> 00:13:43,290
So, for example, in this case, this guy updated the Readme to the current version.

167
00:13:43,290 --> 00:13:48,570
So that's obviously just editing a text file and that's pretty much within anybody's capabilities,

168
00:13:48,570 --> 00:13:49,050
right?

169
00:13:49,050 --> 00:13:55,680
And then it got merged by somebody who owned this repository and they gave them a bit of feedback.

170
00:13:55,680 --> 00:13:56,130
Right?

171
00:13:56,130 --> 00:14:02,940
But there's other things like, you know, code additions or code deletions or modifications that people

172
00:14:02,940 --> 00:14:03,690
have made.

173
00:14:03,690 --> 00:14:08,640
So this guy made some fixes and he's documented:

174
00:14:08,640 --> 00:14:09,480
what were the goals,

175
00:14:09,480 --> 00:14:13,230
what were the implementation details, what were the tests that he performed?

176
00:14:13,230 --> 00:14:18,360
And then the guy who owned the repository said, hey, just, you know, maybe one thing that you need

177
00:14:18,360 --> 00:14:19,320
to change.

178
00:14:19,320 --> 00:14:20,310
Have a look in here.

179
00:14:20,310 --> 00:14:25,410
And then once it was changed, then it was approved and merged with the master branch.

180
00:14:25,560 --> 00:14:31,380
Have a look around on GitHub and see what are some of the cool projects that you could maybe get involved

181
00:14:31,380 --> 00:14:32,880
in. To begin with,

182
00:14:33,000 --> 00:14:38,430
have a look at the libraries that you've been using and if you want, you can build on top of it, either

183
00:14:38,430 --> 00:14:40,770
for your own goals and purposes,

184
00:14:40,770 --> 00:14:45,930
but also, you know, if you're building on top of somebody else's open-source code, then it's a nice

185
00:14:45,930 --> 00:14:53,610
thing to contribute back to the open source world by forking and making a pull request to offer your

186
00:14:53,610 --> 00:14:56,760
improvements or bug fixes or new features.

187
00:14:56,790 --> 00:15:05,670
As I said, it's almost like a social network for programmers, and you can make a lot of great friends

188
00:15:05,670 --> 00:15:11,430
on here, and you can also get a lot of help on here in your development journey.

189
00:15:11,880 --> 00:15:17,040
So I hope you enjoyed all of that and I will see you on the next lesson.

