1
00:00:00,680 --> 00:00:01,040
All right.

2
00:00:01,040 --> 00:00:08,690
So in this lesson, we're going to learn all about the HTML void elements such as the horizontal rule and

3
00:00:08,690 --> 00:00:09,770
the break element.

4
00:00:10,130 --> 00:00:12,420
What exactly are void elements?

5
00:00:12,440 --> 00:00:19,700
Well, we've seen what non-void elements are, such as the paragraph element or the heading elements,

6
00:00:19,700 --> 00:00:25,070
and they're not void because they have content right here in between.

7
00:00:25,490 --> 00:00:33,340
A void element is an element where you are forbidden from putting any content inside the tag.

8
00:00:33,350 --> 00:00:37,160
And in fact the tag itself even looks very different.

9
00:00:37,160 --> 00:00:43,490
So this is a horizontal rule element and you can see that it starts out with an angle bracket, ends

10
00:00:43,490 --> 00:00:44,660
with an angle bracket,

11
00:00:44,660 --> 00:00:51,320
but then right here, there is this forward slash just before the end of the tag.

12
00:00:51,410 --> 00:00:58,520
You might think this looks a bit like the closing tag of a normal HTML element, but it's actually subtly

13
00:00:58,520 --> 00:01:07,500
different, because here in the closing tag, that forward slash is just after the opening angle bracket.

14
00:01:07,500 --> 00:01:10,680
It's right here in front of the letter.

15
00:01:10,710 --> 00:01:17,760
Whereas in the void elements, the forward slash is actually just before the end of the tag.

16
00:01:17,850 --> 00:01:23,910
And normally by convention, you'll see a little space here as well between the tag name and also that

17
00:01:23,910 --> 00:01:25,170
forward slash.

18
00:01:25,710 --> 00:01:28,740
This is just something to be really careful about

19
00:01:28,740 --> 00:01:31,560
when you're creating these void elements.

20
00:01:31,560 --> 00:01:38,400
Make sure that you've got the forward slash, slashing in the right direction so this way and not a backslash

21
00:01:38,400 --> 00:01:39,150
like this.

22
00:01:39,150 --> 00:01:47,700
So when it points to the right, then it's a forward slash and when it points backwards, then it's

23
00:01:47,700 --> 00:01:49,020
a backslash.

24
00:01:49,770 --> 00:01:55,020
So what does this look like when we add it to a HTML document?

25
00:01:55,050 --> 00:02:02,250
Well, here we've got our previous two paragraphs and right in between the two paragraphs I've added

26
00:02:02,250 --> 00:02:10,860
a horizontal rule which will hopefully help us divide the content to show that this part is not related

27
00:02:10,860 --> 00:02:11,670
to this part

28
00:02:11,670 --> 00:02:18,840
and we've got some sort of separation in between. When we run this code or when we view it in a web browser,

29
00:02:18,840 --> 00:02:20,130
this is what you would see.

30
00:02:20,160 --> 00:02:25,560
You would see the first paragraph, the second paragraph, and then you would see this horizontal rule

31
00:02:25,560 --> 00:02:31,920
or basically, a horizontal line where the "hr" element would be in that document.

32
00:02:32,130 --> 00:02:35,970
Now the horizontal rule is not the only void element.

33
00:02:36,000 --> 00:02:38,910
Another common one you'll see is the break element.

34
00:02:38,910 --> 00:02:40,650
And it looks like this.

35
00:02:40,680 --> 00:02:47,670
Now, similarly, again, we've got the name of the tag and then we've got that forward slash and then

36
00:02:47,670 --> 00:02:50,190
we basically end the tag.

37
00:02:50,190 --> 00:02:51,810
So there is no opening tag.

38
00:02:51,810 --> 00:02:53,040
There is no closing tag.

39
00:02:53,040 --> 00:02:56,580
There is only a single tag that looks like this,

40
00:02:56,580 --> 00:03:01,650
and the name of the tag goes right before the forward slash.

41
00:03:01,770 --> 00:03:04,800
Now, how does the break element work?

42
00:03:05,280 --> 00:03:11,220
Well, it's really useful when you have things where you need to separate things onto separate lines

43
00:03:11,220 --> 00:03:13,440
in order to have the correct meaning.

44
00:03:13,470 --> 00:03:21,240
For example, if you have poems, they are in fact meant to be in the same paragraph, but they should

45
00:03:21,240 --> 00:03:27,900
really each be on different lines in order to make the rhyming work or in order to make the structure

46
00:03:27,900 --> 00:03:29,370
of the poem correct.

47
00:03:29,400 --> 00:03:34,350
So this is a poem from one of my favorite poets, William Blake

48
00:03:34,350 --> 00:03:42,840
and in order for it to work, we can't have it all run in one line, even if it's in the same paragraph.

49
00:03:42,930 --> 00:03:49,980
If we had this code right here, even though yes, it is all in the same paragraph, it is all related

50
00:03:49,980 --> 00:03:52,920
to each other and this does make sense,

51
00:03:52,920 --> 00:03:54,960
but you don't look at poetry like this.

52
00:03:54,960 --> 00:03:56,250
It doesn't really work.

53
00:03:56,250 --> 00:04:00,270
We don't know where we're supposed to breathe and how we're supposed to read out the poem.

54
00:04:00,270 --> 00:04:04,350
So instead we can add our break elements that we just learned about.

55
00:04:04,590 --> 00:04:11,820
Our void element doesn't have any content in it, but it just shows where the breaks in this paragraph

56
00:04:11,820 --> 00:04:14,880
has to go in order for this poem to look right.

57
00:04:14,880 --> 00:04:19,110
And when this HTML document is rendered, this is what you'll see.

58
00:04:19,140 --> 00:04:21,410
A perfect layout for a poem.

59
00:04:21,420 --> 00:04:25,230
To see a World in a Grain of Sand And Heaven in a Wild Flower,

60
00:04:25,260 --> 00:04:29,970
Hold Infinity in the palm of your hand And Eternity in an hour.

61
00:04:30,390 --> 00:04:39,060
And it's all beautifully formatted thanks to each of our break elements at the end of each line.

62
00:04:39,540 --> 00:04:45,120
So now it's your turn to try an exercise using these void elements.

63
00:04:45,120 --> 00:04:53,160
So go ahead and download the starting files for this exercise from the course resources for this lesson,

64
00:04:53,700 --> 00:04:59,610
and when you've extracted it and opened it up, this is what you should see in the index.html.

65
00:05:00,960 --> 00:05:07,170
We've got the name of our poet, William Blake, and this is apparently his real address that he lived

66
00:05:07,170 --> 00:05:08,900
at at some point in life.

67
00:05:08,910 --> 00:05:14,160
And then we've got two paragraphs from Wikipedia which briefly describes the poet.

68
00:05:14,160 --> 00:05:20,790
And I want you to use everything you've learned so far in order to format this HTML document so that it will

69
00:05:20,790 --> 00:05:24,480
look like the goal that I've got right here for you.

70
00:05:24,600 --> 00:05:31,200
As you can see, this top-level, the name of our poet is going to be rendered as an h1, because

71
00:05:31,200 --> 00:05:35,450
that is the most important thing about this particular web page.

72
00:05:35,460 --> 00:05:40,800
And then we've got the address of the poet, which is rendered as a paragraph,

73
00:05:40,800 --> 00:05:47,520
but notice that addresses, even though they are a single paragraph, they again need to be broken up

74
00:05:47,520 --> 00:05:50,670
into separate lines using our break element.

75
00:05:50,670 --> 00:05:58,380
And then finally, we've got a horizontal rule that separates the address and the name of the author

76
00:05:58,380 --> 00:06:04,960
from the little bit of description of this author, which should sit in two separate paragraphs.

77
00:06:04,990 --> 00:06:12,720
Now I want you to pause the video and edit the index.html so you end up with this goal PNG,

78
00:06:13,000 --> 00:06:19,930
when you preview this website instead of this jumbled block of text that we have at the moment.

79
00:06:20,650 --> 00:06:24,430
Pause the video now and give this challenge a go.

80
00:06:26,080 --> 00:06:26,620
All right.

81
00:06:26,620 --> 00:06:31,060
So hopefully you've given it a go and everything worked out.

82
00:06:31,720 --> 00:06:33,850
I'm going to run through the solution.

83
00:06:33,850 --> 00:06:41,200
So first we said we were going to have an h1 for his name, and then we're going to have a paragraph

84
00:06:41,200 --> 00:06:44,390
tag that encloses the address.

85
00:06:44,410 --> 00:06:52,240
Now, in order to have that address on different lines, we're going to add our break element to the

86
00:06:52,240 --> 00:06:53,860
end of each line.

87
00:06:53,860 --> 00:06:57,730
And remember, our break element is a self-closing tag.

88
00:06:57,730 --> 00:07:02,110
So we're going to create it like like so.

89
00:07:02,350 --> 00:07:09,340
Now I'm going to go ahead and simply copy and paste it to the end of each line and you can see how nicely

90
00:07:09,340 --> 00:07:11,710
our address is now formatted.

91
00:07:11,710 --> 00:07:19,240
And finally, we wanted these two paragraphs at the end to be separated.

92
00:07:19,240 --> 00:07:22,750
So I'm going to go ahead and simply do that.

93
00:07:22,870 --> 00:07:26,890
And now we are pretty much golden.

94
00:07:28,840 --> 00:07:31,960
We've achieved our goal output.

95
00:07:31,990 --> 00:07:38,380
We've got our h1, our address separated, and the only thing we need to do is to add that horizontal

96
00:07:38,380 --> 00:07:42,340
rule between the address and the two paragraphs.

97
00:07:42,370 --> 00:07:46,690
Let's go ahead and add the other void element that we learned about.

98
00:07:46,690 --> 00:07:52,960
And now we've completed the challenge and you can check yourself against the solution to make sure that

99
00:07:52,960 --> 00:07:56,530
everything that you did looks exactly the same.

100
00:07:56,680 --> 00:08:03,940
Now, a neat trick I like to use is to simply copy the solution and go to diffchecker.com, paste in

101
00:08:03,940 --> 00:08:05,470
the solution code,

102
00:08:06,620 --> 00:08:12,710
and then paste your code and then go ahead and click find difference.

103
00:08:12,770 --> 00:08:18,320
And it should highlight all the places that are different in case you've misspelled something or you've

104
00:08:18,320 --> 00:08:19,370
done something wrong.

105
00:08:19,370 --> 00:08:26,360
So for example, in this case, in our version, there is a space after the word Blake and the closing

106
00:08:26,390 --> 00:08:30,830
tag, which in terms of HTML will not make any difference.

107
00:08:30,980 --> 00:08:41,030
But had I instead maybe written the h1 incorrectly and I didn't write the h for the closing tag, then

108
00:08:41,030 --> 00:08:45,560
you can see our output looks completely different and we're looking through all of this text.

109
00:08:45,560 --> 00:08:51,590
We don't know why it's happened, so we go ahead and copy it and then diff it to the solution.

110
00:08:51,590 --> 00:09:00,770
And it should highlight the fact that that is incorrect and we should now be alerted to check the difference.

111
00:09:01,070 --> 00:09:04,490
That's one tip that I have for you today.

112
00:09:04,940 --> 00:09:13,800
And let me just go back to our index.html fix this bug and we should now be ready to go.

113
00:09:14,690 --> 00:09:22,340
Now in terms of do's and don'ts with void elements, sometimes you see people doing is they add a break

114
00:09:22,370 --> 00:09:28,010
tag to add a new line instead of creating a separate paragraph element.

115
00:09:28,040 --> 00:09:34,040
Now, this is not what you want to do because this is not very good for accessibility, which means

116
00:09:34,040 --> 00:09:40,630
it'll make it harder for blind users with screen readers to understand the content on your website.

117
00:09:40,640 --> 00:09:47,570
So I recommend you always create new paragraph elements when you have new paragraphs and use the break

118
00:09:47,570 --> 00:09:54,110
element only when there is some sort of reason why you would want to separate the different lines in

119
00:09:54,110 --> 00:09:55,220
a single paragraph,

120
00:09:55,220 --> 00:10:01,580
but it still is a single paragraph such as in the case of a poem or in the case of an address that we

121
00:10:01,610 --> 00:10:03,140
covered in this lesson.

122
00:10:03,830 --> 00:10:11,120
Now, the final thing to mention is that sometimes when you look at the horizontal rule element or the

123
00:10:11,120 --> 00:10:14,340
break element, you might see it represented

124
00:10:14,340 --> 00:10:21,240
without this final closing tag, you might see people simply write this, and this is perfectly valid

125
00:10:21,450 --> 00:10:21,950
HTML.

126
00:10:21,960 --> 00:10:26,940
So you could in fact have a horizontal rule that looks like this.

127
00:10:26,970 --> 00:10:34,620
You could have a break element that looks like this instead of the one with the forward slash at the

128
00:10:34,620 --> 00:10:35,190
end.

129
00:10:35,190 --> 00:10:38,370
And these are both valid options.

130
00:10:38,370 --> 00:10:44,670
You could go for this or you could go for this. As of HTML5, the latest version of HTML,

131
00:10:44,700 --> 00:10:50,490
what it's starting to do is it's starting to ignore this forward slash at the end so it doesn't even

132
00:10:50,490 --> 00:10:51,120
look at it.

133
00:10:51,120 --> 00:10:57,330
It sees the first part and already knows that a break is a void element and a horizontal rule is a void

134
00:10:57,330 --> 00:10:57,900
element,

135
00:10:57,900 --> 00:11:00,300
so it doesn't actually need to keep reading.

136
00:11:00,420 --> 00:11:06,150
But I recommend to write your code with this end forward slash.

137
00:11:06,150 --> 00:11:11,820
And the reason is because when you read your code, you as the human, it will be much easier for you

138
00:11:11,820 --> 00:11:19,590
to see that this is a void element and it doesn't need a closing tag so that you don't end up being

139
00:11:19,590 --> 00:11:26,370
confused and you can identify the void elements and the non void elements easily and distinguish them

140
00:11:26,370 --> 00:11:27,240
from each other.

141
00:11:27,240 --> 00:11:34,260
So that's just a quick tip and something to alert you to when you see it written like this on the internet.

142
00:11:34,260 --> 00:11:35,850
Both versions are valid.

143
00:11:35,850 --> 00:11:39,720
You can pick and choose, but I recommend going with this version.

