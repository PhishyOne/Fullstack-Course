1
00:00:00,530 --> 00:00:06,470
All right, guys, it's time to use what we've learned about CSS grid to create a masterpiece.

2
00:00:06,500 --> 00:00:12,110
I want to introduce you to somebody who loves CSS grid probably more than anyone.

3
00:00:12,110 --> 00:00:14,330
And that is Piet Mondrian.

4
00:00:14,360 --> 00:00:21,080
He is a Dutch painter who has created masterpieces that you might have seen before.

5
00:00:21,200 --> 00:00:29,390
And they look like this one composition number three with red, blue, yellow and black, which is not

6
00:00:29,390 --> 00:00:35,240
a very creative name, but it is a beautiful painting, especially if you're really into grids, which

7
00:00:35,240 --> 00:00:36,020
he is.

8
00:00:36,020 --> 00:00:42,440
But also it seems like a lot of other people are, because this piece was auctioned off for a whopping

9
00:00:42,470 --> 00:00:45,650
$50.6 million.

10
00:00:45,740 --> 00:00:51,440
So I hope you're glad that you started this section and learn about CSS Grid too.

11
00:00:51,740 --> 00:00:58,130
Now, I've created a graphic that breaks down all of the dimensions of each of the elements in this

12
00:00:58,130 --> 00:00:58,940
grid.

13
00:00:58,940 --> 00:01:05,670
And I've measured it everything up with a ruler so that we can create a realistic to-scale version of

14
00:01:05,670 --> 00:01:08,220
this painting using CSS grid.

15
00:01:08,340 --> 00:01:14,010
If you want to create a different painting because he's created lots of these compositions and you don't

16
00:01:14,010 --> 00:01:16,770
want to use my measurements, that's totally cool as well.

17
00:01:16,770 --> 00:01:22,680
You can simply Google Image Search: "Mondrian compositions" and if you look in the images tab, you'll

18
00:01:22,680 --> 00:01:27,810
see a whole bunch of different ones that he created and you can pick one that you like.

19
00:01:27,810 --> 00:01:33,000
There are ones which are super complicated and there are ones which are really, really simple.

20
00:01:33,000 --> 00:01:38,970
But if you're doing it this way, then you'll probably have to judge by eye the sizes of the tracks,

21
00:01:38,970 --> 00:01:41,370
for example, the rows and the columns.

22
00:01:41,370 --> 00:01:46,830
But remember, this is a project, so it's totally up to you whether if you want to do the version that

23
00:01:46,830 --> 00:01:52,470
I've measured up for you or do a completely separate one or do both, or make lots and lots of different

24
00:01:52,470 --> 00:01:54,600
paintings, it's totally up to you.

25
00:01:54,810 --> 00:01:59,910
Go ahead and download the starting files for the Mondrian Project, and if you take a look inside the

26
00:01:59,910 --> 00:02:08,570
index.html, you'll see that I've added some of the hex codes for the colors in this image, and that

27
00:02:08,570 --> 00:02:12,440
way you can actually get a more realistic version of the painting.

28
00:02:12,440 --> 00:02:16,400
So everything should be pixel-perfect measured colors,

29
00:02:16,400 --> 00:02:24,230
and this is what you would end up with if you followed all of the colors in here and the dimensions

30
00:02:24,230 --> 00:02:25,280
in this

31
00:02:25,280 --> 00:02:25,970
dimensions.png.

32
00:02:26,630 --> 00:02:33,110
Using what you've learned about grid, either use my dimensions and colors to create this final goal

33
00:02:33,110 --> 00:02:37,010
website, which you'll notice is actually even centered on screen.

34
00:02:37,010 --> 00:02:38,660
So think about how you might do that.

35
00:02:38,660 --> 00:02:44,810
Or you can pick one of the other paintings, any of his paintings, and use CSS grid to see if you can

36
00:02:44,810 --> 00:02:47,030
figure out how to recreate it,

37
00:02:47,030 --> 00:02:48,740
but in a website.

38
00:02:48,890 --> 00:02:52,310
Pause the video now and give this project a go.

39
00:02:55,760 --> 00:02:56,090
All right.

40
00:02:56,090 --> 00:03:01,160
So the first thing you'll notice is that there's no HTML written for you and there's no CSS.

41
00:03:01,160 --> 00:03:04,670
So you're going to have to write everything completely yourself.

42
00:03:04,700 --> 00:03:12,230
If we take a look at our solution, you can see that we've created as many divs as there are squares

43
00:03:12,230 --> 00:03:13,350
on the painting.

44
00:03:13,370 --> 00:03:21,320
If I go ahead and Show Preview and I open this up as a website, you'll see this is our final solution

45
00:03:21,320 --> 00:03:25,570
code masterpiece, which I actually think looks really, really pleasant.

46
00:03:25,580 --> 00:03:30,050
I may just print out a copy and put it on my wall because it is really beautiful.

47
00:03:30,350 --> 00:03:39,500
If we look at this, there's one, two, three, four, five, six, seven, eight, nine divs in total.

48
00:03:39,590 --> 00:03:44,990
And that's exactly how many I've added into the CSS grid container.

49
00:03:45,020 --> 00:03:51,290
Now, because some of them are different colors, I've added some classes onto them, but most of the

50
00:03:51,290 --> 00:03:54,680
layout actually occurs in the container class.

51
00:03:54,900 --> 00:04:01,710
I specified a height and width according to the dimensions in the dimensions image and then set it to

52
00:04:01,710 --> 00:04:03,210
display grid.

53
00:04:03,240 --> 00:04:09,930
Now I gave the whole thing a background color because remember I said we can't actually change the color

54
00:04:09,930 --> 00:04:16,950
of the lines, but we can create a gap so that the background actually shows up.

55
00:04:17,070 --> 00:04:19,220
That's a little trick that I figured out.

56
00:04:19,230 --> 00:04:23,370
There's probably other ways of doing this, but hopefully you've seen that hint from me,

57
00:04:23,370 --> 00:04:25,710
and if you didn't, maybe you've worked it out yourself.

58
00:04:25,920 --> 00:04:32,640
Next, I created the columns and the rows and specified fixed sizes because these dimensions are super

59
00:04:32,640 --> 00:04:33,150
crazy

60
00:04:33,150 --> 00:04:37,200
and basically I looked at all of the different columns.

61
00:04:37,200 --> 00:04:39,570
So this is column Number one's width.

62
00:04:39,570 --> 00:04:46,740
This is column Number 2, Number 3 and Number 4, four columns in total, because these are

63
00:04:46,740 --> 00:04:48,750
actually going to be two different items.

64
00:04:48,750 --> 00:04:51,600
So I had to split this into two columns.

65
00:04:51,600 --> 00:04:55,920
And this spans two columns and this spans three columns.

66
00:04:55,920 --> 00:04:58,860
That's how I figured it out. Row-wise,

67
00:04:58,860 --> 00:05:04,170
we've got one row here, another one here, another one here, and finally the last one here.

68
00:05:04,170 --> 00:05:06,480
So four rows and four columns.

69
00:05:06,600 --> 00:05:13,140
And then I specified a gap of 9px, which will show up as the black lines.

70
00:05:13,500 --> 00:05:20,850
And then I gave everything by default, the background color of the white and each individual item,

71
00:05:20,850 --> 00:05:25,830
if they were colored differently, I would give them the colors that they needed. Based on the positioning

72
00:05:25,830 --> 00:05:26,580
of some of these,

73
00:05:26,580 --> 00:05:31,650
for example, this big white block actually needs to span three columns,

74
00:05:31,650 --> 00:05:38,940
so these 3 columns and I use the grid-column property to create that look.

75
00:05:38,940 --> 00:05:48,090
And then the second white one, spans 2rows vertically because we have these 4 rows. Taking up these

76
00:05:48,090 --> 00:05:54,510
two is a grid-row: span 2 job. For the third white cube,

77
00:05:54,510 --> 00:05:59,640
I decided to use a grid area because it seemed easier to define, but you might have used something

78
00:05:59,640 --> 00:06:00,270
else.

79
00:06:00,270 --> 00:06:03,810
And the rest of the solution code should be pretty straightforward.

80
00:06:03,840 --> 00:06:06,150
Now hopefully you managed to achieve this.

81
00:06:06,180 --> 00:06:13,920
This involved a little bit of remembering how we size our grid tracks, how we lay out and position

82
00:06:13,920 --> 00:06:16,050
our items in our grid container,

83
00:06:16,050 --> 00:06:22,740
and finally, how to center an item inside the middle of the screen using Flexbox.

84
00:06:23,310 --> 00:06:26,190
Hopefully you managed to figure out all of these things.

85
00:06:26,190 --> 00:06:31,860
If not, be sure to review the relevant pieces of content in this section.

86
00:06:31,860 --> 00:06:38,190
And now you should know how to use Flexbox, how to use grid and how to use them together in order to

87
00:06:38,190 --> 00:06:42,540
create beautiful masterpieces, but also complex web layouts.

88
00:06:42,540 --> 00:06:45,690
So hope you had fun in this section and I'll see you in the next one.

