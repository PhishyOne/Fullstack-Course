1
00:00:00,560 --> 00:00:08,630
Now, one of the most important things to figure out using Grid is how to size our columns and rows

2
00:00:08,630 --> 00:00:11,060
to conform to our design.

3
00:00:11,570 --> 00:00:20,030
If we start out with a grid-container that has four grid items like this and we go ahead and add some

4
00:00:20,030 --> 00:00:24,950
CSS, so we create some template-rows and template-columns,

5
00:00:24,950 --> 00:00:34,250
and in this case, we're defining the rows and columns by giving them fixed sizes 100px and 200px

6
00:00:34,250 --> 00:00:38,210
rows, 400 and 800px columns.

7
00:00:38,210 --> 00:00:42,920
So when we run this code, this is what we will end up with.

8
00:00:43,070 --> 00:00:52,310
We have 100px high for the first row and 200px high for the second row.

9
00:00:52,610 --> 00:01:01,680
For the first column we said it would be 400 and the second column should be twice as wide at 800.

10
00:01:02,220 --> 00:01:10,530
The thing you have to realize about the fixed size grids like this one is they are not responsive.

11
00:01:10,770 --> 00:01:18,750
That means that if you go ahead and change the width or the height, it's not going to change at all.

12
00:01:18,750 --> 00:01:23,370
It's going to stay fixed to these sizes that you have specified.

13
00:01:24,210 --> 00:01:29,070
In addition to using pixels, we can also use rem.

14
00:01:29,070 --> 00:01:34,050
So you could use the 1rem and then maybe 2rem.

15
00:01:34,080 --> 00:01:41,250
Now this is still fixed because the rem sizing, as we learned in previous lessons, is relative to

16
00:01:41,250 --> 00:01:43,820
the root of your HTML.

17
00:01:43,830 --> 00:01:51,150
If your body has a certain size or your HTML has a certain size specified and you change that size,

18
00:01:51,150 --> 00:01:54,240
then the rem size will go up and down with it,

19
00:01:54,390 --> 00:01:59,520
but this does not make it responsive to the screen size.

20
00:01:59,760 --> 00:02:08,880
Now another way you might see this being represented is instead of having grid-template-rows and

21
00:02:08,910 --> 00:02:18,480
grid-template-columns is you can combine the two of these into one property, which is just called grid-template.

22
00:02:18,540 --> 00:02:27,990
And you define all of your rows first and then you add a forward slash (/) and then you define your columns.

23
00:02:28,290 --> 00:02:34,440
So if you had a lot of grids to define, if you had a lot of things and you wanted this shorthand,

24
00:02:34,470 --> 00:02:36,090
this is how you would do it.

25
00:02:36,300 --> 00:02:43,230
I don't recommend us to write code like this at this stage because I think it's much better when you're

26
00:02:43,230 --> 00:02:48,930
learning for everything to be more explicit so that when you're reviewing your code and you're trying

27
00:02:48,930 --> 00:02:54,270
to spot problems, it's much easier when you've got the rows defined and your columns defined and you

28
00:02:54,270 --> 00:02:56,130
can see exactly what's going wrong.

29
00:02:56,400 --> 00:03:00,330
This just makes it a little bit more hidden as to what's going on.

30
00:03:00,330 --> 00:03:03,090
But it's really important for you to know this,

31
00:03:03,120 --> 00:03:07,950
if you see it in the wild in other people's code so you know what's going on.

32
00:03:08,720 --> 00:03:16,250
Another way that we can define our grid-template-rows and columns is to use this "auto" keyword.

33
00:03:16,370 --> 00:03:21,140
Now, what this is going to do is it's going to give us a little bit of responsiveness.

34
00:03:21,380 --> 00:03:30,320
Each row is going to try and fit to 100% of the horizontal available space.

35
00:03:30,500 --> 00:03:38,420
If this was your browser window, maybe it would look something like this,

36
00:03:38,420 --> 00:03:42,060
and then you've got your window size like this,

37
00:03:42,080 --> 00:03:47,960
then your grid is automatically going to try and take up 100% of that width.

38
00:03:48,600 --> 00:03:58,380
So now if you go ahead and define your first column as 200px wide.

39
00:03:59,560 --> 00:04:01,110
Like what we have here.

40
00:04:01,120 --> 00:04:04,660
And then you say the next column should be auto,

41
00:04:04,690 --> 00:04:09,310
what this means is the second column is going to be extensible.

42
00:04:09,340 --> 00:04:15,520
It can be as wide or as narrow as it needs in order to take up 100% of the width.

43
00:04:15,760 --> 00:04:21,040
Now, be careful here, because if you do the same thing with the rows, it doesn't behave like what

44
00:04:21,040 --> 00:04:22,270
you might think it does.

45
00:04:22,300 --> 00:04:27,700
It doesn't try to take up 100% of your screen's height.

46
00:04:27,880 --> 00:04:33,160
Instead, what it does is it tries to fit to the content.

47
00:04:33,280 --> 00:04:41,770
If this is set in this case, it's 100px, then that div is 100px,

48
00:04:41,890 --> 00:04:48,430
now, this one, however, is not set in height and it's just given to be auto.

49
00:04:48,460 --> 00:04:53,950
Now, what that's going to do is it's just going to try and fit whatever content is in there.

50
00:04:53,950 --> 00:04:57,140
And in this case, it's this number 3.

51
00:04:57,160 --> 00:05:03,080
So as long as number 3 fits in there perfectly, then it will automatically adjust the height to

52
00:05:03,080 --> 00:05:03,830
fit that.

53
00:05:03,830 --> 00:05:10,700
So just be aware that when you use auto on a row, it's going to fit content.

54
00:05:12,900 --> 00:05:19,680
And when you use auto on a column, then it's going to try and go to 100%.

55
00:05:20,730 --> 00:05:25,890
This is another case where it's quite good to play around with an actual example.

56
00:05:25,890 --> 00:05:32,250
So I've created a demo website for you at appbrewery.github.io/grid-sizing.

57
00:05:32,250 --> 00:05:36,660
And here we've got a menu of different ways of sizing Grid.

58
00:05:36,690 --> 00:05:43,770
You've seen the fixed size where the grid is not responsive at all to the size of the screen.

59
00:05:43,770 --> 00:05:47,040
It doesn't matter how wide or how narrow it is.

60
00:05:47,160 --> 00:05:50,940
And then we've got the auto size that I showed you just now.

61
00:05:51,030 --> 00:06:00,000
This first column, as we said, has to be 200px wide, but then the second column is set to auto.

62
00:06:00,000 --> 00:06:06,990
So it's shrinking as I'm shrinking my screen and it's expanding as I expand my screen.

63
00:06:06,990 --> 00:06:13,770
But even though the second row is also set to auto, it only is high enough to fit the content and it

64
00:06:13,770 --> 00:06:16,770
doesn't grow and shrink with the size of the screen.

65
00:06:16,770 --> 00:06:23,050
So have a play around with that and come back and we'll talk more about the next one, which is Fractional

66
00:06:23,050 --> 00:06:23,860
Sizing.

67
00:06:24,790 --> 00:06:33,700
Frequently what you might want in your layout is to define the different areas of your layout with ratios

68
00:06:33,700 --> 00:06:34,780
for sizes.

69
00:06:35,080 --> 00:06:43,360
Maybe you would want the first row to be half the size of the second row and maybe you would want your

70
00:06:43,360 --> 00:06:45,880
columns in the same way.

71
00:06:46,210 --> 00:06:55,450
This is where the fractional unit comes in with the "fr", and this unit basically defines the ratios.

72
00:06:55,600 --> 00:06:58,540
If we run this code, this is what we would get.

73
00:06:58,690 --> 00:07:04,990
This first row is half the size of the second row,

74
00:07:05,140 --> 00:07:11,680
and similarly, this first column is half the size of the second column.

75
00:07:11,980 --> 00:07:15,100
You can of course go for any sort of fractions you want.

76
00:07:15,130 --> 00:07:23,380
You could have the first row be 1fr and the second one be 2.5 fr, or you could have the first column

77
00:07:23,410 --> 00:07:30,550
be 3fr and the second one be 5fr, any sort of ratios you want essentially.

78
00:07:30,550 --> 00:07:39,220
And what it's going to do is it's going to grow and shrink depending on the width available for the

79
00:07:39,220 --> 00:07:43,180
horizontal and also the content size for the vertical.

80
00:07:43,540 --> 00:07:49,420
Again, going back to our demo, if you take a look at the fractional size, you can see that no matter

81
00:07:49,420 --> 00:07:56,140
how much I shrink my screen, the first column is always going to try and stay half the size of the

82
00:07:56,140 --> 00:07:57,310
second column.

83
00:07:57,310 --> 00:08:05,830
And if I go ahead and select this and then inspect and I add a whole bunch of content to this bit of

84
00:08:06,040 --> 00:08:06,670
HTML.

85
00:08:06,670 --> 00:08:12,940
So let's say instead of 3, I just add a whole bunch of text like this,

86
00:08:12,970 --> 00:08:20,890
then you can see that the first row expands as well, and it's all done just so that we maintain

87
00:08:20,890 --> 00:08:27,040
that fractional ratio, so that this one is always half the size of this one.

88
00:08:27,460 --> 00:08:33,039
So have a play around with this example and then we'll talk about the minmax size.

89
00:08:34,429 --> 00:08:41,090
Sometimes you want to define how your Grid is responsive, especially on the horizontal.

90
00:08:41,210 --> 00:08:49,940
One of the functions we can use is called minmax, and here we can define the minimum width and the

91
00:08:49,940 --> 00:08:53,660
maximum width we want our column to be.

92
00:08:53,840 --> 00:08:56,960
This is what it might look like. In this case,

93
00:08:56,960 --> 00:09:05,750
what we're saying is that when we have enough space on the horizontal, we want to give this second

94
00:09:05,750 --> 00:09:17,900
column more space so it can go all the way up to 800px and all the way down to 400px wide.

95
00:09:17,900 --> 00:09:23,000
And this essentially sets a limit because sometimes we have certain types of content.

96
00:09:23,030 --> 00:09:29,330
We don't want it to be too narrow like an image or we don't want it to be too wide because it might

97
00:09:29,330 --> 00:09:30,590
change the scaling.

98
00:09:30,590 --> 00:09:35,220
So this is another way of limiting the size of columns inside your grid.

99
00:09:35,550 --> 00:09:42,720
Right now you can see that this second column here is 800px wide

100
00:09:43,780 --> 00:09:45,760
from edge to edge.

101
00:09:46,210 --> 00:09:49,870
If I go ahead and reduce the size of this,

102
00:09:49,870 --> 00:09:57,640
so if I go ahead and make this window a little bit smaller, you'll see that second column being responsive,

103
00:09:57,640 --> 00:10:01,540
reducing in size until it will refuse.

104
00:10:01,630 --> 00:10:06,520
And that is because it's hit 400px right here.

105
00:10:06,640 --> 00:10:15,400
We're essentially setting a stop at 400px and another at 800px to further define how we want

106
00:10:15,400 --> 00:10:17,380
our website to be responsive.

107
00:10:18,540 --> 00:10:26,910
Remember previously, when we created our chess board, we had to write 1fr, 1fr, 1fr eight times,

108
00:10:26,910 --> 00:10:29,340
and that's a lot of repetition.

109
00:10:29,340 --> 00:10:35,460
And remember, we're programmers, so we're inherently lazy and we want to save ourselves work.

110
00:10:35,550 --> 00:10:39,510
We can do that in grid by using the repeat function.

111
00:10:39,510 --> 00:10:44,670
So we're saying repeat this size this many times.

112
00:10:44,670 --> 00:10:49,860
This is how many times you want to repeat it, and this is the size.

113
00:10:50,190 --> 00:10:53,330
And similarly with our columns, we can do the same thing.

114
00:10:53,340 --> 00:11:01,920
What this is equivalent to is defining the rows as 200px space, 200px,

115
00:11:01,920 --> 00:11:09,060
and for our columns, this code is the same as saying 100px, space 100px,

116
00:11:09,060 --> 00:11:11,550
but we didn't have to write all of that out.

117
00:11:11,550 --> 00:11:18,550
And as you can imagine, if the repeat was eight or 10 or 100, that's going to save you a lot of time.

118
00:11:18,640 --> 00:11:26,830
And as you would expect, this would create exactly the same layout as if you had defined the size of

119
00:11:26,830 --> 00:11:29,290
each column and each row.

120
00:11:29,320 --> 00:11:30,850
It works exactly the same,

121
00:11:30,850 --> 00:11:32,680
it's just time saving.

122
00:11:32,680 --> 00:11:37,990
Now, what if you defined a Grid that is larger than you have items for?

123
00:11:37,990 --> 00:11:46,900
So here you can see in our HTML we have four items, but here we're creating a two by three grid.

124
00:11:47,500 --> 00:11:50,740
So we have two rows and three columns.

125
00:11:50,830 --> 00:11:58,570
If we only have four items, they're fitted into our grid from the top left all the way to the bottom

126
00:11:58,570 --> 00:11:59,080
right.

127
00:11:59,080 --> 00:12:06,670
So that means once we've laid out the first row, it's going to double back and continue along the second

128
00:12:06,670 --> 00:12:07,270
row.

129
00:12:07,270 --> 00:12:15,370
But if we don't have any items for number 5 and number 6, then it's just not going to add them

130
00:12:15,370 --> 00:12:15,880
in there,

131
00:12:15,880 --> 00:12:18,480
and you have this style of layout.

132
00:12:18,480 --> 00:12:23,850
Now what happens if you don't define enough rows and columns?

133
00:12:23,850 --> 00:12:31,590
So in this case, we're defining a 2*2 grid with each item being 200px tall and wide.

134
00:12:31,680 --> 00:12:41,190
Now I've added in a third div, Item number 5, because that doesn't fit within the templated row and

135
00:12:41,190 --> 00:12:44,250
column, which is only 2*2.

136
00:12:44,280 --> 00:12:48,030
So this is the defined template grid.

137
00:12:48,060 --> 00:12:56,040
Well then anything that gets added afterwards will get an automatic size based on its height and also

138
00:12:56,040 --> 00:12:58,260
any existing column sizes.

139
00:12:58,260 --> 00:13:05,850
So it will try to match the previous columns width, but it will try to fit the height to the height

140
00:13:05,880 --> 00:13:07,140
of the content.

141
00:13:07,260 --> 00:13:14,940
If you want to change this, let's say you have some code that will create more divs in the future,

142
00:13:14,940 --> 00:13:19,120
or maybe you have a game that's going to add more squares, something like that,

143
00:13:19,120 --> 00:13:24,490
you can actually use the grid-auto-rows and grid-auto-columns to define this.

144
00:13:24,490 --> 00:13:32,200
So in this case, I'm saying when we create a new row that doesn't fit within our grid because our grid

145
00:13:32,200 --> 00:13:37,810
actually ends here, then give each of them 300px in height.

146
00:13:37,930 --> 00:13:45,220
And this just allows you to control your styling no matter how many items gets added to the grid.

147
00:13:45,870 --> 00:13:52,620
This is a good time to go back to our demo and click on the repeat title to see our repeated grid.

148
00:13:52,650 --> 00:14:00,270
As you might imagine, this is a very simple grid which is repeated by having 2 rows which are 200px

149
00:14:00,270 --> 00:14:03,330
each and two columns which are 100px each.

150
00:14:03,510 --> 00:14:10,800
If I go ahead and change this so that I have 3 columns, then you can see we have that layout we

151
00:14:10,800 --> 00:14:17,430
had before where we've got some missing items, but it's only going to lay out as many items as we have

152
00:14:17,430 --> 00:14:18,630
in our HTML.

153
00:14:18,780 --> 00:14:25,890
Similarly, if I change this to only 1 column, then we've got some extra items that are not defined

154
00:14:25,890 --> 00:14:29,190
using our template rows and columns, which is a two-by-one.

155
00:14:29,190 --> 00:14:36,300
So two rows, one column and all these extra ones get an automatic size based on the size of their content.

156
00:14:36,360 --> 00:14:42,660
But we can of course change this by using that property we learned, which is grid-auto-rows,

157
00:14:42,900 --> 00:14:50,440
and if we set this to be say, 300px, then you can see every new automatically added item gets

158
00:14:50,440 --> 00:14:51,940
that particular height.

159
00:14:52,630 --> 00:14:58,450
Have a play around with this and once you're done, I want you to come back and I want to talk more

160
00:14:58,450 --> 00:15:04,510
about how we can use the Chrome Developer Tools to investigate and debug our CSS Grid.

161
00:15:05,080 --> 00:15:11,590
As you can imagine, as we're fiddling around with Flexbox or Grid, it can be quite hard to know exactly

162
00:15:11,590 --> 00:15:13,660
what's happening behind the scenes.

163
00:15:13,660 --> 00:15:18,730
So we're going to learn more about how we can use the Chrome Developer Tools to see exactly what's going

164
00:15:18,730 --> 00:15:21,340
on in our CSS Grid.

165
00:15:21,670 --> 00:15:27,670
As you remember, you can bring up the Chrome Developer Tools either by right-click to go to inspect

166
00:15:27,670 --> 00:15:33,930
or simply to go to the three dots, go to More Tools and then go to Developer Tools.

167
00:15:33,940 --> 00:15:35,740
It will do exactly the same thing.

168
00:15:35,740 --> 00:15:37,810
Basically bring up this panel.

169
00:15:38,080 --> 00:15:42,700
One of the cool things that you'll see is when you have defined a grid.

170
00:15:42,700 --> 00:15:48,730
So this is when you set display grid onto a particular item in your HTML.

171
00:15:48,790 --> 00:15:54,100
In the Chrome Developer Tools, you see this little chip show up and it says "grid".

172
00:15:54,280 --> 00:16:00,430
If you click on it, it will offer you a whole bunch of information, which is really handy.

173
00:16:01,000 --> 00:16:07,900
Now we can change the layout of the overlaid stuff by going into Layout here,

174
00:16:07,900 --> 00:16:14,650
and you can see, for example, if I don't want to have a pink sort of outline, let me change this

175
00:16:14,650 --> 00:16:15,760
to black.

176
00:16:15,790 --> 00:16:18,340
Then you can see it maybe a little bit more clearly.

177
00:16:18,370 --> 00:16:26,530
I can also change whether if we show each of the sizes of the columns and the rows or if I want to extend

178
00:16:26,530 --> 00:16:33,790
the grid lines to see what's happening or if I want to show the line numbers, I can basically show

179
00:16:33,790 --> 00:16:35,590
and hide all of these things.

180
00:16:35,590 --> 00:16:40,900
But normally by default, you'll see the line numbers and you'll see the sizes of the rows and the columns.

181
00:16:41,230 --> 00:16:41,800
Here,

182
00:16:41,800 --> 00:16:46,690
if we look at the first number, you can see that each of the columns are 100px wide,

183
00:16:46,690 --> 00:16:52,480
and if we look at the first number for the second part, each of the rows are 200px high.

184
00:16:53,350 --> 00:16:59,260
So now that we've learned how to size items in our CSS Grid and use the Chrome Developer Tools to inspect

185
00:16:59,260 --> 00:17:05,530
and see exactly what's going on with our sizing, it's time for us to try an exercise.

186
00:17:05,680 --> 00:17:12,880
So I've created a Grid Sizing Exercise in the website and to access it, all you have to do is go back

187
00:17:12,880 --> 00:17:18,430
to the main menu of the grid sizing website and then go to the test page.

188
00:17:18,560 --> 00:17:23,329
So you can see this is the grid that we want you to recreate,

189
00:17:23,349 --> 00:17:31,330
and I've added in the width and height requirements to most of them.

190
00:17:31,720 --> 00:17:39,340
There's just a couple of things to note, which is how this website responds when we resize it.

191
00:17:39,460 --> 00:17:47,680
If I go ahead and reduce the width, you can see that the first column will expand to fill the space

192
00:17:47,680 --> 00:17:51,130
and reduce until a certain point.

193
00:17:51,490 --> 00:17:59,690
Now, when I continue reducing the size, you can see that the third column will also start to reduce

194
00:17:59,690 --> 00:18:00,710
in size,

195
00:18:01,160 --> 00:18:06,170
but the second column stays that particular fixed size always.

196
00:18:06,770 --> 00:18:16,640
The other thing to note is that our final item here is only 50px high, and it's actually even

197
00:18:16,640 --> 00:18:21,470
shorter than how much it should be allocated based on the content.

198
00:18:21,500 --> 00:18:26,120
So this is a grid item that's put in automatically.

199
00:18:27,080 --> 00:18:33,920
So now if you scroll down, you'll see the area that you're working with and right now it's just a div

200
00:18:33,920 --> 00:18:35,480
without any styling.

201
00:18:35,810 --> 00:18:40,010
I want you to go ahead and write your CSS code below.

202
00:18:40,040 --> 00:18:47,180
Only write code that is going to target the grid container, which is this gray box around all of our

203
00:18:47,180 --> 00:18:48,260
grid items.

204
00:18:48,260 --> 00:18:56,420
And I want your code to make this purple section exactly the same as the green section and also responsive

205
00:18:56,420 --> 00:18:58,310
in exactly the same way.

206
00:18:58,610 --> 00:18:59,630
Pause the video.

207
00:18:59,630 --> 00:19:03,230
Have a think about this problem, write your code and then click

208
00:19:03,230 --> 00:19:08,930
"Apply CSS" to see it applied and make sure to see that you've got the right code working.

209
00:19:09,260 --> 00:19:11,540
Pause the video now and give that a go.

210
00:19:15,690 --> 00:19:16,050
All right.

211
00:19:16,050 --> 00:19:22,620
So the first thing we need to do in order to create a grid is of course, set our display to grid,

212
00:19:22,620 --> 00:19:28,560
which is not going to do very much to our code because we need to set the template.

213
00:19:28,560 --> 00:19:34,260
So we're going to use our grid-template-rows.

214
00:19:34,830 --> 00:19:37,800
Now, how should our rows look?

215
00:19:37,800 --> 00:19:44,490
Well, if we look at this first row, it seems to be as high as is required to fit the content.

216
00:19:44,490 --> 00:19:49,620
And similar with the second one, they're exactly the same height, but the third one seems to be double

217
00:19:49,620 --> 00:19:51,120
the size of these two.

218
00:19:51,630 --> 00:19:59,730
So we can use our fractional units with 1fr, 1fr and 2fr to define our rows.

219
00:19:59,880 --> 00:20:04,410
Notice the third one is completely different from any of the other ones.

220
00:20:04,410 --> 00:20:08,700
If we look at the last row, you can see it's only 50px high,

221
00:20:08,790 --> 00:20:14,460
so we could, if we wanted to, to define it right here as a fourth row.

222
00:20:14,460 --> 00:20:19,960
But I'm actually going to leave it because I'm going to use the grid-auto-rows to set the height for

223
00:20:19,990 --> 00:20:20,680
that last one

224
00:20:20,680 --> 00:20:25,330
instead. Let's go ahead and apply our CSS and see what happens.

225
00:20:25,360 --> 00:20:28,330
First row is 1fr.

226
00:20:28,360 --> 00:20:30,010
Second row is 1fr.

227
00:20:30,010 --> 00:20:31,720
Third row is twice as high.

228
00:20:31,750 --> 00:20:33,580
Now, what about all of these other ones?

229
00:20:33,580 --> 00:20:35,740
Well, we need them to become columns.

230
00:20:36,220 --> 00:20:40,510
So let's define our grid-template-columns.

231
00:20:40,510 --> 00:20:47,980
And it's really important that we don't make any typos here because otherwise our code is not going

232
00:20:47,980 --> 00:20:48,640
to work.

233
00:20:48,640 --> 00:20:53,950
If you have any strange errors or anything that's not working, I want you to make sure that you check

234
00:20:53,950 --> 00:20:57,490
the spelling of each of these grid-template-rows.

235
00:20:57,490 --> 00:21:00,790
Remember, there's an S at the end and grid-template-columns.

236
00:21:00,790 --> 00:21:04,300
Make sure that you haven't spelt anything wrong because that happens a lot.

237
00:21:04,300 --> 00:21:07,030
And that's a really simple way to fix your problems.

238
00:21:07,480 --> 00:21:10,210
So how do we want our columns to be laid out?

239
00:21:10,300 --> 00:21:17,050
Well, this first one is going to expand to fill any available space,

240
00:21:17,050 --> 00:21:25,600
and even when it's hit the size of the content, it will continue to reduce until the minimum size.

241
00:21:26,080 --> 00:21:31,300
This is actually done using our auto value.

242
00:21:31,600 --> 00:21:37,750
So this is going to expand to fill any available space and shrink until it can no longer shrink.

243
00:21:37,780 --> 00:21:39,340
The second column is easy.

244
00:21:39,340 --> 00:21:48,310
It's a fixed 400px wide column and the final one has a minimum and maximum value so it can be defined

245
00:21:48,310 --> 00:21:54,730
using our minmax function, minimum 200px and maximum 500px.

246
00:21:55,180 --> 00:21:57,790
Let's create our three columns down here.

247
00:21:59,010 --> 00:22:03,060
auto: 400px and then minmax,

248
00:22:05,030 --> 00:22:07,610
200 and 500.

249
00:22:07,760 --> 00:22:14,870
Let's apply our CSS and we can see our purple ones are now looking pretty much the same as our green

250
00:22:14,870 --> 00:22:15,530
ones.

251
00:22:15,740 --> 00:22:23,300
And when we try to expand and contract our grid, you can see that it behaves exactly the same way in

252
00:22:23,300 --> 00:22:30,800
terms of responsiveness. For the final, final row it's being put in with the height

253
00:22:30,800 --> 00:22:33,050
that is enough to fit its content.

254
00:22:33,050 --> 00:22:41,930
But remember, we learned about this concept of the grid-auto-row so we could use grid-auto-rows...

255
00:22:43,920 --> 00:22:53,040
So again, we have an S at the end to define how high each new automatically created row that is outside

256
00:22:53,040 --> 00:22:54,610
of the template should be.

257
00:22:54,630 --> 00:22:57,030
So we can change that to 50px.

258
00:22:57,030 --> 00:23:04,770
And when we apply that, you can see that this which is outside our template grid, gets added in with

259
00:23:04,770 --> 00:23:06,690
50px of height.

260
00:23:07,890 --> 00:23:09,570
Hopefully you managed to do this.

261
00:23:09,600 --> 00:23:15,240
If you didn't go back and check to see if you have made any typos, any spelling mistakes,

262
00:23:15,240 --> 00:23:20,910
and with what we've spoken about in the solution, see if you can fix your code.

263
00:23:21,180 --> 00:23:26,100
Once you're ready, head over to the next lesson where we're going to learn more about how to place

264
00:23:26,100 --> 00:23:28,780
items inside a CSS Grid.

265
00:23:28,800 --> 00:23:31,920
So for all of that and more, I'll see you on the next lesson.

