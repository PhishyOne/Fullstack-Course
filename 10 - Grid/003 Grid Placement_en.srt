1
00:00:00,140 --> 00:00:05,750
In the previous lesson, we looked at how to create our grids and how to size them.

2
00:00:05,780 --> 00:00:11,870
In this lesson, we're going to talk about how to lay out items in the grid that we've created and how

3
00:00:11,870 --> 00:00:14,450
to place them in the areas that we want.

4
00:00:14,990 --> 00:00:22,460
Previously, we saw this layout when we said this is a really great layout to use CSS grid to create.

5
00:00:22,490 --> 00:00:30,210
So let's use CSS grid to create this layout by learning about how we place items in our grid.

6
00:00:30,230 --> 00:00:37,160
But before we do that, it's really important to define some of the terms that are used often in CSS

7
00:00:37,160 --> 00:00:37,820
grid.

8
00:00:38,240 --> 00:00:47,930
The first thing, if you remember, is we created a container that contains all of the items, and this

9
00:00:47,930 --> 00:00:53,720
is usually a div and it's called the Grid container.

10
00:00:54,580 --> 00:01:01,870
The items that are placed inside the grid are, as you would expect, called Grid items.

11
00:01:02,470 --> 00:01:13,090
And when we create and size our grid, we create these rows and we create these columns.

12
00:01:13,630 --> 00:01:17,890
Now, these are collectively known as Tracks.

13
00:01:18,730 --> 00:01:24,460
We have our Row tracks and we have our column tracks.

14
00:01:25,220 --> 00:01:33,350
And we usually create and size these tracks using grid-template-rows or grid-template-column. Within

15
00:01:33,350 --> 00:01:35,400
the intersections of the tracks,

16
00:01:35,420 --> 00:01:41,450
we create these small units which are called a grid cell.

17
00:01:41,630 --> 00:01:47,300
They are the smallest unit in a grid and they can be different sizes.

18
00:01:47,300 --> 00:01:52,880
So this one, for example, is a little bit wider than this one, but they essentially sit between the

19
00:01:52,880 --> 00:01:54,320
columns and the rows.

20
00:01:54,350 --> 00:01:59,380
You can use multiple cells to create a grid item.

21
00:01:59,390 --> 00:02:07,040
For example, in this case, we've actually positioned our grid item across two of our grid cells,

22
00:02:07,040 --> 00:02:09,440
this one and this one.

23
00:02:09,440 --> 00:02:19,640
And here we've created a grid item that is positioned vertically onto two of our grid cells.

24
00:02:19,940 --> 00:02:26,130
And then the final piece of the puzzle are the lines that separate our tracks.

25
00:02:26,220 --> 00:02:34,920
We have horizontal lines and we have vertical lines, and these are called the Grid lines because they

26
00:02:34,920 --> 00:02:36,930
are essentially the grid lines.

27
00:02:36,930 --> 00:02:44,850
And we can only control the grid lines by using that gap property to specify its height or width.

28
00:02:44,850 --> 00:02:46,950
But we can't really change its color.

29
00:02:46,950 --> 00:02:49,490
We can't really put anything inside the lines.

30
00:02:49,500 --> 00:02:53,100
They are just that they are lines for layout.

31
00:02:53,130 --> 00:03:01,680
With all of those things combined together in a grid, we've got our lines, we've got our tracks,

32
00:03:01,920 --> 00:03:08,460
we've got our cells, we've got our container and we've got our items.

33
00:03:08,730 --> 00:03:15,270
These are some of the most common words that you'll hear me say when we talk about grid and especially

34
00:03:15,270 --> 00:03:17,150
when we're thinking about placement.

35
00:03:17,200 --> 00:03:24,030
It's all of these things combined together that allow us to create these layouts using our grid.

36
00:03:24,450 --> 00:03:28,050
Let's try and create that layout using actual code.

37
00:03:28,320 --> 00:03:36,960
I've created a grid container and inside I've placed three grid items by creating three divs.

38
00:03:36,990 --> 00:03:41,610
Now I'm going to update the CSS code for that grid container.

39
00:03:41,610 --> 00:03:44,700
Make it use grid by setting display to grid.

40
00:03:44,700 --> 00:03:49,230
In addition, I'm setting the height to 100vh.

41
00:03:49,440 --> 00:03:57,150
Remember that by default a div is going to span the entire width of the window, but it's only going

42
00:03:57,150 --> 00:04:01,110
to occupy as much vertical space as there is content,

43
00:04:01,110 --> 00:04:09,390
but by setting the height of our container to 100vh, then it's also going to take that

44
00:04:09,390 --> 00:04:14,670
container and make it stretch all the way down to the bottom of the window.

45
00:04:14,970 --> 00:04:20,970
So now that we've got our grid container, we can create our tracks, and the tracks, if you remember,

46
00:04:20,970 --> 00:04:23,550
are created using the grid template properties.

47
00:04:23,580 --> 00:04:26,220
We're saying that there should be three columns.

48
00:04:26,220 --> 00:04:32,070
The first two are about the same height as each other and the third one is a little bit wider.

49
00:04:32,250 --> 00:04:40,020
And then we've said that there should be two rows of equal height. So something like this would get created.

50
00:04:40,020 --> 00:04:44,280
So we've got our tracks, we've got our lines, we've got our container,

51
00:04:44,310 --> 00:04:48,900
now, the items get placed in by default.

52
00:04:48,930 --> 00:04:55,860
It will start from the first and it will go into each of the cells that are available.

53
00:04:55,890 --> 00:04:58,950
This ".cowboy" will go into here.

54
00:04:58,980 --> 00:05:05,160
The next one the ".astronaut" will go into here and the ".book" will take up the final cell.

55
00:05:05,160 --> 00:05:08,520
This is before we specified any sort of positioning.

56
00:05:08,880 --> 00:05:12,750
And the final thing that we've updated here is the gap.

57
00:05:12,750 --> 00:05:16,260
We've said that this should be a 3rem gap.

58
00:05:16,260 --> 00:05:23,070
We're saying that each of these lines should be 3rem thick, and that means that we don't have

59
00:05:23,070 --> 00:05:27,630
to use padding or margin to separate the items in our grid.

60
00:05:27,630 --> 00:05:31,800
And when we run all of this code, this is what we will see.

61
00:05:32,010 --> 00:05:36,480
You'll notice the 3rem between each of the grid items.

62
00:05:36,480 --> 00:05:43,230
You'll notice the ratio of the width of our column 1 : 1 : 1.5,

63
00:05:43,380 --> 00:05:50,850
but you'll also notice that there's actually a whole track down here that's unoccupied because as I

64
00:05:50,850 --> 00:06:00,570
mentioned, by default, our grid is going to lay out our items into the unoccupied cells, one item

65
00:06:00,570 --> 00:06:04,830
per cell. Before we change that and create that layout

66
00:06:04,830 --> 00:06:05,850
in the beginning,

67
00:06:05,850 --> 00:06:08,730
I have a small challenge for you.

68
00:06:09,180 --> 00:06:18,090
Wouldn't it be nice if the content of each of these item divs were actually centered properly like this?

69
00:06:18,090 --> 00:06:23,520
And in order to do this, we're going to revise what you've learned about Flexbox.

70
00:06:23,640 --> 00:06:24,660
Remember what I said

71
00:06:24,880 --> 00:06:29,170
about how Flexbox is something that you're going to use with grid?

72
00:06:29,200 --> 00:06:36,130
Grid doesn't replace Flexbox, and Flexbox is great for lining items in our layouts.

73
00:06:36,310 --> 00:06:42,540
Go ahead and download the starting code, which is a zipped file called 10.2 Grid Placement,

74
00:06:42,550 --> 00:06:47,080
extract it and open it up inside VS Code.

75
00:06:47,380 --> 00:06:53,800
If we go ahead and show the preview, you'll see our three grid items and I've made the emojis a little

76
00:06:53,800 --> 00:06:56,470
bit bigger to make it easier to see.

77
00:06:56,740 --> 00:07:07,150
Now your goal is to make this website look like this with each of the emojis horizontally and vertically

78
00:07:07,150 --> 00:07:09,940
centered in our div.

79
00:07:10,210 --> 00:07:13,270
And you're going to do that using Flexbox.

80
00:07:13,360 --> 00:07:15,910
So have a think about how you can do this.

81
00:07:15,910 --> 00:07:21,670
And if you need to go back to the previous module on Flexbox, look at Flexbox Layout and see if you

82
00:07:21,670 --> 00:07:22,870
can figure this out.

83
00:07:22,900 --> 00:07:25,550
Pause the video and complete this challenge.

84
00:07:27,810 --> 00:07:28,230
All right.

85
00:07:28,230 --> 00:07:34,140
So the first thing we're going to need to do is we're going to need to turn each of these divs into

86
00:07:34,140 --> 00:07:36,390
a flexbox container.

87
00:07:36,390 --> 00:07:39,990
And we'll do that by setting display to flex.

88
00:07:40,320 --> 00:07:49,080
Now, once we've done that, the next step is to use the justify-content to set our content into the

89
00:07:49,080 --> 00:07:55,650
center, and justify-content, if you remember, is along the main axis of our flexbox.

90
00:07:55,770 --> 00:08:03,480
So when we said that this should be display: flex, we've essentially created a row-based flexbox with

91
00:08:03,480 --> 00:08:11,610
just a single item in it, and we told it to justify itself into the center horizontally.

92
00:08:12,030 --> 00:08:19,110
The next thing we need to do is to move this down to the vertical center, and we can do that using

93
00:08:19,110 --> 00:08:21,220
the align-items property.

94
00:08:21,240 --> 00:08:29,470
Let's set that to center and you can see how easily we've managed to center each of our text items inside

95
00:08:29,470 --> 00:08:32,120
our div just by using Flexbox.

96
00:08:32,140 --> 00:08:38,799
Flexbox provides one of the easiest ways to center an item inside another container.

97
00:08:38,799 --> 00:08:46,630
And if we were doing this with floats or CSS or absolute positioning, it will be a nightmare, especially

98
00:08:46,630 --> 00:08:49,270
when you want to change things and adapt your layout.

99
00:08:49,270 --> 00:08:57,280
But as you can see, Flexbox working alongside Grid is super useful and makes it easy for us to create

100
00:08:57,280 --> 00:08:59,470
any sort of layout that we desire.

101
00:08:59,560 --> 00:09:02,350
These tools together work beautifully.

102
00:09:02,970 --> 00:09:09,240
Hopefully you've managed to do that and you've got your emojis centered in the middle of the divs.

103
00:09:09,270 --> 00:09:17,430
The next step is to try and create this layout that we said should be really easy and doable using grid.

104
00:09:18,000 --> 00:09:23,340
Let's go ahead and lay out this first item, this cowboy emoji.

105
00:09:23,520 --> 00:09:30,060
In order to do that, I'm going to set it apart from the other divs by giving it a blue background color.

106
00:09:30,300 --> 00:09:37,320
And then I'm going to set a property called grid-column, and I'm going to set the value to "span 2".

107
00:09:37,500 --> 00:09:40,110
Let's see what this does, first of all.

108
00:09:40,290 --> 00:09:47,640
Now, you might remember this layout comes from our chrome developer tool and we can switch it on in

109
00:09:47,640 --> 00:09:51,720
order to see the lines and the tracks in our grid.

110
00:09:51,930 --> 00:10:00,600
When I selected the cowboy div, this very first div and I set it to span two columns,

111
00:10:00,720 --> 00:10:08,860
essentially what happens is it's going from track Number 1 all the way to track Number 3, and

112
00:10:08,860 --> 00:10:15,080
it's bridging these two columns and that's what span to columns does.

113
00:10:15,100 --> 00:10:24,280
So it starts at the position where that div is supposed to be and this is the end result.

114
00:10:24,790 --> 00:10:31,900
If you take a look inside the folder of the previous exercise, you'll see that we provided the code

115
00:10:31,900 --> 00:10:33,130
for this demo.

116
00:10:33,400 --> 00:10:39,310
Now, I'm a big believer in learning programming by playing around with code, so I recommend going

117
00:10:39,310 --> 00:10:41,770
into the demo1.html.

118
00:10:41,800 --> 00:10:49,180
seeing the code that we've added and then go ahead and click on Show Preview and we can view this layout

119
00:10:49,180 --> 00:10:50,620
in our browser.

120
00:10:50,710 --> 00:10:59,710
Now if you right-click on that div that we just laid out, you can see the grid by clicking on that

121
00:10:59,710 --> 00:11:03,790
grid chip and you'll see these lines show up.

122
00:11:03,820 --> 00:11:10,480
Now you can change the line color by selecting this box and we can make it a little bit darker to make

123
00:11:10,480 --> 00:11:11,830
it easier to see.

124
00:11:12,010 --> 00:11:18,490
Now, the other part that's really helpful about the Chrome Developer Tool is it actually shows you

125
00:11:18,490 --> 00:11:19,990
the line numbers.

126
00:11:19,990 --> 00:11:23,050
So you can see that the first one is line Number 1.

127
00:11:23,080 --> 00:11:28,030
The second line is line Number 2, line Number 3 and line Number 4.

128
00:11:28,420 --> 00:11:34,330
And this is really useful because there's another way of positioning our items.

129
00:11:34,750 --> 00:11:42,670
If we go into our styles and select our first div, you can see we've set the grid-column to "span 2".

130
00:11:43,120 --> 00:11:49,930
But if you notice there's a little triangle next to that property and when you click on it, you can

131
00:11:49,930 --> 00:11:57,490
see that it's actually a shorthand property for two other properties where that item should start in

132
00:11:57,490 --> 00:12:01,630
the grid-column and where that item should end in the grid-column.

133
00:12:01,840 --> 00:12:06,370
Let's switch this off and actually add in those two properties.

134
00:12:06,370 --> 00:12:10,060
So let's set the grid-column-start.

135
00:12:10,150 --> 00:12:16,450
Let's say instead of the default where it starts at, where it would be placed normally in the first

136
00:12:16,450 --> 00:12:20,290
cell, let's tell it to start from the second line.

137
00:12:20,290 --> 00:12:24,040
So now you can see that div move over to start here.

138
00:12:24,040 --> 00:12:33,070
And if we go ahead and specify the next property, which is grid-column-end, then we can say maybe

139
00:12:33,070 --> 00:12:35,320
it should end at 4.

140
00:12:35,500 --> 00:12:42,340
So now it's positioned starting from column number two, ending at column number four.

141
00:12:42,790 --> 00:12:49,420
Another way to specify the last line in a grid is to use these negative values.

142
00:12:49,420 --> 00:12:54,790
So if you look at the bottom, you can see all the negative values specified for each line.

143
00:12:54,790 --> 00:12:59,950
So if we count from the right-hand side, then this line is -4.

144
00:12:59,980 --> 00:13:03,640
This is -2, -3 and -4.

145
00:13:03,730 --> 00:13:07,060
Let's say the grid-column should end at -1,

146
00:13:07,090 --> 00:13:10,930
then it's going to extend to this last line.

147
00:13:10,930 --> 00:13:17,440
And this minus one is really, really handy because if you had many, many columns and you're not quite

148
00:13:17,440 --> 00:13:24,310
sure how many columns there are because maybe you created the grid dynamically or using code and it

149
00:13:24,310 --> 00:13:27,340
extends itself automatically or something crazy like that,

150
00:13:27,340 --> 00:13:34,900
you can always use minus one to specify the right-handmost line in the grid, and you can always use

151
00:13:34,900 --> 00:13:39,760
the positive number one to specify the leftmost line in the grid.

152
00:13:39,790 --> 00:13:41,990
These are just some really handy tips.

153
00:13:42,010 --> 00:13:47,080
Now, in addition to -1, you can see there's also -2 and -3.

154
00:13:47,080 --> 00:13:53,710
But I don't recommend using these because it very quickly gets confusing when you look at this at a

155
00:13:53,710 --> 00:13:54,310
glance.

156
00:13:54,310 --> 00:14:00,400
So I only recommend using -1 or maybe -2 if you really want to stretch it and using the

157
00:14:00,400 --> 00:14:02,260
positive numbers the rest of the time.

158
00:14:03,310 --> 00:14:09,400
Another thing to note here is you can actually start and end whichever direction you want.

159
00:14:09,430 --> 00:14:20,380
So let's say that I wanted my grid-column to end from the second line and I set my start to line Number

160
00:14:20,380 --> 00:14:21,220
4.

161
00:14:21,250 --> 00:14:27,060
Then it's going to flip that and still take up these two columns.

162
00:14:27,070 --> 00:14:33,370
It doesn't actually matter whether if your start is to the left of your end or if your end is to the

163
00:14:33,370 --> 00:14:34,900
left of your start.

164
00:14:34,900 --> 00:14:44,440
And you can even change this to span 2 and change the end to auto, which is the automatically initial

165
00:14:44,440 --> 00:14:48,070
position of the div before you did any positioning.

166
00:14:48,070 --> 00:14:50,440
So in this case it should be the first line.

167
00:14:50,650 --> 00:14:57,970
And if we go ahead and expand our original grid-column: span 2, to the shorthand is exactly the same as

168
00:14:58,000 --> 00:14:59,110
what we've done here.

169
00:15:00,040 --> 00:15:07,690
It's important to remember that the grid-column property is actually short for two other properties,

170
00:15:07,810 --> 00:15:15,940
and we could set each of these properties separately, or we can set it by using grid-column and

171
00:15:15,940 --> 00:15:24,820
grid-column-span, and then a particular number, for example, span 2 is basically telling our grid item

172
00:15:24,820 --> 00:15:33,220
to start where it's meant to start and then span as many columns as we specify, right here.

173
00:15:33,670 --> 00:15:41,470
Now, as you can imagine, there is a corresponding property called grid-row, which allows you to set

174
00:15:41,470 --> 00:15:50,080
the grid-row-start and the grid-row-end so that you can say how many of these vertical cells you want

175
00:15:50,080 --> 00:15:52,150
your grid item to span.

176
00:15:52,930 --> 00:15:59,960
So now that we've seen how we can occupy more than one cell in our grid and position it based on the

177
00:15:59,960 --> 00:16:05,660
start and end line numbers to achieve this first part of the layout.

178
00:16:05,690 --> 00:16:08,840
The next step is to lay out this green div.

179
00:16:09,320 --> 00:16:17,330
It might be a little bit more tricky than you would expect because this second div, if we look at the

180
00:16:17,630 --> 00:16:22,700
HTML, should be positioned immediately after this cowboy div.

181
00:16:23,060 --> 00:16:31,220
If in this default setup, we go ahead and set this to also span 2 using grid-column.

182
00:16:31,370 --> 00:16:37,790
Then in that case it's actually just going to stay right here because there are no more columns left,

183
00:16:37,790 --> 00:16:43,160
and by default, it's going to start right after the previous div from here.

184
00:16:43,310 --> 00:16:46,550
Then this is the layout that we're going to end up with.

185
00:16:46,970 --> 00:16:53,840
So one way we can fix this is by using another property called "order." Similar to flexbox,

186
00:16:53,870 --> 00:17:01,640
each of the grid items inside a grid container by default have an order of 0.

187
00:17:01,670 --> 00:17:09,500
They're all zero, so they're all equal If we elevate or promote the order of one item.

188
00:17:09,500 --> 00:17:17,119
So if this one becomes one and these are all by default, 0, then that means this one is going to

189
00:17:17,119 --> 00:17:22,089
be the rightmost or the bottom most in that grid.

190
00:17:22,099 --> 00:17:29,690
So now this gets shifted all the way to the end and it's as if we've placed this div down here.

191
00:17:29,990 --> 00:17:36,650
It doesn't really matter if you set the order to 1 or 100, it's all relative.

192
00:17:36,650 --> 00:17:42,560
If everything else is 0, as long as it's greater than 0, it's going to go to the end of the

193
00:17:42,560 --> 00:17:43,300
grid.

194
00:17:43,310 --> 00:17:52,160
But if you, for example, had maybe an order of 2 and then this one had an order of 5, then this

195
00:17:52,160 --> 00:17:56,810
one has to be greater than 5 in order to go into this position.

196
00:17:56,990 --> 00:18:03,440
And the direction goes from left to right and then top to bottom in this way.

197
00:18:04,270 --> 00:18:12,910
Now that we've learned how we can make this item have a higher order than the other items, and we've

198
00:18:12,910 --> 00:18:20,950
positioned it now into this bottom cell, it's time for you to do the next exercise, which is make

199
00:18:20,950 --> 00:18:29,380
it occupy two horizontal cells to be positioned directly under the blue div to look something like this.

200
00:18:30,040 --> 00:18:36,370
Open up exercise Number 2 and go ahead and show it as the preview.

201
00:18:36,580 --> 00:18:42,880
Then update the code for the astronaut div so that it looks like this image,

202
00:18:42,880 --> 00:18:46,990
goal2. Pause the video and complete this challenge.

203
00:18:49,300 --> 00:18:53,470
All right, So let's make the astronaut box look like the one in goal

204
00:18:53,470 --> 00:18:54,310
Number 2.

205
00:18:54,340 --> 00:19:00,640
We've already changed the order, and we've moved it from here, which is its default positioning based

206
00:19:00,640 --> 00:19:06,310
on the HTML to here by making it a higher order number than anything else.

207
00:19:06,340 --> 00:19:11,080
Now all we have to do is use that property we learned about previously,

208
00:19:11,110 --> 00:19:19,940
grid-column and we can make it span 2, in order to take up two of the columns inside our grid.

209
00:19:19,960 --> 00:19:28,660
So now it's positioned directly under our previous Blue Div and we're getting one step closer to that

210
00:19:28,660 --> 00:19:30,370
layout that we were looking for.

211
00:19:31,340 --> 00:19:37,600
Now, some of you might have realized that there's actually another way that you could create this positioning,

212
00:19:37,610 --> 00:19:45,830
which is instead of using the order property to change the order of that green astronaut div, we could

213
00:19:45,830 --> 00:19:54,410
actually simply just define all of its positions so we could say that it should start columnwise at

214
00:19:54,410 --> 00:20:01,970
column Number 1 and it should end columnwise at column Number 3.

215
00:20:02,150 --> 00:20:12,290
And then we could use the grid-row to say that it should start at row Number 2 and it should end at

216
00:20:12,290 --> 00:20:14,480
row Number 3.

217
00:20:14,510 --> 00:20:23,870
So now we've basically given it the exact coordinates for how to position this grid item and it will

218
00:20:23,870 --> 00:20:27,200
go in there even if we don't change the order.

219
00:20:27,710 --> 00:20:33,480
As you can imagine, there's probably also a shorthand for these four properties.

220
00:20:33,480 --> 00:20:41,280
And instead of writing each of these out individually, which is a lot of typing, we can just use the

221
00:20:41,280 --> 00:20:45,990
single shorthand property of "grid-area" to specify it.

222
00:20:46,020 --> 00:20:48,990
Now the order is important.

223
00:20:49,080 --> 00:20:58,410
We have to add four values separated by forward slashes and the first value corresponds to the

224
00:20:58,410 --> 00:21:00,270
grid-row-start.

225
00:21:01,230 --> 00:21:05,310
This is number one, which is 2 and 2 as you can see.

226
00:21:05,340 --> 00:21:09,810
The second one is the grid-column-start.

227
00:21:10,720 --> 00:21:11,860
Right here.

228
00:21:12,040 --> 00:21:16,570
And the third one is the grid-row-end.

229
00:21:17,640 --> 00:21:21,360
And the last one is the grid-column-end.

230
00:21:21,810 --> 00:21:27,630
And this creates a four coordinate layout that pens in our grid item.

231
00:21:27,930 --> 00:21:34,170
Now, one thing that's important to keep in mind when you're using grid area is if you're going to use

232
00:21:34,170 --> 00:21:36,810
grid area on a particular item,

233
00:21:36,810 --> 00:21:43,410
for example, this one, if you want the rest of the layout to behave as expected, they all need to

234
00:21:43,410 --> 00:21:44,880
use grid area.

235
00:21:45,780 --> 00:21:55,440
Now that we've seen how we can lay out the items using grid-column or grid-row and adding a span for

236
00:21:55,440 --> 00:22:02,280
how many columns or rows it should span, we've seen how we can use grid area or the order property

237
00:22:02,280 --> 00:22:04,180
to position items as well.

238
00:22:04,200 --> 00:22:09,810
It's time to figure out how we can position this and to test you in an exercise.

239
00:22:10,260 --> 00:22:21,430
The goal is to add some code into this "book div" to make this layout look like the goal3 image.

240
00:22:21,430 --> 00:22:29,200
Making that orange div occupy the entire two vertical rows and you're going to do this using the

241
00:22:29,200 --> 00:22:30,670
grid-row property.

242
00:22:31,300 --> 00:22:34,780
Pause the video and see if you can complete this challenge.

243
00:22:36,750 --> 00:22:37,170
All right.

244
00:22:37,170 --> 00:22:43,050
So as we mentioned when we talked about grid-column, there is the corresponding grid-row.

245
00:22:43,140 --> 00:22:48,840
We can change the grid-row so that it spans two rows.

246
00:22:49,200 --> 00:22:54,000
We write span 2, and then it's going to take up the two rows.

247
00:22:54,030 --> 00:22:56,730
And now we have our layout that we wanted.

248
00:22:57,390 --> 00:23:04,810
Now, you might have done this differently using grid area so we could have started the area from a

249
00:23:04,920 --> 00:23:13,350
row Number 1 all the way until row Number 3 or row -1, which is to the end and start at

250
00:23:13,350 --> 00:23:19,890
column Number 3 and end at column Number 4 or also the last column.

251
00:23:19,890 --> 00:23:21,390
We could have done it like this.

252
00:23:21,390 --> 00:23:27,810
So there's multiple ways of doing this, but I think this is probably the most straightforward.

253
00:23:28,200 --> 00:23:33,660
Take a look at solution number three to see if one of your solutions matches.

254
00:23:34,470 --> 00:23:41,860
The final thing I want to show you is one of the biggest differences between Grid and Flexbox is Grid

255
00:23:41,860 --> 00:23:46,270
actually lets you overlay items onto other items.

256
00:23:46,360 --> 00:23:52,660
Notice how in this case you can see this orange box is actually sitting on top of the green and blue

257
00:23:52,660 --> 00:23:53,530
boxes.

258
00:23:53,650 --> 00:23:59,260
And we can do this by simply positioning items on top of each other in the grid.

259
00:23:59,500 --> 00:24:02,530
The code for this might look something like this.

260
00:24:02,740 --> 00:24:10,870
Notice firstly, I've given this book div a transparency of 80. So when we're using hex codes, the

261
00:24:10,870 --> 00:24:16,690
first six characters correspond to the color, so the amount of red, green and blue,

262
00:24:16,780 --> 00:24:23,200
and then finally we can add a value for what's called alpha, which is just how much transparency there

263
00:24:23,200 --> 00:24:23,650
is.

264
00:24:23,890 --> 00:24:31,120
80 basically is about 50% transparency. That allows us to see through the orange and the blue and the

265
00:24:31,120 --> 00:24:31,780
green.

266
00:24:32,110 --> 00:24:37,230
Once we've done that and I've laid out the grid area so that it actually overlaps it.

267
00:24:37,240 --> 00:24:45,430
So here we're starting at row Number 1 and column Number 2, and then we're continuing until row

268
00:24:45,430 --> 00:24:48,910
Number 3 and column Number 4.

269
00:24:48,940 --> 00:24:58,360
Then we have this large area defined which actually overlaps the first div and also the second div. Simply

270
00:24:58,360 --> 00:25:02,170
by positioning this book element on top of the other two,

271
00:25:02,200 --> 00:25:09,490
we've actually created an overlapping layout and this is one of the coolest things about Grid, where

272
00:25:09,490 --> 00:25:15,250
it has flexible positioning and it's really easy to put things on top of each other, around each other,

273
00:25:15,250 --> 00:25:20,710
line things up straight, and as you'll see, it's just really, really helpful for creating complex

274
00:25:20,710 --> 00:25:21,460
layouts.

275
00:25:22,060 --> 00:25:28,270
Now that we've completed our tutorial, it's time for you to try an exercise.

276
00:25:28,270 --> 00:25:37,210
And similar to Flexbox Froggy, the creator of Flexbox Frog Thomas Park, also created a cool game

277
00:25:37,210 --> 00:25:38,770
called Grid Garden.

278
00:25:38,920 --> 00:25:46,120
If you head over to appbrewery.github.io/gridgarden, all one word, then you'll be able to see

279
00:25:46,120 --> 00:25:50,040
the CSS grid game with all 28 levels.

280
00:25:50,050 --> 00:25:56,380
Remember, you can change the language of the instructions here and you can also go between the different

281
00:25:56,380 --> 00:25:57,130
levels,

282
00:25:57,130 --> 00:26:02,140
but ideally you should be able to go from one all the way straight through to 28 and you'll be able

283
00:26:02,140 --> 00:26:07,270
to use what you've learned about CSS grid to water your garden and poison the weeds.

284
00:26:07,510 --> 00:26:12,340
Pause the video, have a go at that now, and once you're done, carry on to the next lesson where we're

285
00:26:12,340 --> 00:26:15,100
going to create our final project for this section.

286
00:26:15,430 --> 00:26:17,290
Enjoy and see you there.

