1
00:00:00,260 --> 00:00:00,620
All right.

2
00:00:00,620 --> 00:00:07,130
So now that we've had a little bit of a taste of what Bootstrap can do, let's dive deep into one of

3
00:00:07,130 --> 00:00:12,590
the most powerful features of Bootstrap, which is the 12-column Layout System.

4
00:00:13,070 --> 00:00:17,450
The 12-column system is made of three components.

5
00:00:17,570 --> 00:00:26,540
Firstly, we need a div that has a class of "container" and this is going to be the starting point.

6
00:00:26,630 --> 00:00:36,320
Next inside that container, we need another div which is going to be of class "row" and inside the row

7
00:00:36,350 --> 00:00:42,570
is where we will have our items and they will be laid out using the column system.

8
00:00:42,590 --> 00:00:46,160
So what does this look like in code?

9
00:00:46,190 --> 00:00:48,410
Well, it's pretty simple.

10
00:00:48,410 --> 00:00:57,980
We have a container that contains a single row and then within the row we can have as many items as

11
00:00:57,980 --> 00:00:58,700
we like,

12
00:00:58,700 --> 00:01:02,250
and they're laid out using the column class (col).

13
00:01:02,520 --> 00:01:04,019
Pretty simple so far

14
00:01:04,019 --> 00:01:08,130
and you're probably thinking, well, there's nothing very groundbreaking here.

15
00:01:08,340 --> 00:01:15,090
Now, the interesting thing starts happening when you have multiple columns laid out inside these rows,

16
00:01:15,240 --> 00:01:24,240
because automatically Bootstrap will try to give every column inside the row equal spacing and space

17
00:01:24,240 --> 00:01:28,110
them across the entire width of the container.

18
00:01:28,850 --> 00:01:38,210
So if you had a container which included a row that had one, two, three, four, five, six divs in

19
00:01:38,240 --> 00:01:45,230
there, each with the class set as col short for column, then it will divide up the entire width by

20
00:01:45,230 --> 00:01:45,850
six.

21
00:01:45,860 --> 00:01:50,450
And if you had three of them then it would give each of them a third of the space.

22
00:01:50,810 --> 00:01:54,410
Now the bootstrap container is responsive.

23
00:01:54,410 --> 00:02:01,730
So by defining a div with the class of container, you're actually telling it to have a different size

24
00:02:01,760 --> 00:02:04,070
on different sized screens.

25
00:02:04,100 --> 00:02:13,010
If we had an XL or an XXL screen, so like a desktop or a TV or something, then that container is going

26
00:02:13,010 --> 00:02:20,390
to be this size and you can see that there's several breakpoints that are responsive to the different

27
00:02:20,390 --> 00:02:22,280
device screen sizes.

28
00:02:22,310 --> 00:02:32,160
On mobile, maybe the container would be 540px, on an iPad, maybe it would be 720 or 960px,

29
00:02:32,160 --> 00:02:36,300
and on desktop, maybe it would be about 1000Px.

30
00:02:36,510 --> 00:02:44,370
You can use the dash (-) plus these different letters to specify at which point you want your container

31
00:02:44,370 --> 00:02:44,610
to be

32
00:02:44,610 --> 00:02:45,810
100%.

33
00:02:45,990 --> 00:02:55,050
Container "sm" is the same as the normal container, but container "md" or medium means that on small screens

34
00:02:55,050 --> 00:02:59,190
the container would already reach 100% of the width of the screen.

35
00:02:59,190 --> 00:03:05,010
And again, remember, all of these sizes here are referring to the width of the viewport.

36
00:03:05,010 --> 00:03:07,650
So only this dimension.

37
00:03:07,860 --> 00:03:15,930
And then as we go down the line, we're starting to specify a 100% width on larger and larger screens

38
00:03:15,930 --> 00:03:23,340
until we reach this container fluid, which basically says that on all screen sizes, we want it to

39
00:03:23,340 --> 00:03:28,320
reach from edge to edge, which is 100% width. In most cases,

40
00:03:28,320 --> 00:03:34,800
you will see these two being used quite frequently because the container gives a nice sort of margin

41
00:03:34,800 --> 00:03:36,630
around the left and the right.

42
00:03:36,630 --> 00:03:40,260
And the container fluid is when you want that edge to edge behavior.

43
00:03:41,300 --> 00:03:45,920
The layout system gets more interesting when we start using sized columns.

44
00:03:45,920 --> 00:03:52,550
Instead of just writing col as the class, we can actually set the class as for example, col-2

45
00:03:52,550 --> 00:03:54,140
or col-4

46
00:03:54,170 --> 00:04:05,000
and what this is saying is if we think of each of our rows as having 12 columns and we split them all

47
00:04:05,000 --> 00:04:09,620
up into the 12 equal size columns like this.

48
00:04:09,620 --> 00:04:11,960
So if you count this is actually a total of 12.

49
00:04:11,990 --> 00:04:18,279
Then when we create a div we can specify well how many of these columns do we want to occupy?

50
00:04:18,290 --> 00:04:26,180
In this case this div wants two of those columns and then this one wants four of them and then the final

51
00:04:26,180 --> 00:04:27,950
one wants six.

52
00:04:28,100 --> 00:04:35,930
Based on the classes that you choose, Bootstrap will know how much space to allocate each div on a

53
00:04:35,930 --> 00:04:37,460
percentage basis.

54
00:04:37,460 --> 00:04:45,810
So you could view the col-6 as 50%, and the col-2 as one-sixth of the entire width and so on and

55
00:04:45,810 --> 00:04:46,440
so forth.

56
00:04:46,440 --> 00:04:53,730
So you can use all of the numbers col-1 all the way up to col-12 and you can split up the proportion

57
00:04:53,730 --> 00:04:56,700
of your screen and the content inside.

58
00:04:56,700 --> 00:05:04,290
So maybe you would have a navigation section on the left that you only want to take up 2 out of 12

59
00:05:04,290 --> 00:05:11,280
width and then the main content here maybe could take up 10 out of 12 of the width and so on and so

60
00:05:11,280 --> 00:05:11,520
forth.

61
00:05:11,520 --> 00:05:18,540
And this is a really, really easy and intuitive way of sizing your content using bootstrap, and this

62
00:05:18,540 --> 00:05:20,220
is what the code would look like.

63
00:05:20,220 --> 00:05:25,530
So we have three divs and we're giving this one 2 out of 12, 4 out of 12, 6 out of 12,

64
00:05:25,530 --> 00:05:28,590
and this is the layout that we end up with

65
00:05:28,590 --> 00:05:31,050
and we didn't have to write any CSS.

66
00:05:31,080 --> 00:05:34,680
All we had to do was add in the pre-built layout classes.

67
00:05:34,770 --> 00:05:42,090
Again, it's really important to know that Bootstrap has predefined breakpoints and these dimensions

68
00:05:42,090 --> 00:05:45,480
are defined based on common screen-sizes.

69
00:05:45,480 --> 00:05:51,630
And even though these numbers are constantly changing, generally I would say that small is for mobile

70
00:05:51,630 --> 00:05:56,310
devices, medium is for tablets and iPads.

71
00:05:56,710 --> 00:06:05,880
A large is for laptop, extra large is for desktop, and extra extra large is for anything crazy like

72
00:06:05,880 --> 00:06:07,470
maybe a TV or something.

73
00:06:07,470 --> 00:06:11,880
And extra small is for devices that are maybe longer than they are wide.

74
00:06:11,880 --> 00:06:16,590
So maybe foldable phones and even really narrow phone screens.

75
00:06:16,890 --> 00:06:24,030
Now, one thing I want to draw your attention to is the directionality of the signs here.

76
00:06:24,180 --> 00:06:31,620
All of these breakpoints, which will often use, for example, col-sm-2,

77
00:06:31,800 --> 00:06:40,410
this section refers to the screens which are greater than this dimension.

78
00:06:40,410 --> 00:06:51,150
So that means the small breakpoint is between here and here and covers the range between 576 and 768,

79
00:06:51,150 --> 00:06:53,370
and each of them always go up.

80
00:06:53,370 --> 00:06:58,260
So this is important point to keep in mind when you're dealing with the bootstrap breakpoints.

81
00:06:58,530 --> 00:07:03,660
Now, one of the great things about bootstrap breakpoints is we don't really need the media queries

82
00:07:03,660 --> 00:07:10,440
as much because this covers pretty much a lot of the different device dimensions and we don't have to

83
00:07:10,440 --> 00:07:15,120
manually write all the pixel sizes and add media queries into our CSS.

84
00:07:15,150 --> 00:07:21,840
We can target the different sizes and make our website responsive by using the pre-built breakpoints.

85
00:07:22,410 --> 00:07:26,250
Here's an example of the bootstrap breakpoints. Here

86
00:07:26,250 --> 00:07:35,850
we're saying that on a small screen and above we want the dimension ratio to be two, four and six.

87
00:07:35,850 --> 00:07:40,860
So this means that on desktop, on laptop, on TV, it's all going to have this size.

88
00:07:40,860 --> 00:07:42,570
And even on mobile as well.

89
00:07:42,600 --> 00:07:49,740
But below the size of mobile, it is not defined as having these proportions.

90
00:07:49,740 --> 00:07:54,660
So it will default to giving each of these divs 100%.

91
00:07:55,260 --> 00:07:58,050
And similarly, if you don't add a number here.

92
00:07:58,050 --> 00:08:02,490
So we could for example, here it's 12 columns, 12/3,

93
00:08:02,490 --> 00:08:05,040
so these are actually col-sm-4's.

94
00:08:05,040 --> 00:08:10,350
But if we don't define a number, you remember that they will automatically distribute.

95
00:08:12,210 --> 00:08:17,910
But what would it look like if we reduce the screen size to less than a mobile size?

96
00:08:17,940 --> 00:08:26,040
Well, all of these divs will go to 100% width when the overall width is less (<) than 576,

97
00:08:26,250 --> 00:08:32,730
then all of these items default to as if they just had a column defined.

98
00:08:32,730 --> 00:08:41,669
So col as the class and the col class by default is going to take up 100% of the width in the

99
00:08:41,669 --> 00:08:42,600
small-sized screen.

100
00:08:43,150 --> 00:08:48,330
Now in a single div, you can actually also have multiple breakpoints.

101
00:08:48,340 --> 00:08:58,750
So in this case, what it's saying is on the large devices and above, then it should take up four out

102
00:08:58,750 --> 00:09:00,760
of 12 of the width.

103
00:09:01,030 --> 00:09:04,600
On medium sizes and above,

104
00:09:04,600 --> 00:09:06,550
well, because the above is already defined,

105
00:09:06,550 --> 00:09:13,840
so then this case is only on medium devices, then it should take 8 out of 12 of the width and

106
00:09:13,870 --> 00:09:17,710
on small devices it should take up 12 out of 12.

107
00:09:17,710 --> 00:09:18,940
So full width.

108
00:09:19,450 --> 00:09:22,870
Here we're simulating a large screen.

109
00:09:22,870 --> 00:09:28,540
So maybe on a laptop or a desktop, then it's taking up 4 out of 12.

110
00:09:28,570 --> 00:09:30,790
It's this kind of proportion.

111
00:09:30,790 --> 00:09:34,410
And then we go over to the next size down.

112
00:09:34,420 --> 00:09:39,850
So on an iPad, then it's going to take up 8 out of 12 of the screen.

113
00:09:39,850 --> 00:09:46,400
And just for example sakes', let's go down even further to a mobile size where we want it to take

114
00:09:46,400 --> 00:09:49,820
up 100% or full width of the screen.

115
00:09:49,820 --> 00:09:55,160
Because as you imagine, when we have more screen real estate, it's easier to see things,

116
00:09:55,160 --> 00:10:00,500
and when we're working on smaller screens, we want to make things generally a bit larger so that it's

117
00:10:00,500 --> 00:10:03,260
easier for users to see our content.

118
00:10:03,830 --> 00:10:10,730
In addition to having multiple breakpoints in each div, you can also mix and match the types of definitions.

119
00:10:10,730 --> 00:10:16,040
So for example, here we've got two-sized columns, col-2 and col-4.

120
00:10:16,040 --> 00:10:21,530
So it's always going to take up 2 out of 12, this section four out of 12 here,

121
00:10:21,530 --> 00:10:25,620
but this last one, notice how we've just left it as the column class.

122
00:10:25,640 --> 00:10:31,490
Now this means that it's going to automatically adjust in size in order to take up whatever proportion

123
00:10:31,490 --> 00:10:32,450
remains.

124
00:10:33,130 --> 00:10:40,270
Bootstrap layout is a little bit complicated when you're first working with it, and it's really important

125
00:10:40,270 --> 00:10:46,780
that you read the docs and also have plenty of practice before things start to make more sense.

126
00:10:46,780 --> 00:10:54,730
So in order for you to practice, I've created a website at appbrewery.github.io/bootstrap-layout,

127
00:10:54,970 --> 00:11:00,220
and if you go to this website you'll see that I've got three exercises in total for you.

128
00:11:00,490 --> 00:11:07,570
The idea of the exercises is that at the top there will be a demo area, which is the effect that you're

129
00:11:07,570 --> 00:11:08,740
trying to achieve.

130
00:11:08,770 --> 00:11:15,250
For example, in this case, we want these divs to be 50% on desktop and 100% on mobile.

131
00:11:15,250 --> 00:11:24,310
So as I reduce the width, you'll see that it gets to a point where we reach that sm breakpoint, where it

132
00:11:24,310 --> 00:11:27,280
goes into 100% width.

133
00:11:27,520 --> 00:11:33,050
As you scroll down, each of the different exercises will have different proportions,

134
00:11:33,050 --> 00:11:41,090
and what you want to do is to modify the HTML code inside here, which is responsible for the styling

135
00:11:41,090 --> 00:11:45,410
of the area that you control, which are the divs underneath the examples,

136
00:11:45,410 --> 00:11:52,910
and I want you to add the classes for using the 12-column layout system so that your area behaves exactly

137
00:11:52,910 --> 00:11:55,700
the same as the top-area.

138
00:11:55,700 --> 00:12:00,380
When you reduce the size and hit the various different breakpoints.

139
00:12:00,860 --> 00:12:08,030
If you get stuck, be sure to check out the Layout Section of the Bootstrap Documentation and here you'll

140
00:12:08,030 --> 00:12:10,700
see the different bootstrap breakpoints.

141
00:12:10,700 --> 00:12:19,490
Also, you can read up more on how the columns work, how the containers work, and how the grid system

142
00:12:19,490 --> 00:12:20,270
works.

143
00:12:20,510 --> 00:12:23,600
Pause the video now and give this challenge a go.

144
00:12:26,320 --> 00:12:30,910
So hopefully you've given this a go and you've managed to get everything to work correctly.

145
00:12:30,940 --> 00:12:33,070
Let's go through the solution together.

146
00:12:33,250 --> 00:12:38,560
The first example says it should be 50% on desktop and 100% on mobile.

147
00:12:38,590 --> 00:12:47,860
We know that the desktop breakpoint is the XL, so we can define col-xl-6, and 6 out

148
00:12:47,860 --> 00:12:50,560
of 12 is of course 50%.

149
00:12:50,590 --> 00:12:59,350
Now in order to get it to be 100% on mobile, we could say col-sm-12, which is 100% and we

150
00:12:59,350 --> 00:13:01,150
can add that to both divs.

151
00:13:01,180 --> 00:13:07,360
Now if I go ahead and set apply changes, you can see now when I reduce the width of the window that

152
00:13:07,360 --> 00:13:14,860
it's going to hit that breakpoint where below which it's no longer going to be 50% and it's going to

153
00:13:14,860 --> 00:13:17,680
start taking up the full width.

154
00:13:18,580 --> 00:13:25,420
Now, you might remember from previously we said that the bootstrap breakpoints, target sizes, this

155
00:13:25,420 --> 00:13:27,450
particular size and above.

156
00:13:27,470 --> 00:13:35,120
So when we define col-xl-6, we're saying anything that's above the XL breakpoint, which is greater

157
00:13:35,120 --> 00:13:39,110
than 1200px, should be 50%.

158
00:13:39,200 --> 00:13:44,270
You might have realized that you don't actually need to define this because everything else is going

159
00:13:44,270 --> 00:13:45,860
to default to 100%.

160
00:13:45,860 --> 00:13:51,530
So if I apply changes again, you can see that my purple example still behaves the same as the green

161
00:13:51,530 --> 00:13:52,310
example,

162
00:13:52,310 --> 00:13:58,220
and I've only changed the behavior of the XL size and above and changed its layout.

163
00:13:58,820 --> 00:14:02,020
All right, so let's go to exercise Number 2.

164
00:14:02,030 --> 00:14:07,310
And in this case, I haven't given you exactly what they should do or how they should behave,

165
00:14:07,310 --> 00:14:14,240
and instead, I wanted you to simply just reduce the width of the screen to see how it changes through

166
00:14:14,240 --> 00:14:15,710
the different sizes.

167
00:14:15,800 --> 00:14:17,100
The first one's easy,

168
00:14:17,120 --> 00:14:23,240
pretty much all of the larger sizes, all the way down to the large breakpoint takes up the full

169
00:14:23,240 --> 00:14:26,570
12-width column. And you can take out a ruler if you want to measure the screen,

170
00:14:26,570 --> 00:14:30,800
but we can see that Column 1 is roughly half of the width of the row,

171
00:14:30,830 --> 00:14:37,010
Columns 2 and 3 are pretty much equal-size, so it's probably going to be six, three and three.

172
00:14:37,340 --> 00:14:41,960
Let's modify this so that we target the large breakpoint first.

173
00:14:41,960 --> 00:14:47,510
So we'll say col-lg-6 for the first column.

174
00:14:47,540 --> 00:14:54,860
The second column is going to be called ld-3Dash, and the same for the third column.

175
00:14:54,860 --> 00:15:00,350
So now if I click apply changes, you can see it's now taking up the same proportions,

176
00:15:00,350 --> 00:15:08,360
but when we hit this breakpoint that's below the large breakpoint, our columns by default go to 100%,

177
00:15:08,390 --> 00:15:11,390
whereas the example actually does something different.

178
00:15:11,420 --> 00:15:16,460
The top column takes up 100% and the other two take up half of the width.

179
00:15:16,460 --> 00:15:21,260
And you can see that behavior continues all the way until the very small size.

180
00:15:21,260 --> 00:15:24,710
So that means that we've got an sm breakpoint there defined.

181
00:15:24,740 --> 00:15:29,450
Now, once you've worked with this for a long time, you can spot each of the breakpoints pretty much

182
00:15:29,450 --> 00:15:30,290
by eye,

183
00:15:30,320 --> 00:15:36,020
but initially you can always just switch around, try different ones, try the sm, try the xl and see

184
00:15:36,020 --> 00:15:38,880
which ones actually behave like the example.

185
00:15:38,900 --> 00:15:44,030
There's nothing wrong with trial and error. When it hits the smaller screen size,

186
00:15:44,120 --> 00:15:51,650
our Column 1 is going to take up the full width of the row and then the other two on the smaller breakpoint

187
00:15:51,650 --> 00:15:54,110
are going to take up half of the width.

188
00:15:54,110 --> 00:15:56,000
So col-sm-6.

189
00:15:56,590 --> 00:15:59,440
And similarly, the third one does the same thing.

190
00:15:59,440 --> 00:16:00,940
So let's apply the change

191
00:16:00,940 --> 00:16:05,410
and you can see now at this breakpoint, they also behave exactly the same.

192
00:16:05,410 --> 00:16:12,430
So now all we have left is the final one, which is just the smallest breakpoint for the columns.

193
00:16:12,430 --> 00:16:19,560
And here what's actually happening is each of these columns are taking up ten out of 12 of the columns.

194
00:16:19,570 --> 00:16:23,590
Now, I can spot that by eye, but also I created this exercise, so I know,

195
00:16:23,590 --> 00:16:26,770
but if you try some different numbers, you'll probably get there as well.

196
00:16:26,770 --> 00:16:35,380
So if we define the smallest size as column, let's just try an 8 to start with so I can show you

197
00:16:35,380 --> 00:16:37,210
this trial and error process.

198
00:16:37,210 --> 00:16:40,690
And we know that all the columns behave the same at that breakpoint.

199
00:16:40,690 --> 00:16:45,640
If we click apply changes and we go here, we can see, well, eight is clearly too small.

200
00:16:45,640 --> 00:16:50,590
So let's go up a size and let's change to 10 out of 12.

201
00:16:50,590 --> 00:16:58,880
And once I hit apply changes, you can see we now have both sets of columns behaving exactly the same

202
00:16:58,880 --> 00:17:00,710
at all the different breakpoints.

203
00:17:00,710 --> 00:17:05,990
This one was a little bit harder, admittedly, and it required a little bit more thinking and probably

204
00:17:05,990 --> 00:17:07,520
trial and error on your part,

205
00:17:07,520 --> 00:17:12,950
but hopefully, by the end of it,  you will understand a bit better about how these different breakpoints

206
00:17:12,950 --> 00:17:15,260
work and at which points they hit.

207
00:17:15,260 --> 00:17:20,180
So now for the final exercise and this one, we've got two columns.

208
00:17:20,180 --> 00:17:29,150
Initially they start out in one line taking up a particular proportion and then we hit a certain breakpoint

209
00:17:29,150 --> 00:17:31,820
and it changes the proportion.

210
00:17:32,120 --> 00:17:37,700
Column 1 gets a little bit wider, takes up more space compared to Column 2.

211
00:17:37,700 --> 00:17:44,390
And then if we reduce a little bit more, that changes again at the next breakpoint and then again and

212
00:17:44,390 --> 00:17:46,430
then finally taking up full width.

213
00:17:46,640 --> 00:17:52,010
So let's start with the largest breakpoint we know, which is the xxl,

214
00:17:52,340 --> 00:17:56,210
let's say that col-xxl

215
00:17:56,210 --> 00:18:02,240
and let's define as 1 out of 12, and then give the other half,

216
00:18:02,360 --> 00:18:05,150
12 minus one is 11.

217
00:18:05,150 --> 00:18:09,770
And now let's apply the change and you can see that is the correct proportion.

218
00:18:10,040 --> 00:18:12,740
Again, this might require trial and error on your part.

219
00:18:12,770 --> 00:18:14,090
Don't be too hard on yourself.

220
00:18:14,090 --> 00:18:17,150
If you didn't manage to get it first time, I wouldn't be able to either,

221
00:18:17,150 --> 00:18:19,760
if it was somebody else's exercise like this.

222
00:18:19,850 --> 00:18:26,630
Now let's hit the next breakpoint just about here, and this is going to be the next breakpoint down.

223
00:18:26,630 --> 00:18:28,070
T his is the xl.

224
00:18:28,100 --> 00:18:34,580
We've just hit 1200. And a tip for working with responsiveness,

225
00:18:34,580 --> 00:18:39,580
when you're wondering how do I know that it's the 1200px breakpoint that got hit?

226
00:18:39,590 --> 00:18:46,880
If you go into the Chrome Developer Tools and click on this button to toggle the device toolbar and

227
00:18:46,880 --> 00:18:54,080
change the dimensions to Responsive, then you can click this drag bar and look at the top here.

228
00:18:54,080 --> 00:19:01,850
This is the important width that we need to look at. Once I expand it to 1200, you can see that jump

229
00:19:01,850 --> 00:19:04,340
in size happen just around there.

230
00:19:04,340 --> 00:19:12,140
So we know that the 1200 breakpoint is the xl breakpoint and you can work this out this way as well.

231
00:19:12,140 --> 00:19:16,250
So just a tip for the future when you're working with any kind of responsiveness,

232
00:19:16,250 --> 00:19:21,650
this is really useful to know, but most of the time I would judge responsiveness just by eye when you're

233
00:19:21,650 --> 00:19:24,350
designing the layout to see what looks good.

234
00:19:25,010 --> 00:19:30,830
All right, so let's hit the next breakpoint at the xl size 1200px.

235
00:19:30,830 --> 00:19:36,650
So this is col-xl, and I reckon this is a ratio of 2 to 10.

236
00:19:36,650 --> 00:19:44,330
So let's do col-xl-2, col-xl-10, let's apply our changes and that's pretty good.

237
00:19:44,330 --> 00:19:52,070
So now let's keep reducing until we hit the next breakpoint and this is going to be the next level down,

238
00:19:52,070 --> 00:19:53,690
which is large,

239
00:19:53,720 --> 00:19:58,040
lg, and I reckon this is probably 4 to 8.

240
00:19:58,040 --> 00:20:06,620
So col-lg-4 and the next one will be col-lg-8.

241
00:20:06,620 --> 00:20:11,900
And notice that each of these always add up to 12 because you can see in the example layout, they're

242
00:20:11,900 --> 00:20:13,610
only taking up one row.

243
00:20:13,640 --> 00:20:18,500
If it didn't add up to 12, then it will go to the next row in order to take up the amount of space

244
00:20:18,500 --> 00:20:19,760
that we specified.

245
00:20:20,000 --> 00:20:23,030
Now we have the next breakpoint, which is the col-md,

246
00:20:23,030 --> 00:20:28,550
and this one's easy to spot because it's half/half, so it's going to be 6,

247
00:20:28,550 --> 00:20:35,150
And finally we have the rest are by default going to take up 100%.

248
00:20:35,150 --> 00:20:38,420
So you could define the sm, but that's also the default behavior.

249
00:20:38,420 --> 00:20:39,770
So you could also leave it out.

250
00:20:40,130 --> 00:20:41,000
There you have it.

251
00:20:41,000 --> 00:20:42,620
That's the final solution

252
00:20:42,620 --> 00:20:48,650
code for Exercise 3 and Exercise 2 and Exercise 1.

253
00:20:48,650 --> 00:20:52,670
Hopefully, you managed to get there in the end, even if there was a little bit of trial and error and

254
00:20:52,670 --> 00:20:53,810
some difficulty,

255
00:20:53,810 --> 00:20:55,880
but once you've used bootstrap layout

256
00:20:55,890 --> 00:20:56,580
a few times

257
00:20:56,580 --> 00:20:58,170
you'll get used to this idea.

258
00:20:58,170 --> 00:21:01,680
And it's a really intuitive way to layout our screen,

259
00:21:01,680 --> 00:21:06,270
and it's really easy to manipulate and to create different layout designs.

260
00:21:06,660 --> 00:21:11,130
Now, in the next lesson, we're going to be talking through the different Bootstrap Components.

261
00:21:11,130 --> 00:21:13,650
So for all of that and more, I'll see you there.

